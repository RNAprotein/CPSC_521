#######################
# project:RNA-Protein interaction (for fly): accessibility (compare to Li et al 2010)
#######################


#purpose: use four different comparative rna secondary structure predicting programs (ppfold, rnaalifold, rnadecoder, transat) to detect the accessibility of protein binding sites on 3'UTR region of fly transcripts; compare the results with MFE based method rnaplfold which is used in the oringal Li2010 paper
#three major tasks: 1. get the local fasta format MSA for 3'UTR region; 2. run the corresponding programs; 3. map the predicted accessibility to binding sites and summarize the resutls 




#last update: 20121010




General description
------------------------------------------------------
#working directory:
#note: /ubc/cs/research/irmtraud/people/syang11 is equivalent to /ubc/cs/home/s/syang11/Desktop/syang11 (alias link)
#resources:
#-results from Li2010 paper
/ubc/cs/research/irmtraud/people/syang11/work/20120525/Li2010


#-gtf file from ensembl
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl


#-mutiple sequence alignment .maf files from UCSC
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/UCSC_mafs


#-3'UTR protein coding coodinates (.bed file) from Ensembl
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl


#-fly 15 species phylogenetic tree from UCSC
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/trees
__________








#scripts:
#-alignment retrieval related scripts
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly


#-rna structure prediction related scripts
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts


#-protein binding sites mapping, rna structure predicting results summarization related scripts
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching
_____________






#results:
#-get the local fasta format MSA for 3'UTR region
/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000
note: this directory stores all the 3'UTR regions (around 7k) which are: 1. at positive strand; 2. has only one contineous region on the genome (namely, not mutiple regions for one transcript's 3'UTR) 


#-programs running results:
#--ppfold:
/ubc/cs/research/irmtraud/people/syang11/work/20120626/ppfold_results_7000


#--alifold:
/ubc/cs/research/irmtraud/people/syang11/work/20120626/alifold_results_7000


#--decoder:
scan mode:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results
fold mode:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold


#--transat:
/ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000
_____________






#-binding sites matching results:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
_____________






#predicting accessibility summarization results for the four comparative methods(ppfold, rnaalifold, rnadecoder, transat): 
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results
_____________












Detail subjects
--------------------------------------------------------
####
#task 1. get the local fasta format MSA for 3'UTR region;
####

updated on 20121118


#1. get the UCSC maf alignments data 
1.1 from Evan
-----------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Li_ProteinRNA_from_Evan


NOTE: not used in case of consistency issues, download again by myself
 




1.2 Download UCSC fly MSA
-----------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/UCSC_mafs

version: dm3/BDGP Release 5

wget -r -e robots=off -np http://hgdownload.cse.ucsc.edu/goldenPath/sacCer2/multiz7way/maf/


download files:

chr2LHet.maf  
chr2RHet.maf  
chr3LHet.maf  
chr3RHet.maf  
chr4.maf  
chrUextra.maf  
chrXHet.maf  
chrYHet.maf
chr2L.maf     
chr2R.maf     
chr3L.maf     
chr3R.maf     
chrM.maf  
chrU.maf       
chrX.maf


NOTE: Not using Evan's data in order of inconsistency, download again and check manually




1.3 Download UCSC fly chromsome fasta files
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fly_chromsome_UCSC

version: dm3/BDGP Release 5

updated on 20121118


wget -r -e robots=off -np http://hgdownload.cse.ucsc.edu/goldenPath/dm3/chromosomes/


download files:

chr2L.fa     
chr2R.fa     
chr3L.fa     
chr3R.fa     
chr4.fa  
chrUextra.fa  
chrX.fa     
chrYHet.fa
chr2LHet.fa  
chr2RHet.fa  
chr3LHet.fa  
chr3RHet.fa  
chrM.fa  
chrU.fa       
chrXHet.fa


NOTE: 
Since the program mafToFastaMSA.pl may require fly fasta files as well in case to repaire non-continguous MAS alignment blocks (see the script for details), I download fasta files for dm3/BDGP Release 5 from UCSC. 

In Li 2010 paper, the Fly sequences were downloaded from Enseml using BDGP5.4 (http://flybase.org/), which is corresponding to UCSC dm3 (the latest version). So here I also use dm3 version.







1.4 Download Ensembl Fly gtf annotation files
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl

version: dm3/BDGP Release 5

updated on 20121118


wget -r -e robots=off -np ftp://ftp.ensembl.org/pub/release-69/gtf/drosophila_melanogaster


download files: Drosophila_melanogaster.BDGP5.67.gtf


NOTE: 
In Li 2010 paper, the Fly sequences were downloaded from Enseml using BDGP5.4 (http://flybase.org/), which is corresponding to UCSC dm3 (the latest version). So here I also use dm3 version.




1.5 Download Ensembl Fly gtf annotation files
-----------------------------------------
Directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl

version: dm3/BDGP Release 5


Source:
In order to get 3’UTR region info, instead of digging from Drosophila_melanogaster.BDGP5.67.gtf, one can directly get such info from Ensembl Biomart. Export  the results as CSV format instead of gff format from Biomart since CSV is much simpler than gff. The setting for Ensembl Biomart is (protein coding transcripts only):
        $query->setDataset("dmelanogaster_gene_ensembl");
        $query->addFilter("biotype", ["protein_coding"]);
        $query->addAttribute("ensembl_transcript_id");
        $query->addAttribute("3_utr_start");
        $query->addAttribute("3_utr_end");
        $query->addAttribute("chromosome_name");


download files: 3UTR_protein_coding_strand_csv.txt        
        
        
NOTE:
one can also get non_redundant 3’UTR csv file by ticking  “Unique results only” option in Biomart




1.6 Download UCSC Fly tree files 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/tree/dm3

version: dm3

url: ftp://hgdownload.cse.ucsc.edu/goldenPath/dm3/phastCons15way/


download files:
ave.cons.mod  
ave.noncons.mod


Get the newick tree info from ave.cons.mod, save as constree.newick.
______________________







#2. Download Li2010 data
-----------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Li2010


download files:


Suppl_Figure3.pdf  
Suppl_file3.zip    
Suppl_Table1.pdf
Suppl_Figure1.pdf        
Suppl_file1.xls    
Suppl_file4.xls    
Suppl_Table2.pdf
Codes.zip  
Suppl_Figure2.pdf        
Suppl_file2.xls    
Suppl_Methods.doc




NOTE: 


Download Li2010 supplemental data directly from Morris’s lab instead of the journal's web. 
Because: there are more files than those on RNA journal website 






=====================================
#3.  quality control of fly mRNA ensembl annotation (especially, 3'UTR)
----------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi


NOTE: see 3.5 for the final pipeline of quality control






3.1 Modify: downloaded perl scripts to check consistency from Irmi
----------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi




download files:


check_consistency_gtf_fasta_files.pl
check_consistency_gtf_efasta_files.pl




modify scripts:


original: check_consistency_gtf_fasta_files.pl


new: check_consistency_gtf_fasta_files_Shu.pl




NOTE:


original scripts:


Get the perl script, check_consistency_gtf_fasta_files.pl, to check consistency from Irmi on 20120607, the purpose of the code is to filter out those low quality transcripts which includes:


length of dna as indicated in headers is not equal to the actual length
dna sequence does not consist of acgt letters only
gene is not complete (by checking for the existence of one Start_Codon and one Stop_Codon)
length of coding dna is not equal to sum of interval lengths
length of coding dna is not equal to 3*integer
first codon is not atg
last codon is not a stop codon
exists in-frame stop codons
5' splice site of cds is not gt
3' splice site of cds is not ag


The script requires two input files: a gtf file with the information on the gene structures and a corresponding fasta file which stores the genomic sequences. The fasta file needs to contain the pre-mRNA sequences of the transcript IDs of interest. In particular, it needs to comprise the UTRs and all introns and the sequence has to correspond to the genomic sequence of the forward/plus strand, even if the gene falls on the minus strand (indicate this in the header line). 


Get a new perl file from Irmi, check_consistency_gtf_efasta_files.pl, to check the consistency between gtf and fasta        but the required input fasta header’s format is not suitable for the ensembl bioMart output. Not use.




new script:


check_consistency_gtf_fasta_files_Shu.pl: This program fixes the formatting problem of the original one.
The fasta file has to have header lines of the following format: 
    seq_name    forward/reverse     start-end
The "seq_name" is the name of the sequence. Here I use the transcript_ID as "seq_name". The "forward/reverse" indicates which strand the gene is on. "start" is the genomic coordinate of the first (i.e. most 5') sequence position of the sequence and "end" the corresponding genomic coordinate of the last (i.e. most 3') sequence position of the sequence. The "seq_name" in the entry of the fasta input file has to match the "seq_name" field of the corresponding lines in the gtf input file (which is the first field in each line).
based on check_consistency_gtf_fasta_files.pl, make changes to adapt to the fly transcripts used in Li2010:
#1. line 134, 139: the fasta header format from "seq_name start-end forward/reverse" to "seq_name forward/reverse start-end"
#2. line 850, 870: use s/\s+// instead of chomp($_), in case there are \r\n at the end of the line
#3. line 951: need to convert the ensembl gtf to the required gtf format
#4. line 37, 143: add elements "+" => 1 and "-" => -1 to the hash %strand, since in line 143 %strand (instead of %symbol_strand) is directly used. And this will cause further problems in line 445 when calculating $rel_start and $rel_end


See 3.5 for details of usage.








3.2. Download the dm3 transcript sequence .fa file and .gtf file from Ensembl
----------------------------------------------------------------------
directory: 
    transcript20120607.fa                        /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fasta_from_ensembl/transcripts
    Drosophila_melanogaster.BDGP5.67.gtf         /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/




NOTE:


get the transcript sequence file and gtf file from Ensembl according to Irmi’s check-consistency requirements. 


a. Transcript sequence file is generated from Biomart:


rename the sequence file as transcript20120607.fa and the corresponding perl procedure transcript20120607.pl. the hightlights for the procedure (in perl) are:
    $query->setDataset("dmelanogaster_gene_ensembl");
    $query->addAttribute("ensembl_gene_id");
    $query->addAttribute("ensembl_transcript_id");
    $query->addAttribute("transcript_exon_intron");
    $query->addAttribute("transcript_start");
    $query->addAttribute("transcript_end");
    $query->addAttribute("strand");


save the sequence file as  transcript20120607.fa 


b. gtf file is downloaded directly from http://uswest.ensembl.org/info/data/ftp/index.html


Select GTF in "Drosophila melanogaster". Save the gtf file as Drosophila_melanogaster.BDGP5.67.gtf 








3.2.1 Biomart paper
----------------------------------------------------------------------
http://www.biomedcentral.com/1471-2164/10/22/








3.2.2. how to use ensembl, manu from Sanger
----------------------------------------------------------------------
http://www.doc88.com/p-11465283450.html








3.2.3 ensembl genome annotation doc
----------------------------------------------------------------------
http://uswest.ensembl.org/info/docs/genebuild/genome_annotation.html






3.3 modify: perl script that converts ensembl gtf to standard gtf from Irmi
----------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi




original: ensemblgtf_to_gtf.pl


new: ensemblgtf_to_gtf_Shu.pl




NOTE:


original script:
This program takes an ensembl gtf file as input and produces a gtf file as output. During the conversion it replaces the name by the transcript id and calculates the  phases of cds, start and stop codon lines. It only writes complete transcripts (ie comprising start and stop codon) to the output gtf file as we only know how to calculate the phases if we know the start codon. It checks if the total coding length is a multiple of three and if the stop codon has phase 0 and reports otherwise and won't write the transcript's lines to the output file. These are all checks performed.


new script:
based on ensemblgtf_to_gtf.pl, make changes to adapt to the new ensembl gtf (i.e. gff2) format used in fly transcripts:
# line 245: set initial value of $codinglength to be 0 instead of 3.
# line 280: when the gtf line contains "start_codon", do not add the length of start_codon (i.e. 3) onto the variable $codinglength since the start_codon has been counted in the first CDS (but the stop_codon is not counted in the last CDS)  
# line 276: since in the gtf file, the first CDS line comes before the start_codon line, change the way $sumstartstopphase is calculated


See 3.4 for details of usage.








3.4 converts ensembl gff to standard gtf
----------------------------------------------------------------------
3.4.1 download the Biomart version gff file
---------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/gff_from_Biomart_customized




download: Fly_gene_structures.gff




NOTE:


Get the Biomart version gff file, namely the one generated from “gene structures” option under Biomart page in Ensembl database. Rename the files as Fly_gene_structures.gff. 


And save the perl procedure from Biomart as Fly_gene_structures.pl 
        $query->setDataset("dmelanogaster_gene_ensembl");
        $query->addAttribute("ensembl_gene_id");
        $query->addAttribute("ensembl_transcript_id");
        $query->addAttribute("transcript_start");
        $query->addAttribute("transcript_end");
        $query->addAttribute("strand");
        $query->addAttribute("cds_start");
        $query->addAttribute("cds_end");
        $query->addAttribute("5_utr_start");
        $query->addAttribute("5_utr_end");
        $query->addAttribute("3_utr_start");
        $query->addAttribute("3_utr_end");


But still, this version is not compatible to Irmi’s ensemblgtf_to_gtf.pl script. NOT USE






3.4.2 converts ensembl gff to standard gtf
---------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi




perl ensemblgtf_to_gtf_Shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf




input: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf


output: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf




NOTE:


run ensemblgtf_to_gtf_Shu.pl to convert the dm3 entire gtf file, Drosophila_melanogaster.BDGP5.67.gtf, to the new file, ConvertedDrosophila_melanogaster.BDGP5.67.gtf
308180-303139=4841 entries are filtered out during this process, due to the incomplete gene structures. 
The resulting num6ber of transcripts found : 25415.








3.5 pipeline for ensembl data preparation/quality control for project Li2010:
----------------------------------------------------------------------------------------------------


1). convert the transcript fasta file from ensembl mart output to the format required by consistency checking perl
----------------------------------------------------------------------------------------------------------------------------
directory:  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly




perl martFa2ConsisCheckFa.pl fasta_from_ensembl/transcripts/transcript20120607.fa fasta_from_ensembl/transcripts/consisCheckFa20120607.fa




input: fasta_from_ensembl/transcripts/transcript20120607.fa


output: fasta_from_ensembl/transcripts/consisCheckFa20120607.fa




NOTE:


change the original ensembl biomart output Fly transcript fasta file to the format as consistency checking program required:
#given the transcript fasta file from ensembl mart output, convert it to the format required by Irmi's consistency checking perl script: ie,
#        1. change the header from the format: gene_ID|transcript_ID|transcript_start|transcript_end|strand, to the following format:  seq_name    forward/reverse     start-end
#        2. remove all the negative strands






2). converts the original ensembl gff to standard gtf:
---------------------------------------------------------------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi




nohup perl ensemblgtf_to_gtf_Shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf




input: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf 


output: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf 




NOTE:


convert the original ensembl biomart output Fly gene structures gtf file to the format as consistency checking program required, the un-qualified gtf entries are filtered out as recorded in the nohup output file (see 3.4.2 for details)






3). check the consistency between the fasta file from step 1) and the gtf file from step 2). 
---------------------------------------------------------------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi 




perl check_consistency_gtf_fasta_files_Shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fasta_from_ensembl/transcripts/consisCheckFa20120607.fa    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf  >output.txt      




input: 


/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fasta_from_ensembl/transcripts/consisCheckFa20120607.fa
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf


output: 


/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi/output.txt




NOTE:
As a result (manually checked), some sudo genes such as FBtr0112509,  and tRNA genes such as FBtr0070001 are filtered out. [[
redirect screen output into output.txt, which record all the unqualified transcripts






=====================================
#4. extracting MAF multiple-sequence alignment for 3' UTRs for fly
----------------------------------------------------------------------
 
Highlights:
----------------
#use mafToFastaMSA.pl from Daniel to fix the problems in mafsInRegion


# use UCSC program mafsInRegion (problematic to run for mutiple transcripts at one time, see 4.2.4 for details; at here, use it for one transcript at a time) to extract the 3'UTR MSA out of the UCSC genome alignment.


# at this moment, only get the 3'UTR regions (around 7k) which are: 1. at positive strand; 2. has only one contineous region on the genome (namely, not mutiple regions for one transcript's 3'UTR). In the following, I will call this type as posive single 3'UTR for short.






Pipeline to reproduce the work (the essential version; for a complete description of all the scripts generated in the process, see below starting from 4.0)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Pipeline 1.
-----------------------------------------------

NOTE:
This is the current pipeline to extract MAF multiple-sequence alignment for 3' UTRs for fly.
The original pipeline which is aiming to extract single and positive strand 3'UTRs, is at Pipeline 2.


a. ensembl csv format to bed6 format
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl


perl csv2bed6.pl 3UTR_protein_coding_strand_csv.txt ConvertedDrosophila_melanogaster.BDGP5.67.gtf 3UTR_protein_coding_strand_csv.bed6

input: 


      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.txt
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf


output:


      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.bed6




NOTE:


The file 3UTR_protein_coding_strand_csv.txt contains 3'UTR regions information, which has been validated (manually checked) in the previous step 3.5, is downloaded from ensembl. For the detail of downloading 3UTR_protein_coding_strand_csv.txt, see 4.2.3. 
csv2bed6.pl takes raw ensembl csv format converted to bed format to fit mafsInRegion from UCSC.
-csv2bed6.pl prepares input for mafsInRegion: from the Ensembl csv file, get the 3'UTR region, and output the coordinates to bed6 file (with 1 nt more upstream [1], since mafsInRegion read dose not get the first column). 
-outputs 6 columns bed6 format: "chrom        start        end        filename/transcriptID        score strand"
-Assign the fifth column which is the score column as 0 (pseudo value) to match for bed6 format 
usage:
csv2bed6.pl requires three arguments (Ensembl csv file name, cleaned gtf file name, output bed file name).

[1] "with 1 nt more upstream" is because of that, coordinates in .maf and .bed files are 0 based (start from 0), while coordinates in .gtf are 1 based (start from 1); and regions in .bed file are [start, end+1) based, while regions in .gtf file is [start, end] based. This means the region [1, 10] in .gtf file is equal to region [0,10) in .bed file.



############################
statistics:
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl csv2bed6.pl 3UTR_protein_coding_strand_csv.txt /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf Drosophila_melanogaster.BDGP5.67
total num of annotated 3'UTR (including repeats): 24335
total length of the 3'UTR: 10831966
average length of the 3'UTR: 445.118800082186

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl csv2bed6.pl 3UTR_protein_coding_strand_csv.txt /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf ConvertedDrosophila_melanogaster.BDGP5.67
total num of annotated 3'UTR (including repeats): 24067
total length of the 3'UTR: 10672906
average length of the 3'UTR: 443.466406282461





b. get 3' UTR MSA from UCSC maf 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/Daniel_script

perl mafToFastaMSA.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.bed6 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR/maf --maf "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/UCSC_mafs/*.maf" --species dm3,droSim1,droSec1,droYak2,droEre2,droAna3,dp4,droPer1,droWil1,droVir3,droMoj3,droGri2,anoGam1,apiMel3,triCas2  --fasta "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fly_chromsome_UCSC/*.fa" --exon 


input: 
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.bed6 
    --maf "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/UCSC_mafs/*.maf" (quotation "" needed!)
    --species dm3,droSim1,droSec1,droYak2,droEre2,droAna3,dp4,droPer1,droWil1,droVir3,droMoj3,droGri2,anoGam1,apiMel3,triCas2
    --fasta "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/fly_chromsome_UCSC/*.fa"	(quotation "" needed!)
    --exon     
    

output:
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR/maf


NOTE:         
    For --maf and --fasta flags, since the input requires batch of files (*.), the quotation must be there to be called successfully.   
    
    As a result of running the above program, I get 6666 maf files: it seems still problematic (empty files) with Daniel's codes. Pick those "safe" fasta files (those have exactly 200nts) first to do my experiment.

    
    
    
    
c. Convert mafsInRegion's results .maf files into standard .fasta files
-------------------------------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related




overall:
qsub convert_mafsInRegion_output_7000.sh




NOTE:


The results from mafsInRegion are maf files which are split for each transcript's 3'UTR. Run overall convert_mafsInRegion_output_7000.sh script to convert such .maf file into standard .fasta file. within the convert_mafsInRegion_output_7000.sh script, call two batch version perl code:
perl maf2fasta_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1 ../3UTR_singlePos_aln_UCSC1_7000_tmp
perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl/mafFa2Fa_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




c.1 Convert .maf to intermedia .fasta
-------------------------------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related




perl maf2fasta_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1 ../3UTR_singlePos_aln_UCSC1_7000_tmp




input: 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1/


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp




NOTE:
For the first perl code, maf2fasta_batch.pl, it takes a directory of UCSC .maf format files, and converts them into fasta format, however, such fasta format is not ready for input to other programs since it is directly from maf file (it is splitted and may contain gap-only columns). For each file in the folder, it calls the single file version maf2fasta.pl (perl maf2fasta.pl *.maf maf *.fasta fasta), which is a general tool to convert among different formats which are supported by BioPerl.
maf2fasta_batch.pl
usage:
maf2fasta_batch.pl requires two arguments (maf files folder, output fasta file folder).




c.2 Convert intermedia .fasta to standard .fasta
-------------------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl




perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl/mafFa2Fa_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




input: 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




NOTE:
For the second perl code mafFa2Fa_batch.pl, it takes a directory containing .maf directly transferred fasta files, and converts the files into standard fasta files. For each file in the folder, it calls the single file version mafFa2Fa.pl, which simply converts a maf transfered fasta file into standard fasta file. mafFa2Fa.pl requires two arguments (maf transfered fasta file, reference species). eg: mafFa2Fa.pl FBtr0306592.fasta dm3.chr2L >FBtr0306592_debug11.fasta_al
mafFa2Fa_batch.pl
usage:
mafFa2Fa_batch.pl requires two arguments (input fasta file folder, output fasta file folder).
_____________________    

    
    
    
    

Pipeline 2.
-----------------------------------------------

NOTE:
This is the first pipeline, which is aiming to extract single and positive strand 3'UTRs.


a. ensembl csv format to bed6 format
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl




perl csv2bed6.pl 3UTR_protein_coding_strand_csv.txt ConvertedDrosophila_melanogaster.BDGP5.67.gtf 3UTR_protein_coding_strand_csv.bed6




input: 


      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.txt
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf


output:


      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.bed6




NOTE:


The file 3UTR_protein_coding_strand_csv.txt contains 3'UTR regions information, which has been validated (manually checked) in the previous step 3.5, is downloaded from ensembl. For the detail of downloading 3UTR_protein_coding_strand_csv.txt, see 4.2.3. 
csv2bed6.pl takes raw ensembl csv format converted to bed format to fit mafsInRegion from UCSC.
-csv2bed6.pl prepares input for mafsInRegion: from the Ensembl csv file, get the 3'UTR region, and output the coordinates to bed6 file (with 1 nt more upstream, since mafsInRegion read dose not get the first column). 
-outputs 6 columns bed6 format: "chrom        start        end        filename/transcriptID        score strand"
-Assign the fifth column which is the score column as 0 (pseudo value) to match for bed6 format 
usage:
csv2bed6.pl requires three arguments (Ensembl csv file name, cleaned gtf file name, output bed file name).




b. Pick posive single 3'UTR 
-----------------------------------------------
b.1 Seperate 3'UTR on posive and negative strands from oringal bed6 file 
---------------------------------------------------------------------------
directory:  /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl


perl bed6_2nonRep.pl 3UTR_protein_coding_strand_csv.bed6 3UTR_protein_coding_posStrand_nonRep_csv.bed6 3UTR_protein_coding_negStrand_nonRep_csv.bed6 >bed6_2nonRep.output 


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.bed6


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_posStrand_nonRep_csv.bed6
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_negStrand_nonRep_csv.bed6
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/bed6_2nonRep.output


NOTE:


-From the output of csv2bed.pl from a., namely the file 3UTR_protein_coding_csv.bed, remove all the repeated entries like:
# chr2L        9838        11214        FBtr0306592
# chr2L        9838        11214        FBtr0078166
# chr2L        9838        11214        FBtr0078171
only retain the first transcript; so at this stage, only consider non-redundant 3'UTR sequences.
-It outputs positive and negtive strand seperately.
-It print to the screen: 
--1. the entries that have been removed 
--2. statistics:
    total num of annotated 3'UTR (no repeats): 16410
    total length of the 3'UTR: 6355921
    average length of the 3'UTR: 387.31998781231
--3. the transcript_ID that belongs to single 3'UTR category. 
--These information is stored in bed6_2nonRep.output. 
-It also serves as a consistency control for the mafsInRegion program.
usage:
bed6_2nonRep.pl requires three arguments (bed6 file name, output non-repeated positive strand bed6 file name, output non-repeated negtive strand bed6 file name).




b.2 Pick posive single 3'UTR from oringal bed6 file
----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl




perl pickPosSing.pl 3UTR_protein_coding_posStrand_nonRep_csv.bed6 bed6RepInfo.output 3UTR_protein_coding_singleUTR_posStrand_nonRep_csv.bed6




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_posStrand_nonRep_csv.bed6 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/bed6RepInfo.output 


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_singleUTR_posStrand_nonRep_csv.bed6




NOTE:


From postive strand bed6 file, pick only the transcripts with single 3' UTR region (namely, not a UTR with mutiple regions). The original information is stored in 3UTR_protein_coding_posStrand_nonRep_csv.bed6, the 3' UTR region info (single/mutiple) is stored in bed6RepInfo.output, which is directly copied from bed6_2nonRep.output.
pickPosSing.pl 
usage:
pickPosSing.pl requires three arguments (bed6 file name, bed6 3' UTR region info file, output postive strand with single 3' UTR region bed6 file name).






c. Run mafsInRegion to get the 3'UTR MSA from .maf files
-------------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related/question2




perl bed2maf_singPos.pl 3UTR_protein_coding_singleUTR_posStrand_nonRep_csv.bed6 3UTR_singlePos_mafs_UCSC1




input: 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_singleUTR_posStrand_nonRep_csv.bed6 


output:
      /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1/






NOTE:


Use bed2maf_singPos.pl to run mafsInRegion: take a bed6 file as input, for each line (i.e. transcript), make a tmp bed file, and call mafsInRegion to do it one-by-one (i.e. not the multiple output mode)
usage:
bed2maf_singPos.pl requires at least two arguments (input bed6 file, output maf file folder, optional:species). 
________________








d. Convert mafsInRegion's results .maf files into standard .fasta files
-------------------------------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related




overall:
qsub convert_mafsInRegion_output_7000.sh




NOTE:


The results from mafsInRegion are maf files which are split for each transcript's 3'UTR. Run overall convert_mafsInRegion_output_7000.sh script to convert such .maf file into standard .fasta file. within the convert_mafsInRegion_output_7000.sh script, call two batch version perl code:
perl maf2fasta_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1 ../3UTR_singlePos_aln_UCSC1_7000_tmp
perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl/mafFa2Fa_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




d.1 Convert .maf to intermedia .fasta
-------------------------------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related




perl maf2fasta_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1 ../3UTR_singlePos_aln_UCSC1_7000_tmp




input: 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/question2/3UTR_singlePos_mafs_UCSC1/


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp




NOTE:
For the first perl code, maf2fasta_batch.pl, it takes a directory of UCSC .maf format files, and converts them into fasta format, however, such fasta format is not ready for input to other programs since it is directly from maf file (it is splitted and may contain gap-only columns). For each file in the folder, it calls the single file version maf2fasta.pl (perl maf2fasta.pl *.maf maf *.fasta fasta), which is a general tool to convert among different formats which are supported by BioPerl.
maf2fasta_batch.pl
usage:
maf2fasta_batch.pl requires two arguments (maf files folder, output fasta file folder).




d.2 Convert intermedia .fasta to standard .fasta
-------------------------------------------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl




perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl/mafFa2Fa_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




input: 
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000_tmp


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000




NOTE:
For the second perl code mafFa2Fa_batch.pl, it takes a directory containing .maf directly transferred fasta files, and converts the files into standard fasta files. For each file in the folder, it calls the single file version mafFa2Fa.pl, which simply converts a maf transfered fasta file into standard fasta file. mafFa2Fa.pl requires two arguments (maf transfered fasta file, reference species). eg: mafFa2Fa.pl FBtr0306592.fasta dm3.chr2L >FBtr0306592_debug11.fasta_al
mafFa2Fa_batch.pl
usage:
mafFa2Fa_batch.pl requires two arguments (input fasta file folder, output fasta file folder).
_________________




# end of Pipeline, see below for the for a complete description of all the scripts generated in the process of alignment extracting




#4.0. convert maf file to fasta format 
----------------------------------------------------------------------
directory: /syang11/work/20120525/Fly/maf_related




perl maf2fasta.pl chr4.maf maf chr4.fasta fasta 




input: infile name, any format supported by Bioperl


output: outfile name, any format supported by Bioperl


NOTE: 
It has been extended to convert any format to any format (supported by Bioperl); 
usage
maf2fasta.pl requires four arguments (input file name, input format, output file name, output format). 




4.1. finish a number of getMSA series perl scripts which use Bioperl methods to get partial alignment from original UCSC MSA and ensembl gtf files for Li2010 project:  getMSAcol.pl,  getMSAcol.pm,  getMSAcols.pl,  getMSA.pl (self_annotated)
Scripts are at /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl
see 4.1.5 for the pipeline (Bioperl style scripts)




4.1.0. 3'UTR
4.1.0.1. In order to get 3’UTR region info, instead of digging from Drosophila_melanogaster.BDGP5.67.gtf, one can directly get such info from Ensembl Biomart. Export  the results as CSV format instead of gff format from Biomart since CSV is much simpler than gff. The setting for Ensembl Biomart is (protein coding transcripts only):
        $query->setDataset("dmelanogaster_gene_ensembl");
        $query->addFilter("biotype", ["protein_coding"]);
        $query->addAttribute("ensembl_transcript_id");
        $query->addAttribute("3_utr_start");
        $query->addAttribute("3_utr_end");
        $query->addAttribute("chromosome_name");


one can also get non_redundant 3’UTR csv file by ticking  “Unique results only” option in Biomart




4.1.0.2. use the csv file from 4.1.0.1.  (3UTR_protein_coding_csv.txt), along with ConvertedDrosophila_melanogaster.BDGP5.67.gtf, and fasta MSA files from UCSC, run getMSA.pl to get the 3’UTR aln.




However, when using getMSA.pl to extract aln from fly 14-way MSA data from UCSC, the Bioperl supported methods are too slow (~1transcript per hour). So change to the pipeline described in 4.2




4.1.1 Bioperl methods: column_from_residue_number and slice
seq http://doc.bioperl.org/releases/bioperl-1.0.1/Bio/Seq.html
SimpleAlign http://search.cpan.org/~cjfields/BioPerdirectory:l-1.6.901/Bio/SimpleAlign.pm
AlignIO http://doc.bioperl.org/releases/bioperl-1.4/Bio/AlignIO.html#POD1
AlignI http://doc.bioperl.org/releases/bioperl-current/bioperl-live/Bio/Align/AlignI.html#POD11




4.1.2 error in Bioperl doc for LocatableSeq:
http://doc.bioperl.org/releases/bioperl-1.0/Bio/LocatableSeq.html#POD4
“Seq1/91-97 AC..DEF.GH
column_from_residue_number(94) returns 5.”  
-> should return 6




4.1.3 Besides of getMSA series, finish a set of perl scripts (self_annotated) at the same directory:
maf2fasta.pl, aln2table, delete_line_feed.pl, filter_gtf.pl




4.1.4 Send my scripts for “maf to fasta conversion” and “get partial alignment” to Ian and Daniel for their tasks on RNA-RNA interaction




4.1.5 Pipeline (Bioperl style)
use getMSA.pl (Bioperl style) scripts to get all the MSA from UCSC fly 15-species alignment.
perl getMSA.pl test_csv.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related test_getMSA.fasta




2. use cluster compara to test the performance (it takes 1hr and 5seconds to get a transcript from large chromsome like 2L) /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/Pfam_test_bioperl>ssh -l syang11 compara.cs.ubc.ca
compara>qsub getMSA.sh






4.2  Another way to get partial alignment according to UCSC:
see 4.2.5 for the complete pipeline




4.2.1 general pipeline:
since the previous pipeline in 4.1.5 is computationally too costy, change to another pipeline to get partial MSA from UCSC MSA
1). use ucsc mafsInRegion (in C) to get partial maf from the complete maf
http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/
2). then do the conversion use maf2fasta.pl






4.2.2  a test pipeline, not polished:
1). use mafsInRegion which is in C from UCSC web
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related> ./mafsInRegion -keepInitialGaps test_csv.bed test_csv.maf chr2L.maf.
or for mutiple maf files
./mafsInRegion -outDir test2_csv.bed dir chr2L.maf chrX.maf




2). then convert maf file to fasta file
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/maf_related> perl maf2fasta.pl test_csv.maf maf test_csv.fasta fasta




3). Note:
a. the output still breaks the target transcipt into several blocks (lines) 
b. the output will omit the first column, like for “chr2L    8610    9484”, the file will only contain aln from 8611 to 9484








4.2.3 the new pipeline to get 3’UTR aln from Ensembl and UCSC
4.2.3.1). convert the Ensembl .csv file, which contains the 3’UTR info for each transcript, to .bed file
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl csv2bed.pl 3UTR_protein_coding_csv.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf 3UTR_protein_coding_csv.bed
total num of annotated 3'UTR: 24128
total length of the 3'UTR: 10716396
averagelength of the 3'UTR: 444.147712201592






4.2.3.1.1) from the above result, find many same entries for 3’UTR, eg: 
chr2L    9838    11214    FBtr0306592
chr2L    9838    11214    FBtr0078166
further checking shows that such identical locations are mostly (or all?) from the same gene (namely, one gene has mutiple transcritpts, like for FBtr0078166 and FBtr0306592)






4.2.3.2). use UCSC mafsInRegion to read the .bed file to extract the region info in maf file
 syang11@compara:maf_related$ qsub call_mafsInRegion.sh
with inside the file:
./mafsInRegion -outDir /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_csv.bed 3UTR_mafs chr2LHet.maf  chr2R.maf         chr3RHet.maf  chrM.maf           chrXHet.maf chr2L.maf         chr3LHet.maf  chr3R.maf         chrUextra.maf  chrX.maf chr2RHet.maf  chr3L.maf         chr4.maf          chrU.maf           chrYHet.maf






4.2.3.2.1) note:
a. the output files are 21,959 which is not equal to the total transcipt number (24,128) in 3UTR_protein_coding_csv.bed
b. plus, those same entries as shown in 4.2.3.1.1) are empty (just has the first line) except the first one




4.2.3.3). based on 4.2.3.2.1), use  another program to filter bed file first, cases like in 4.2.3.1.1)  were thus removed (but recorded for future use)
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl bed2nonRep.pl 3UTR_protein_coding_csv.bed 3UTR_protein_coding_nonRep_csv.bed
total num of annotated 3'UTR: 16410
total length of the 3'UTR: 6355921
averagelength of the 3'UTR: 387.31998781231 




4.2.3.3.1) but similar to 4.2.3.2.1) a., there is still an inconsistency with the transcipts numbers:
15, 003 maf files as a results
but 16,410 lines in 3UTR_protein_coding_nonRep_csv.bed file




4.2.3.4). based on 4.2.3.3.1), use checkMissingMaf.pl to detect the missing maf files. The result shows that the reason is: 




4.2.3.4.1). for a transcript, there may be several 3’UTR regions, but mafsInRegion only deals with the first one, the other regions will be ignored.




4.2.3.4.2). also find many (or maybe all?) of the above cases happen for transcripts on the negative strand, and mafsInRegion DOES NOT do reverse compliment. 
There are several places where ppl discussed the solutions (use faRc or maffrag or maffrags?):
http://www.mail-archive.com/genome@lists.soe.ucsc.edu/msg01951.html
https://lists.soe.ucsc.edu/pipermail/genome/2008-November/017512.html
https://lists.soe.ucsc.edu/pipermail/genome/2009-December/020775.html
https://lists.soe.ucsc.edu/pipermail/genome/2011-February/024958.html
and some source pages mentioned in those discussions:
http://genomewiki.cse.ucsc.edu/index.php/Kent_source_utilities
https://lists.soe.ucsc.edu/pipermail/genome/2011-February/024958.html




4.2.3.5). Based on 4.2.3.4)., re-download csv file from Ensembl with strand information contained (and same as the previous 3UTR_protein_coding_csv.bed, only protein-coding genes are considered). 
    $query->setDataset("dmelanogaster_gene_ensembl");
    $query->addFilter("biotype", ["protein_coding"]);
    $query->addAttribute("ensembl_transcript_id");
    $query->addAttribute("3_utr_start");
    $query->addAttribute("3_utr_end");
    $query->addAttribute("strand");
    $query->addAttribute("chromosome_name");


then, use a new script csv2bed6.pl to convert the file to bed6 format, but assign the fifth column which is the score column as 0 (pseudo value)
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl csv2bed6.pl 3UTR_protein_coding_strand_csv.txt ../gtf_from_ensembl/ConvertedDrosophila_melanogaster.BDGP5.67.gtf 3UTR_protein_coding_strand_csv.bed6
total num of annotated 3'UTR (including repeats): 24067
total length of the 3'UTR: 10672906
average length of the 3'UTR: 443.466406282461




4.2.3.6 besides, in Li et al 2010 paper, they use a total of 9950 3’ UTR entries. And some other 
problems for Li et al 2010 paper:
1) some proteins seem to be pre-mRNA binding protein (suppl file 1 for details):
like Msl5 (splicing) Q12186; PTB P26599; 
2) motif finding
3) one fly protein
4) ss element
5) arguments for CM model (in discussion)








4.2.4 problems of using  mafsInRegion
1) the overlapping (different transcript ids with overlaps, the overlap will only show in one of the transcipt once, namely the other one is trancated) 
and 


2) rewritting (transcript with mutiple exons  will have only one output file that contains only one of the exon regions, the others have been overwritten) problems




4.2.4.1 get the script mafToFastaMSA.pl from Daniel for calling mafsInRegion, copy it to /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related, this one has delt with the two problems of mafsInRegion mentioned above, but slow in performance 




4.2.4.2. source codes for UCSC genome browser
Trying to modify the codes and remake mafsInRegion to solve the above two problems.
get the entire source codes for UCSC from http://hgdownload.cse.ucsc.edu/downloads.html
























######
# task 2: predicting accessibility using four comparative methods(ppfold, rnaalifold, rnadecoder, transat)
######


Highlights:
----------------
# in general, prepare the input for each of the four different comparative rna secondary structure predicting programs (ppfold, rnaalifold, rnadecoder, transat), run them on cluster and make sure each of them would have the outputs containing base pairing probabilities and secondary structures.


# unless specified, all scripts are in /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts folder


# unless specified, all four programs are in /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/Comparative_RNA_folding_methods_from_Irmi


#note, for each of the four programs, there is an overall _batch.pl script to organize all the scripts related to this program, this makes the task much easier to re-do the analyses.






Pipeline to reproduce the work (the essential version; for a complete description of all the related work during this process, see below starting from 5):
----------------------------------------------------------------------------------------------------------------------------------------------------------------


a. ppfold
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts




perl ppfold_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000




NOTE:
Call ppfold in a batched version, java -jar /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/Comparative_RNA_folding_methods_from_Irmi/PPfold-v3-0.jar $inDir/$infile -e
Inside the perl script, call ppfold with -e option which have full outputs including base pairing probabilities:
-e:   optional argument, turns all exports on.
                       If none specified, the following files will be exported:
                       .st, .seq, .lseq, .ct and .newick
usage:
ppfold_batch.pl requires two arguments (input fasta file folder, output ppfold results files folder).
__________________________






b. RNAalifold
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/alifold




perl alifold_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/research/irmtraud/people/syang11/work/20120626/alifold_results_7000




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 


output:
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/alifold_results_7000




NOTE:


Within this alifold_batch.pl, the program first converts the orginal fasta files into clustalw formatted .aln file, use fa2clustalw.pl; then converts the oringal headers in clustaw files use simplify_header_forClustalw.pl; finally, runs the RNAalifold program with -p option open to get base pairing probability matrix (alidot.ps file) in addition to the mfe structure `RNAalifold -p $intermediaDir/$name.aln > $outDir/$name.consensus`


usage:
alifold_batch.pl requires two arguments (input fasta file folder, output alifold results files folder)




b.1 convert fasta format to clustalw format
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/alifold 


perl fa2clustalw.pl *.fa fasta *.aln clustalw


input:
      *.fa 
      
output:
      *.aln 
      


NOTE: Same as 4.0 maf2fasta.pl




b.2 simplfy header of clustalw file
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/alifold 




perl simplify_header_forClustalw.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/alifold/inputCLUSTALW_7000 /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/alifold/inputCLUSTALW




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/alifold/inputCLUSTALW_7000


output:
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/alifold/inputCLUSTALW 




NOTE:
Converts the oringal headers (originally from fasta) in clustalw file to simple header (i.e. short header with only species name there since very long header would crash the program);
usage:
simplify_header_forClustalw.pl requires two arguments (input fasta aln file folder, output fasta aln file folder).
_________________________








c. RNA-decoder
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder




NOTE:
For decoder, use rnadecoder.sh to scan the MSA to get base pairing probabilities (scan mode); use rnadecoder1.sh to fold the MSA to get the secondary structure information (fold mode)




c.1 scan mode
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder




perl rnadecoder_input.pl fly_scanning_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_rd




input:
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder/fly_scanning_template.xml
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_rd
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder/results




NOTE:
The rnadecoder uses a specific .col file format as inputs and outputs, this .col format is also different from normal .col format which is used by many bioinfo programs (eg. RNA DB TOOLs at http://rnadbtool.kvl.dk/). So the effort to use a built-up program fasta2col which is in pfold's package, is failed.
Within rnadecoder_input.pl, it builds .xml file which is used for both modes of decoder, based on the template .xml files from decoder's package; also using the fly 15 species tree information from conserved tree /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/trees/constree.newick. Then it checks missing species for each transcript's 3 UTR fasta file, and fills the missing ones with gaped lines. It also generates a annotation file for codon masking (according the README file from decoder, for 3'UTR region, the annotaion should all be 3). Then, it converts original fasta file into .col file using Irmi's script fasta_ann2rnadecoder_col.pl with chunk size ==300 and step size ==100. Finally, with all files ready and been put into the RNA-decoder's program folder (as the program specifies), run RNA-decoder (note the input and output for this program have to be put into the specific folder as the program designates).


usage:
rnadecoder_input.pl requires three arguments (template .xml file, input fasta file folder, output col file folder).




c.2 fold mode
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder




perl rnadecoder_input1.pl fly_folding_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_fold




input:
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder/fly_folding_template.xml
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_fold
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/rnadecoder/results_fold      


NOTE:
It is similar to rnadecoder_input.pl, but replace the scanning mode with the folding mode.
______________________










d. transat
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/transat




NOTE:
Before running the transat program, need to prepare for the input fasta files: trim the oringal fasta files from task1 into simplify_header version. Use transat_input.pl




d.1 Simplify header for fasta files
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/transat




perl transat_input.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_rd /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_simpleHeader 




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_rd


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_simpleHeader




NOTE:
Trim the oringal fasta files from task1 into simplify_header version, namely the header line only contains the species name without location information to be consistent with what is written in the newick tree file. And also, each fasta file need to contain all the species in the tree file. In another word, the abscent species need to be filled with all gap lines with length equal to the MSA.
This work has been done as part of RNA-decoder's scanning mode output, see c.1. So transat_input.pl directly copy those files from RNA-decoder's output.






d.2 Run transat
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts/transat




perl transat_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_simpleHeader /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_simpleHeader


output:
      /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000




NOTE:
I use the most up-to-date version from Daniel and Jeff, which is in /ubc/cs/research/irmtraud/people/jujubix/bin/Transat. The other versions are either slow or problematic.
-when calling it, use the same constree.newick as decoder uses; also turn on -noDB to prevent the HUGE output of the structures, but instead, only outputs those paired positions which is easy to reconstruct the secondary structure (turn off the dot-bracket lines, remain only the text description of the pairing, like 0:21,1:20,2:19,3:18,4:17 this tells u how the base pairs). As below:
`$transatDir/Transat -fasta $inDir/$infile -tree constree.newick -noDB > $outDir/$name.transat`


usage:
transat_batch.pl requires two arguments (input fasta file folder, output transat results files folder).
______________________






# end of pipeline. Related works are listed below






=====================================
#5. comparative based RNA folding programs to assess the accessibility of 3' UTRs for fly
5.1 Get the comparative based RNA folding programs list from Irmi on 20120626
save the programs at /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/Comparative_RNA_folding_methods_from_Irmi


5.1.1. PPfold: a new version for Pfold (can deal with longer aln). Download it at
http://www.daimi.au.dk/~compbio/pfold/downloads.html#release
and the explanation for output is at
http://www.daimi.au.dk/~compbio/pfold/PPfold/examples.html
use it instead of Pfold (scfg package)
PPfold is a more advanced version which uses the same SCFG as Pfold but paralleled. I just found on Pfold server's website it is claimed that they will eventually replace pfold with PPfold since the later one can predict the structure of much longer alignments without underflow errors. Daniel, Alborz and I have tested and compared the base-pairing probability matrices generated by Pfold (.pp file) and PPfold (.bp file) using heatmap function from R (so the values in the matrix are scaled). The results show that the overall distribution of the two matrices are very similar while PPfold is more precise. So I assume I could use PPfold instead of Pfold in the following analysis.




5.1.2. RNAalifold
http://www.tbi.univie.ac.at/~ivo/RNA/man/RNAalifold.html
the page for Vienna package
http://www.tbi.univie.ac.at/~ivo/RNA/
the explanation for output is at:
http://www.tbi.univie.ac.at/~ivo/RNA/alifoldcgi.html
A plain text file containing information on each plausible pair, ranked by "credibility" (see paper). Each line lists the paired bases i and j, the number of incompatible sequences, the predicted probability, an entropy measure, and the base pair types occurring at this position.




5.2 RNAalifold
read base-paring probabilities from alidot.ps using Irmi's scripts rnaalifold_dp2pairing_probs.pl




5.3 Transat
5.3.1.  Input phylogenetic tree
Branch length of phylogenetic tree for fly
https://lists.soe.ucsc.edu/pipermail/genome/2007-January/012530.html


The official file containing the most recent phylogenetic tree for fly family is at UCSC:
ftp://hgdownload.cse.ucsc.edu/goldenPath/dm3/phastCons15way/
This directory contains compressed phastCons scores for multiple alignments of the 15 assemblies to the D. melanogaster genome (dm3, Apr. 2006, BDGP Release 5).
- D. simulans (droSim1, Apr. 2005)
- D. sechellia (droSec1, Oct. 2005)
- D. yakuba (droYak2, Nov. 2005)
- D. erecta (droEre2, Feb. 2006)
- D. ananassae (droAna3, Feb. 2006)
- D. pseudoobscura (dp4, Feb. 2006) 
- D. persimilis (droPer1, Oct. 2005)
- D. willistoni (droWil1, Feb. 2006)
- D. virilis (droVir3, Feb. 2006) 
- D. mojavensis (droMoj3, Feb. 2006) 
- D. grimshawi (droGri2, Feb. 2006)
- A. gambiae (anoGam1, Feb. 2003) 
- A. mellifera (apiMel3, May 2005) 
- T. castaneum (triCas2, Sep. 2005)
And the reference paper for the scores is: 
Siepel, A. and Haussler, D. Phylogenetic hidden Markov models. In R. Nielsen, ed., Statistical Methods in Molecular Evolution, Springer (in press) (2004).
which uses a phylo-HMM model to generate phastCons scores for multiple alignments




5.4. Problems for Li et al 2010 paper:
1) some proteins seem to be pre-mRNA binding protein (suppl file 1 for details):
like Msl5 (splicing) Q12186; PTB P26599;
1.2 motif finding
1.3 one fly protein
1.4 ss element
1.5 arguments for CM model (in discussion)




2. which value to use?
paired prob. or credibility1. 




3. PPfold doc:
run ppfold_batch.sh, see ppfold_batch.pl for details
perl ppfold_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
**************
Running PPfold version 3.0
Checking input arguments...




Correct usage:




java -jar PPfold.jar [ALIGNMENTFILE] [OPTIONS]




ALIGNMENTFILE: optional, must be in FASTA format.




OPTIONS:
--help or -h:          triggers this usage message
--paramfl or -p:   optional argument specifying the input parameter file.
                       There must be a space between the argument and the filename.
                       Please refer to PPfold documentation for the correct format.
                       If none specified, default values (pfold) will be used.
--tree or -t:          optional argument specifying the input tree file.
                       There must be a space between the argument and the filename.
                       The nodes of the tree must exactly match the sequences in the alignment.
                       The tree must be in Newick format.
                       If none specified, the MLE tree will be calculated from the alignment.
--mle or -m:           Trigger maximum likelihood estimation of the branch lengths
                       Only needed if there is a non-MLE input tree.
                       (The default options will calculate the MLE tree from the alignment,
                       but if a tree is given, it will by default not be optimized.)
--iterlim or -l:   Maximum number of iterations in maximum likelihood estimation of the tree.
--verbose or -v:   optional argument, produces lots of extra output.
--exports or -e:   optional argument, turns all exports on.
                       If none specified, the following files will be exported:
                       .st, .seq, .lseq, .ct and .newick
--outputd or -o:   Specifies output folder
                       There must be a space between the argument and the folder name.
                       Do not add / or \ at the end!
-f:                    Specifies an export file handle different from the default.
--scfgjnr or -s:   Number of SCFG divisions (default=available cores*8)
--phyljnr or -p:   Number of phylogenetic divisions (default=available cores*2)
--proccnt or -c:   Number of processors to use (default=max)
--entropy:             calculates the information entropy for the named sequence
--usedata or -d:   Uses the chemical probing data file specified in the predictions.
                       Usage: --usedata [shapefile] [sequencename]
                       Must also specify data type, as the next argument, as:
                       --dist DEFAULT   : interprets the data as data from SHAPE experiments.
                       --dist filename  : interprets the data as from a generic probing experiment,
                                          uses filename as the structure distribution data.
                       --force              : interpets the data as hard constraints (mfold-style)
                       --direct             : interprets the data as posterior probabilities (advanced)
                       For more details, see the PPfold website.
--contactdistance or -cd: limits the contact distance to the specified number
                              (Might not be exactly fulfilled in the final structure due to
                              column removal)
--onlyCT:              Only exports a CT file.




If no arguments are given at all, PPfold will attempt to trigger the GUI.








2. run rnadecoder_batch.sh, see rnadecoder_input.pl for details
perl rnadecoder_input.pl fly_scanning_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/3UTR_singlePos_aln_UCSC1_7000_rd








3. alifold.sh, see alifold_bp_batch.pl
perl alifold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_70 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out






# ideas:
1.count % of individual structures VS consensus structure
2. col format 
http://genome.ku.dk/resources/colformat/
how to decide the paired positions in col file?
3. check rnaplfold bolzman distribution
4. transat: use the up-to-date version under Daniel’s dir
a. also, the output of Transat is HUGE, use -nodb to reduce the output (turn off the dot-bracket lines, remain only the text description of the pairing, like 0:21,1:20,2:19,3:18,4:17 this tells u how the base pairs; plus, Daniel has a script to recover the dot-bracket from this text, ask Alice about it)






# run Transat
syang11@fire:/ubc/cs/research/irmtraud/people> ./jujubix/bin/Transat
***Note: Program is using old TRANSAT matrix for non-coding region***




Transat Usage (Predicting intramolecular secondary structure):
            ./Transat -fasta <input multiple alignment sequence> -tree <Newick phylogentic tree> [options]
InteRRact Usage (Predicting intermolecular secondary structure):
            ./Transat -interactions <first input> <second input> -tree <Newick phylogentic tree> [options]




***Note*** Make sure there are no spaces in your Newick tree, or else error will occur. If there are spaces, open the file with an editor and manually delete them first!
Options:
   -outFilePrefix s -- *InteRRact ONLY* Sets the prefix (including directories) of output
                           files to 's' (string)
                           Default: "helices"




   -minSL n        -- Finds and returns helices greater than or equal to 'n' (integer).
                      Increasing n decreases runtime, up to a certain point... then it slows down
                      Default: 4
   -pvRange n  -- Generates p-values with the minimum possible value approximately
                      around n (double).  Smaller n correlates with longer runtime.
                      Default: 0.001
   -noPvalues  -- Skips p-value calculation, setting all p-values to 0 (extremely fast)
   -realign        -- Realigns input multiple sequence alignment using TCOFFEE
                      *NOTE*: command 't_coffee' must be accessible via the command line
                      For large input files, TCOFFEE may require large amounts of memory (32GB)
                      and a long time (days) to realign
   -codon s        -- *TRANSAT ONLY* Supply a codon annotation of the input file in file 's'. If none is given,
                                       then this is equivalent to treating entire alignment as codon annotation 0s.
                      If not provided, will attempt to find annotation in the last FASTA entry of the input
                      file.  The annotation can only contain values: 0, 1, 2, 3 where 0 is non-coding and
                      1, 2 and 3 are the three codons positions for each codon.  START and STOP codons should
                      also be annotated with 123.  All guarantees are lost when nonsense annotations are given
   -codons a b -- *InteRRact ONLY* Supply two codon annotation files 'a' and 'b' corresponding to
                      to the two input files after the -interactions flag








   -less           -- Decrease runtime by reducing sample size (faster, but less accurate than -fast)
   -fast           -- Decrease runtime by reducing sample size and compensating with p-value estimation
                      P-values generated by this mode should more informative than those by -less








   -nounderflow - Enables specialized data type to prevent numerical underflow of probability values
                      This option will slow down execution considerably
   -nonGapPair -- Disables explicit penalization of pairing with a gap
   -noDB           -- Dot bracket structure in output file disabled and replaced with '0'.
                      Greatly reduces filesize (with no loss of information, as structure is encoded in Bps)
   -likelihood -- Prints matrix of paired likelihoods, and a list of unpaired likelihoods
                      instead of running Transat as usual.








   -verbose        -- Prints progress information during execution
   -help           -- Prints this usage guide




Output:
   Each line corresponds to a uniquely predicted helix, with the following attributes:




   Pvalue           -- fraction of random helices with LogLikelihoods greater than the observed LogLikelihood
   LogLikeRatio -- log likelihood of observing the bases being paired relative to being unpaired
   PairedLogLikelihood   -- log likelihood of observing the bases being paired relative to a random model
   UnpairedLogLikelihood -- log likelihood of observing the bases being unpaired relative to a random model
   MeanFracCanonicalBP   -- mean fraction of all bases observed in the helix in the multiple sequence alignment
                                column being a canonical base pair (i.e. G-C, A-U, G-U)
   Covariance   -- covariance observed in helix column (i.e. reward canonical base pairs, penalize others)
   Conservation -- nucleotide level conservation of helix base columns
   HelixLength  -- length of helix
   AlignmentSize             -- number of sequences in input alignment
   AlignmentLength           -- length of sequences in input alignment, including gaps (concatenated length in InteRRact)
   AlignmentLength           -- length of sequences in input alignment, including gaps
   TreeLength   -- total length of all branches on the input phylogeny tree
   Structure        -- visual dot bracket notation of the helix on the multiple sequence alignment
   Bps              -- string representation of the helix, which is a comma separated list of pairs of form i:j
                       where the base in position i base pairs with the base in position j
   [AlignmentLengthA]        -- *InteRRact ONLY* length of the first of two interacting sequences




Examples:
   ./Transat -fasta E_coli_RNaseP.fasta_al -tree E_coli_RNaseP.tree > transat_results.out
          Run in Transat mode with default settings, writting output to a file




   ./Transat -fasta E_coli_RNaseP.fasta_al -tree E_coli_RNaseP.tree -fast -minSL 5 -pvRange 0.0001
          Run in Transat mode in fast mode, finding helices of length >= 5, aiming for potential minimum p-values of 0.0001




   ./Transat -interactions inputA.fasta_al inputB.fasta_al -tree input.tree -outFilePrefix foo
          Run in InteRRact mode, outputting files: foo_A.out, foo_B.out, foo_Interactions.out




   ./Transat -interactions inputA.fasta_al inputB.fasta_al -tree input.tree -realign -noPvalues -noDB
          Run in InteRRact mode, realigning the input with TCOFFEE, outputting no structure and p-values




   ./Transat -interactions inputA.fasta_al inputB.fasta_al -tree input.tree -pvaluethreshold 0.05 -logratiothreshold 5 -outFIlePrefix foo
          Run in InteRRact mode, and only write the predictions to output file foo that meets a minimum pvalue (<0.05) and/or logratio thresholds (>5). If nothing is set, all predictions will be outputted.








1. for rna-alifold, most of the structural results show nothing (just dots, very few brackets). Daniel suggests:
a. to use LocARNA first to realign the original aln that directly cuts from UCSC genome alignment, then the new aln gives better structrural results from rna-alifold. The corresponding paper is “Inferring Noncoding RNA families and classes by means of genome-scale strucutral-based clustering”
b. -r option, use Ribosum scoring matrix instead of normal energy model
c. for the dot-bracket output of rna-alifold, use the first dot-bracket instead of the second, i.e., the one that only has dot and parenthesis, since the first one is a super set of the scond one




________________





















######
# task 2.1: predicting accessibility using MFE methods(RNAplfold)
######

Highlights:
----------------
Basically do the same pipeline as the comparative methods did using RNAplfold, which represents the strategy of using MFE


a. RNAplfold
-----------------------------------------------
directory: 

-w 240 -L 160 -u 40 -O -b

NOTE:
the papameters are setted as the optimal ones (note, not the default ones) according to Rolf Backon 2012 paper on accessibility for RRI. Note that, the value for -u option is set as the size of the binding part on RNA sequence (not neccessary to be the length of binding sites motif, but need to be at least the same size of the motif)




________________



















######
# task 3: map the predicted accessibility to binding sites and summarize the resutls of (ppfold, rnaalifold, rnadecoder, transat)
######


#last update: 20121108



Highlights:
----------------
# In general, this task includes 
(1). get the protein binding sites motif from Li2010 paper's supplements, do a motif matching for every motif on every transcript's 3'UTR region, map the positions between genomic sequence and MSA. -string_scan_batch.sh
(2). for each of the four programs, get the base pairing probabilities for every base position on every transcript's 3'UTR, also pick the base pairing probabilities for protein binding sites; calculate the overall mean bp for every protein.   -alifold_bp_batch.sh, decoder_bp_batch.sh, ppfold_bp_batch.sh; similarly, get the structure annotation for every position on the 3'UTR MSA, also pick those positions for protein binding sites; calculate the overall mean fd (base pairing rate, loop/bulge rate and unstructured rate) for every protein. -alifold_fd_batch.sh, decoder_fd_batch.sh, ppfold_fd_batch.sh  
(3). visulize the results (R plots), see task 5 for details


# unless specified, all binding sites are from Li2010 paper at /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Li2010, see 2.


# unless specified, all scripts are in /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching folder


# unless specified, all four programs are in /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/Comparative_RNA_folding_methods_from_Irmi


#note, for each of the four programs, there is an overall _batch.pl script to organize all the scripts related to this program, this makes the task much easier to re-do the analyzes.
 




Pipeline to reproduce the work 
--------------------------------------------------------
for (1):
a. String matching
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/


updated on 20120927: output redundant alignment positions and all the orginal gap-free sequence positions in the alignment as well


perl string_scan_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000
      /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/all.motif
      


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000




NOTE:
The motif information is derived from the Li2010 paper's supplements (supplemental table 1) and stores in all.motf. It contains (protein        motif): 
Msl5        UACUAAC
Puf4-1        UGUAUAUUA
Puf4-2        UGUAHMNUA
Puf3-1        CNUGUAHAUA
Puf3-2        UGUAHAUA
Pumilio        UGUAHAUA
PTB-1        UCUU
PTB-2        YCU
HuR        NNUUNNUUU
Khd1        CNNCNN
Nab2        DRARAMGMD
Yll032c        AAUACCY
Vts1-1        CNGG
Vts1-2        CNGGN
Pub1        HUUUUUUHW
Puf2        UAAUAAW
Puf5        WUUGUAWUWU
Ssd1        AKUCAUUCCUU
PAB1        WUAUAUAW
Nsr1        GGGWAACGGW
Pum1        UGUAHAUA
Nrd1        UUCUUGUW
The data is originally generated by RNP immunoprecipitation-microarray (RIP-chip) experiment. All together, they comprise 18 previously defined RBPs that binds to 3’UTR region of Drosophila mRNA sequences, has consensus binding sequences (motif) availamy $pseudo=0.0000000001;ble. I map back these binding sequences to the Drosophila melanogaster transcripts and the alignments using a sliding-window based approach.


So the program takes the fasta alignment, remove all the gaps for dm3 species (the reference fly species) sequence, do a regular expression searching for each of the motif based on a sliding window approach (move one base at a time, so that overlapped motif regions could be maintained), map the binding sites positions back to the alignment positions.


It calls string_scan.pl which take an aln and a motif file as input, for each line (i.e. motif) in the motif file, scan the string on the aln, and output motif positions to the .pos file. In .pos file, each line of it is the mapping position of a protein binding motif, it is in the following format:
Protein        motif_matching_1,motif_matching_2        position3,position5,position6  position3-5,position5-6	position1,position3,position5,position6,position7,position9	
motif_matching_1,motif_matching_2 denotes the matching positions in the original sequence, and displays as contineous regions
position1,position2,position3 and position1-2,position2-3 denotes the matching positions in the alignment columns. Since they could have been seperated by gaps, these positions are not neccessarily contineous. And they are both non-redundant (3rd column) and redundant (4th column).
position1,position3,position5,position6,position7,position9 denotes all the positions mapped from gap-free sequence to alignments, for this case, it means there are 6 nts in the original sequence, and they have been gapped in the alignment like this: position1-position3-position5position6position7-position9
eg: 
Pumilio	15-22	16,17,18,19,20,21,22,23	16-17-18-19-20-21-22-23	
(output from FBtr0100666_red.pos:
perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0100666.fasta Pumilio.motif FBtr0100666_red.pos)

ideas: the motif is represented by consensus sequence which is coded by IUPAC codes, it is much better to use PWM with composition information available rather than consensus.


usage:
string_scan_batch.pl requires three arguments (input aln .fasta file folder, input motif file, output .pos files folder).


a.1 String matching for Pumilio protein 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

update: 20120927

perl string_scan_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio

input: 
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000
Pumilio.motif

output:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio

NOTE:
since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio; update the string_matching.pl to output the redundant alignment positions as well; so re-run the string_matching procedure on the Pumilio protein
______________________








for (2), call each of the .sh program respectively: XXX_bp_batch.pl where XXX is the program name, bp is for base pairing probabilities; XXX_fd_batch.pl where fd is for structural compositions (namely, base pairing rates, loop/bulge rates and unstructured rates for binding sites and normal sites):


b. ppfold
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


#last update: 20121018


NOTE:
ppfold_NPL_batch.pl:
Calculation for base paring probabilities and consensus structures together:
b.3 is the most up-to-date one (calculate base paring probabilities and consensus structures together), the base paring probabilities are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge); 

when calculating base paring probabilities, the raw base paring probabilities matrix from ppfold output are used as input. Then for position i, the paired probability of it is the sum of the cells of the corresponding line i in the matrix (except the i-the column since the matrix is symmetric), i.e.:
paired prob {i}=sum(prob{i,j!=i}) 



highlight:
#based on ppfold_bp.pl and ppfold_fd.pl: 
#0. a combination of previous _bp.pl and _fd.pl functions, output both results.
#1. for each line of the base pair prob. matrix, use sum, instead of average, to represent the prob. of the position (line).
#2. Besides, the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 


old versions b.1 and b.1.1 are calculated based on simple classification of background sites and binding sites, no further dividing into N, P, L.

Besides, for old versions, the base paring probability of a position is the average, instead of sum, of the corresponding line in the base paring probabilities matrix

for old versions b.1 and b.1.1, ppfold_bp_batch.pl calculates the base pairing probabilities and ppfold_fd_batch.pl calculates the structural compositions

  
  
  


b.1 base pairing probabilities
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching




perl ppfold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out 




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out




NOTE:
ppfold_bp_batch.pl calls ppfold_bp.pl which takes the oringal base pairing probabilities matrix from ppfold's .bp file, then for each protein binding motif, get the bp for every single site by computing the average value for the row corresponding to this site. Compare the bp for protein binding sites and background sites.


usage:
ppfold_bp_batch.pl requires three arguments (input .pos file folder, input bp .bp file folder, input motif file, output statistics files folder, optional:output position file).





b.1.1 base pairing probabilities for Pumilio
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching

update: 20120928


perl ppfold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio

input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif

output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio
      
NOTE: 
since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio; also change the background (all) bp context from all columns on the alignment to all positions on the sequence (namely, no gap); re-run the ppfold_bp_batch procedure on the Pumilio protein






b.2 structural compositions
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching




perl ppfold_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_fd




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_fd




NOTE:
ppfold_fd_batch.pl calperl ppfold_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_fd_Pumiliols ppfold_fd.pl which takes the ppfold result .seq file as input, then for each protein binding motif, read the dot-bracket structure from the .seq file, get the compostions: base pairing rates, loop/bulge rates and unstructured rates for binding sites and normal sites


usage:
ppfold_fd_batch.pl requires three arguments (input .pos file folder, input fd .seq file folder, input motif file, output statistics files folder, optional:output position file).



b.2.1 structural compositions for Pumilio
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching

update: 20120927

perl ppfold_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_fd_Pumilio

input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_fd_Pumilio

NOTE: 
since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio; also change the background (all) fd context from all columns on the alignment to all positions on the sequence (namely, no gap); re-run the ppfold_fd_batch procedure on the Pumilio protein




b.3 both probabilities and structrural annotation with NPL
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


perl ppfold_NPL_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio_NPL


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio_NPL
      

NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script is based on ppfold_bp_batch.pl and ppfold_fd_batch.pl: 
  0. a combination of previous _bp_batch.pl and _fd_batch.pl functions, output both results.
  1. the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 
It calls the script ppfold_NPL.pl (see below) to deal with each single transcript. For the details, see the description for single transcript version: ppfold_NPL.pl


############################
successfully manually checked 
############################
syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/test/ppfold/npl> perl ../../../ppfold_NPL_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 ../../../Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/out






single transcript version: ppfold_NPL.pl
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching



perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq Pumilio


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio/FBtr0100666.pos
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.bp
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      screen

NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script calculate base paring probabilities and consensus structures together. And they are calculated according to different regions for both (3'UTR) background sites and binding sites: N (non-structured region), P (paired), L (loop/bulge); 

when calculating base paring probabilities, the raw base paring probabilities matrix from ppfold output are used as input. Then for position i, the paired probability of it is the sum of the cells of the corresponding line i in the matrix (except the i-the column since the matrix is symmetric), i.e.:
paired prob {i}=sum(prob{i,j!=i}) (*)

given a transcript, for each of the script's modes: scan (base pairing prob.) and fold (frequency/prior prob.), the major output of the script are the 6 statistics below, respectively 
P_utr	L_utr	N_utr	P_bs	L_bs	N_bs

for scan (base pairing prob.) mode, the base pairing prob. for one of the 6 categories for the transcript is calculated as the average base-wise pairing prob., namely (prob(base1)+prob(base2)+..prob(baseN))/N, where prob(baseI) is calculated as the (*). eg: for P_bs category, the average is (prob(base1)+prob(base2)+..prob(baseN))/N, where baseI is a paired binding site; and N is the number of paired binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the denominator N==0, the output is "NA". 
  
for fold (frequency/prior prob.) mode, the frequency/prior prob./rate for one of the 6 categories for the transcript is calculated as the fraction of counts, eg: for P_bs category, the fraction is (I(base1)+I(base2)+..I(baseN))/N, where I(baseI)=1 if baseI is paired and 0 otherwise; and N is the number of binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the numerator ==0, the output is 0. 


usage:
ppfold_NPL.pl requires four arguments (input binding sites .pos file, input bp .bp file, input folding .seq file, protein, optional output statistics file).



############################
successfully manually checked (paired prob {i}=sum(prob{i,j}), including j==i case in order to compare with previous results in task 4; actually for j==i case, ppfold outputs 0, so it does not change the result for the sum -> so no need to do sum(prob{i,j!=i}) again): 
############################
syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq Pumilio
bp in utr:16+1
bp in bs:16+1
bp in utr:23+1
bp in utr:148+1
bp in utr:149+1
bp in utr:173+1
bp in utr:174+1
bp in utr:430+1
bp in utr:431+1
bp in utr:456+1
bp in utr:457+1
bp in utr:458+1
bp in utr:512+1
bp in utr:513+1
bp in utr:514+1
bp in utr:516+1
bp in utr:517+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=15+1
number of sites=332+1
paired columns=16
number of columns=654+1
paired rate over all columns=0.0244274809160305
paired rate in utr sites=0.048048048048048
loop/buldge rate in utr sites=0.177177177177177
unstructured rate in utr sites=0.774774774774775
paired rate in binding sites=0.125
loop/buldge rate in binding sites=0.75
unstructured rate in binding sites=0.125

average(all_columns)=0.089536681354046
average(p_utr)=0.741257808433097
average(l_utr)=0.175681997163339
average(n_utr)=0.141167300462533
bp prob. at p_bs 17 is 0.817063902582924
average(p_bs)=0.817063902582924
bp prob. at l_bs 18 is 0.71033406865
bp prob. at l_bs 19 is 0.181750792361001
bp prob. at l_bs 20 is 0.049074824471401
bp prob. at l_bs 21 is 0.087623708186001
bp prob. at l_bs 22 is 0.148222545957201
bp prob. at l_bs 23 is 0.496792568426001
average(l_bs)=0.278966418008601
bp prob. at n_bs 16 is 0.539846520543701
average(n_bs)=0.539846520543701


syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0077815.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.seq Pumilio
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=-1+1
number of sites=120+1
paired columns=
number of columns=270+1
paired rate over all columns=0
paired rate in utr sites=0
loop/buldge rate in utr sites=0
unstructured rate in utr sites=1
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1

average(all_columns)=0.0314629138260197
average(p_utr)=NA
average(l_utr)=NA
average(n_utr)=0.0704665260070347
average(p_bs)=NA
average(l_bs)=NA
bp prob. at n_bs 8 is 0.063425041414911
bp prob. at n_bs 9 is 0.132334115052351
bp prob. at n_bs 10 is 0.153253512833661
bp prob. at n_bs 11 is 0.053312090856331
bp prob. at n_bs 12 is 0.270564869341521
bp prob. at n_bs 13 is 0.566673511369001
bp prob. at n_bs 14 is 0.339045284387561
bp prob. at n_bs 15 is 0.190628847116001
average(n_bs)=0.221154659046417


syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.seq Pumilio
bp in utr:30+1
bp in utr:60+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=1+1
number of sites=50+1
paired columns=2
number of columns=64+1
paired rate over all columns=0.0307692307692308
paired rate in utr sites=0.0392156862745098
loop/buldge rate in utr sites=0.509803921568627
unstructured rate in utr sites=0.450980392156863
paired rate in binding sites=0
loop/buldge rate in binding sites=1
unstructured rate in binding sites=0

average(all_columns)=0.073692999470709
average(p_utr)=0.857161069471798
average(l_utr)=0.0943840682807214
average(n_utr)=0.0270320457110313
average(p_bs)=NA
bp prob. at l_bs 48 is 0.027795738586575
bp prob. at l_bs 49 is 0.649063510314261
bp prob. at l_bs 50 is 0.115085739117201
bp prob. at l_bs 52 is 0.005264667164801
bp prob. at l_bs 53 is 0.015110789802862
bp prob. at l_bs 54 is 0.169376019084001
bp prob. at l_bs 55 is 0.033383255898245
bp prob. at l_bs 56 is 0.284474924355001
average(l_bs)=0.162444330540368
average(n_bs)=NA


syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.seq Pumilio
NA


syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0071068.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0071068.seq Pumilio
bp in utr:120+1
bp in utr:816+1
bp in utr:840+1
bp in utr:859+1
bp in utr:860+1
bp in utr:861+1
bp in utr:862+1
bp in utr:863+1
bp in utr:864+1
bp in utr:865+1
bp in utr:1020+1
bp in utr:1021+1
bp in utr:1051+1
bp in utr:1052+1
bp in utr:1055+1
bp in utr:1177+1
bp in utr:1190+1
bp in utr:1192+1
bp in utr:1193+1
bp in utr:1272+1
bp in utr:1273+1
bp in utr:1332+1
bp in utr:1338+1
bp in utr:1339+1
bp in utr:1344+1
bp in utr:1345+1
bp in utr:1379+1
bp in utr:1380+1
bp in utr:1381+1
bp in utr:1382+1
bp in utr:1383+1
bp in utr:1384+1
bp in utr:1385+1
bp in utr:1386+1
bp in utr:1387+1
bp in utr:1388+1
bp in utr:1389+1
bp in utr:1399+1
bp in utr:1471+1
bp in utr:1565+1
bp in utr:1569+1
bp in utr:1570+1
bp in utr:1571+1
bp in utr:1572+1
bp in utr:1573+1
bp in utr:1574+1
bp in utr:1575+1
bp in utr:1576+1
bp in utr:1577+1
bp in utr:1584+1
bp in utr:2368+1
bp in utr:2369+1
bp in utr:2370+1
bp in utr:2371+1
bp in utr:2429+1
bp in utr:2430+1
bp in utr:2451+1
bp in utr:2452+1
bp in utr:2646+1
bp in utr:2674+1
bp in utr:2769+1
bp in utr:2791+1
bp in utr:2798+1
bp in utr:2799+1
bp in utr:2800+1
bp in utr:2944+1
bp in utr:2945+1
bp in utr:2946+1
bp in utr:2947+1
bp in utr:2993+1
bp in utr:2994+1
bp in utr:2995+1
bp in utr:2996+1
bp in utr:3026+1
bp in utr:3027+1
bp in utr:3028+1
bp in utr:3115+1
bp in utr:3116+1
bp in utr:3117+1
bp in utr:3164+1
bp in utr:3165+1
bp in utr:3166+1
bp in utr:3195+1
bp in utr:3196+1
bp in utr:3197+1
bp in utr:3205+1
bp in utr:3206+1
bp in utr:3207+1
bp in utr:3208+1
bp in utr:3231+1
bp in utr:3275+1
bp in utr:3276+1
bp in utr:3280+1
bp in utr:3281+1
bp in utr:3452+1
bp in utr:3454+1
bp in utr:3455+1
bp in utr:3527+1
bp in utr:3528+1
bp in utr:3529+1
bp in utr:3786+1
bp in utr:3788+1
bp in utr:3789+1
bp in utr:3790+1
bp in utr:3792+1
bp in utr:3793+1
bp in utr:3798+1
bp in utr:3799+1
bp in utr:3874+1
bp in utr:3875+1
bp in utr:3876+1
bp in utr:3880+1
bp in utr:3883+1
bp in utr:3884+1
bp in utr:3885+1
bp in utr:3932+1
bp in utr:3936+1
bp in utr:3943+1
bp in utr:3945+1
bp in utr:3946+1
bp in utr:3947+1
bp in utr:3948+1
bp in utr:3949+1
bp in utr:3950+1
bp in utr:3959+1
bp in utr:3960+1
bp in utr:3979+1
bp in utr:3982+1
bp in utr:3983+1
bp in utr:3984+1
bp in utr:4044+1
bp in utr:4045+1
bp in utr:4046+1
bp in utr:4116+1
bp in utr:4117+1
bp in utr:4118+1
bp in utr:4124+1
bp in utr:4125+1
bp in utr:4126+1
bp in utr:4127+1
bp in utr:4227+1
bp in utr:4228+1
bp in utr:4230+1
bp in utr:4231+1
bp in utr:4386+1
bp in utr:4389+1
bp in utr:4390+1
bp in utr:4391+1
bp in utr:4417+1
bp in utr:4418+1
bp in utr:4427+1
bp in utr:4428+1
bp in utr:4439+1
bp in utr:4446+1
bp in utr:4449+1
bp in utr:4450+1
bp in utr:4451+1
bp in utr:4452+1
bp in utr:4453+1
bp in utr:4454+1
bp in utr:4467+1
bp in utr:4468+1
bp in utr:4828+1
bp in utr:4829+1
bp in utr:4838+1
bp in utr:4839+1
bp in utr:5097+1
bp in utr:5131+1
bp in utr:5132+1
bp in utr:5133+1
bp in utr:5134+1
bp in utr:5137+1
bp in utr:5145+1
bp in utr:7107+1
bp in utr:7108+1
bp in utr:7109+1
bp in utr:7110+1
bp in utr:7188+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=177+1
number of sites=3641+1
paired columns=178
number of columns=7331+1
paired rate over all columns=0.0242771412984179
paired rate in utr sites=0.0488742449203734
loop/buldge rate in utr sites=0.814113124656782
unstructured rate in utr sites=0.137012630422845
paired rate in binding sites=0
loop/buldge rate in binding sites=1
unstructured rate in binding sites=0

average(all_columns)=0.0452318378585051
average(p_utr)=0.780986760366612
average(l_utr)=0.056289501426265
average(n_utr)=0.0514667077574253
average(p_bs)=NA
bp prob. at l_bs 1077 is 1e-15
bp prob. at l_bs 1078 is 0.0494203062672627
bp prob. at l_bs 1079 is 0.0782088996757475
bp prob. at l_bs 1080 is 0.0198375739901258
bp prob. at l_bs 1081 is 0.00820580846913554
bp prob. at l_bs 1082 is 0.162748599245465
bp prob. at l_bs 1083 is 0.119213348837326
bp prob. at l_bs 1084 is 0.0216421143506891
bp prob. at l_bs 1168 is 0.0467462220504187
bp prob. at l_bs 1169 is 0.0839845199896858
bp prob. at l_bs 1170 is 0.00730174059475249
bp prob. at l_bs 1171 is 0.0603014043078048
bp prob. at l_bs 1172 is 0.0342515886812606
bp prob. at l_bs 1173 is 0.0247684973972959
bp prob. at l_bs 1174 is 0.00352225269833003
bp prob. at l_bs 1177 is 0.0680322642941046
bp prob. at l_bs 5629 is 1e-15
bp prob. at l_bs 5630 is 1e-15
bp prob. at l_bs 5631 is 1e-15
bp prob. at l_bs 5632 is 1e-15
bp prob. at l_bs 5633 is 1e-15
bp prob. at l_bs 5634 is 1e-15
bp prob. at l_bs 5635 is 1e-15
bp prob. at l_bs 5636 is 1e-15
bp prob. at l_bs 6294 is 1e-15
bp prob. at l_bs 6295 is 1e-15
bp prob. at l_bs 6296 is 1e-15
bp prob. at l_bs 6297 is 1e-15
bp prob. at l_bs 6298 is 1e-15
bp prob. at l_bs 6299 is 1e-15
bp prob. at l_bs 6300 is 1e-15
bp prob. at l_bs 6303 is 1e-15
average(l_bs)=0.0246307856515444
average(n_bs)=NA





b.4. Motif-wise NPL
-----------------------------------------------
b.4.1. visualize NPL distribution
-----------------------------------------
b.4.1.1. fold mode
-----------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


perl ppfold_NPL_motifWise_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio_NPL_motifWise_fd


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/ppfold/out_Pumilio_NPL_motifWise_fd
      

NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L).
The script is based on ppfold_NPL_batch.pl:
  0. calculate binding motif-wise (folding i.e. consensus structure) statistics instead of site-wise
  1. output the results as consensus annotation for each motif (eg, for 8mer motif, outpout something like NPPPPNNL); so the final output looks like some motif structure alignment
It calls the script ppfold_NPL_motifWise_fd_batch.pl (see below) to deal with each single transcript. For the details, see the description for single transcript version: ppfold_NPL_motifWise_fd_batch.pl


############################
successfully manually checked 
############################

perl ppfold_NPL_motifWise_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/out_motifWise





single transcript version: ppfold_NPL_motifWise_fd.pl
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching



perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0100666.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq Pumilio 


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio/FBtr0100666.pos
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      screen
      
      
NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L).       
#0. calculate binding motif-wise (folding i.e. consensus structure) statistics instead of site-wise like ppfold_NPL.pl does
#1. output: the folding results as consensus annotation for each motif (eg, for 8mer motif, outpout something like NPPPPNNL)
      

usage:
ppfold_NPL_motifWise_fd.pl requires three arguments (input binding sites .pos file, input folding .seq file, protein, optional output statistics file).




############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0100666.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq Pumilio                   
NPLLLLLL


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0077815.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.seq Pumilio
NNNNNNNN


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.seq Pumilio 
LLLLLLLL


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.seq Pumilio
NA


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0071068.seq Pumilio
LLLLLLLL
LLLLLLLL
LLLLLLLL
LLLLLLLL






Visulization tools
-----------------------------------
1. enoLOGOS
-------------------------
url: http://lagavulin.ccbb.pitt.edu/cgi-bin/enologos/enologos.cgi


2. weblogo
-------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/weblogo-3.3

NOTE:
download source codes for weblogo-3.3 from: http://code.google.com/p/weblogo/downloads/detail?name=weblogo-3.3.tar.gz&can=2&q=
also available as an online tool at:
http://weblogo.threeplusone.com/create.cgi
set "Units" as probability




3. seqLogo
-------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/seqLogo

http://www.bioconductor.org/packages/2.3/bioc/html/seqLogo.html

version: requires R version >=2.13


3.1 installation
------------------
syang11@fire:/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/seqLogo/> tar -zxvf seqLogo_1.8.0.tar.gz


#inside R enviroment
> .libPaths("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo/")
> install.packages("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo", repo=NULL)
Installing package(s) into ‘/ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo’
(as ‘lib’ is unspecified)
* installing *source* package ‘seqLogo’ ...
** R
** inst
** preparing package for lazy loading
Creating a new generic function for "plot" in "seqLogo"
Creating a new generic function for "summary" in "seqLogo"
Creating a new generic function for "print" in "seqLogo"
** help
Warning: /ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo/man/pwm-class.Rd:30: unknown macro '\item'
Warning: /ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo/man/pwm-class.Rd:33: unknown macro '\item'
Warning: /ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo/man/pwm-class.Rd:36: unknown macro '\item'
Warning: /ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/seqLogo/seqLogo/man/pwm-class.Rd:39: unknown macro '\item'
*** installing help indices
** building package indices ...
** testing if installed package can be loaded

* DONE (seqLogo)




4. berrylogo
-------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/berrylogo/

version: requires R version >=2.15


4.1 installation
------------------
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo> git clone https://github.com/leipzig/berrylogo


Then, add R version 2.15 from Daniel's directory into $PATH in ~/.bashrc file
export PATH=/ubc/cs/research/irmtraud/people/jujubix/bin/src/R-2.15.0/bin:$PATH


#inside R enviroment
> .libPaths("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo")
> install.packages("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo", repo=NULL)




4.2 setup R version 1.5 and Statistics::R package for perl 
------------------------------------




4.3 modify berrylogo.r to generate matrix for NPL instead of PWM 
------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo_shu/R


berrylogo.r: berrylogo_shu<-function(pwm,gc_content=1,zero=.0001)




4.4 run berrylogo.r without installation 
------------------------------------
> source("berrylogo.r")
> a<-matrix(data=c(0.25,0.65,0.87,0.92,0.16,0.16,0.04,0.98,0.98), byrow=TRUE,nrow=3,dimnames=list(c('N','L','P')))
> p<-berrylogo_shu(a)
> pdf("test.pdf")
> print(p)
> dev.off()
null device 
          1
          
          
4.5 combining figures from R4RNA
---------------------------------------
For berrylogo.r, the script uses ggplot2 which is using lattice and based on 'grid' graphics subsystem, while the original R programs including R4RNA use 'base' graphics system. It is fairly difficult to combine figures from different systems.          


_________________________










c. alifold 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/


#last update: 20121022


NOTE: 


alifold_NPL_batch.pl:
Calculation for base paring probabilities and consensus structures together:
c.3 is the most up-to-date one (calculate base paring probabilities and consensus structures together), the base paring probabilities are calculated according to different regions for both (3'UTR) background sites and binding sites: N (non-structured region), P (paired), L (loop/bulge); 

when calculating base paring probabilities, the raw base paring probabilities matrix from ppfold output are used as input. Then for position i, the paired probability of it is the sum of the cells of the corresponding line i in the matrix (except the i-the column since the matrix is symmetric), i.e.:
paired prob {i}=sum(prob{i,j!=i}) 


highlight:
#based on alifold_bp.pl and alifold_fd.pl: 
#0. a combination of previous _bp.pl and _fd.pl functions, output both results.
#1. for each line of the base pair prob. matrix, use sum, instead of average, to represent the prob. of the position (line).
#2. Besides, the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 


old versions c.1 and c.1.1 are calculated based on simple classification of background sites and binding sites, no further dividing into N, P, L.

Besides, for old versions, the base paring probability of a position is the average, instead of sum, of the corresponding line in the base paring probabilities matrix

for old versions c.1 and c.1.1, alifold_bp_batch.pl calculates the base pairing probabilities and alifold_fd_batch.pl calculates the structural compositions

alifold_bp_batch.pl and alifold_fd_batch.pl are similar to the two _batch scripts for ppfold. just note: use rnaalifold_dp2pairing_probs_shu.pl, instead of rnaalifold_dp2pairing_probs.pl, to get alifold results .bp files; previously, when using rnaalifold_dp2pairing_probs.pl, alifold results .bp file only outputs (deals with) 255 base long at one time (if longer, only output the results for the first 255), need to use sliding window? due to the above 255 limits, I also collected ~700 3'UTR alignments which are all less than this length to do the whole analyses again, the results are put into those _700 and _70 folders.




c.1 base pairing probabilities 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl alifold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out


NOTE:
For alifold_bp_batch.pl, it calls /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/rnaalifold_dp2pairing_probs_shu.pl (debugged version from Irmi's rnaalifold_dp2pairing_probs.pl) to convert the original output from alifold alidot.ps to base pairing probability matrix .bp file.
It also calls the single file version alifold_bp.pl which is similar to the corresponding script _bp.pl for ppfold.


usage:
alifold_bp_batch.pl requires three arguments (input .pos file folder, input bp .ps file folder, input motif file, output statistics files folder, optional:output position file).


c.1.1 base pairing probabilities for Pumilio 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

update: 20120928


perl alifold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio


NOTE:
since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio; also change the background (all) bp context from all columns on the alignment to all positions on the sequence (namely, no gap); re-run the alifold_bp_batch procedure on the Pumilio protein






c.2 structural compositions 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl alifold_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_fd




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_fd
      
NOTE:
It calls the single file version alifold_fd.pl which is similar to the corresponding script _fd.pl for ppfold.


usage:
alifold_fd_batch.pl requires three arguments (input .pos file folder, input fd .consensus file folder, input motif file, output statistics files folder, optional:output position file).






c.2.1 structural compositions for Pumilio 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl alifold_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_fd_Pumilio




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_fd_Pumilio
      
NOTE:
since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio; also change the background (all) fd context from all columns on the alignment to all positions on the sequence (namely, no gap); re-run the alifold_fd_batch procedure on the Pumilio protein





c.3 both probabilities and structrural annotation with NPL
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


perl alifold_NPL_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio_NPL


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio_NPL
      

NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script is based on alifold_bp_batch.pl and alifold_fd_batch.pl: 
  0. a combination of previous _bp_batch.pl and _fd_batch.pl functions, output both results.
  1. the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 
It calls the script alifold_NPL.pl (see below) to deal with each single transcript. For the details, see the description for single transcript version: alifold_NPL.pl




############################
successfully manually checked 
############################
syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/alifold/npl/out









single transcript version: ppfold_NPL.pl
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching

perl alifold_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus Pumilio

input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio/FBtr0100666.pos
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.bp
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.seq
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif

output:
      screen
      
NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script calculate base paring probabilities and consensus structures together. And they are calculated according to different regions for both (3'UTR) background sites and binding sites: N (non-structured region), P (paired), L (loop/bulge);
      
when calculating base paring probabilities, the transfered base paring probabilities matrix (.bp file) from alifold output (.ps file) are used as input. Then for position i, the paired probability of it is the sum of the cells of the corresponding line i in the matrix (except the i-the column since the matrix is symmetric), i.e.:
paired prob {i}=sum(prob{i,j!=i})     (*) 

given a transcript, for each of the script's modes: scan (base pairing prob.) and fold (frequency/prior prob.), the major output of the script are the 6 statistics below, respectively 
P_utr	L_utr	N_utr	P_bs	L_bs	N_bs

for scan (base pairing prob.) mode, the base pairing prob. for one of the 6 categories for the transcript is calculated as the average base-wise pairing prob., namely (prob(base1)+prob(base2)+..prob(baseN))/N, where prob(baseI) is calculated as the (*). eg: for P_bs category, the average is (prob(base1)+prob(base2)+..prob(baseN))/N, where baseI is a paired binding site; and N is the number of paired binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the denominator N==0, the output is "NA". 
  
for fold (frequency/prior prob.) mode, the frequency/prior prob./rate for one of the 6 categories for the transcript is calculated as the fraction of counts, eg: for P_bs category, the fraction is (I(base1)+I(base2)+..I(baseN))/N, where I(baseI)=1 if baseI is paired and 0 otherwise; and N is the number of binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the numerator ==0, the output is 0. 


 
usage:
alifold_NPL.pl requires two arguments (input binding sites .pos file, input bp .bp file, input fd .consensus file, protein, optional output statistics file).



      
double-check:
############################
successfully manually checked (paired prob {i}=sum(prob{i,j}), including j==i case in order to compare with previous results in task 4; actually for j==i case, alifold outputs 0, so it does not change the result for the sum -> so no need to do sum(prob{i,j!=i}) again): 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004.consensus Pumilio
65                                                                                                                                             
Check: number of utr sites == sum of three utr classes (NPL)                                                                                   
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=-1+1                                                                                                                              
number of sites=50+1                                                                                                                           
paired columns=0
number of columns=64+1
paired rate over all columns=0
paired rate in utr sites=0                                                                                                                     
loop/buldge rate in utr sites=0
unstructured rate in utr sites=1
paired rate in binding sites=0
loop/buldge rate in binding sites=0                                                                                                            
unstructured rate in binding sites=1

average(all_columns)=1.72984615484615e-06
average(p_utr)=NA
average(l_utr)=NA
average(n_utr)=2.20470588335294e-06
average(p_bs)=NA
average(l_bs)=NA
bp prob. at n_bs 48 is 1.1560000001e-05
bp prob. at n_bs 49 is 2.1410000001e-05
bp prob. at n_bs 50 is 4.410000001e-06
bp prob. at n_bs 52 is 1e-15
bp prob. at n_bs 53 is 5.930000001e-06
bp prob. at n_bs 54 is 1.1700000001e-05
bp prob. at n_bs 55 is 2.0410000001e-05
bp prob. at n_bs 56 is 1.1560000001e-05
average(n_bs)=1.0872500001e-05



syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus Pumilio
655
bp in utr:9+1
bp in utr:10+1
bp in utr:11+1
bp in utr:15+1
bp in bs:15+1
bp in utr:16+1
bp in bs:16+1
bp in utr:17+1
bp in bs:17+1
bp in utr:18+1
bp in bs:18+1
bp in utr:19+1
bp in bs:19+1
bp in utr:410+1
bp in utr:411+1
bp in utr:412+1
bp in utr:417+1
bp in utr:418+1
bp in utr:419+1
bp in utr:421+1
bp in utr:422+1
bp in utr:423+1
bp in utr:424+1
bp in utr:429+1
bp in utr:430+1
bp in utr:431+1
bp in utr:432+1
bp in utr:443+1
bp in utr:444+1
bp in utr:445+1
bp in utr:446+1
bp in utr:447+1
bp in utr:448+1
bp in utr:449+1
bp in utr:450+1
bp in utr:451+1
bp in utr:456+1
bp in utr:457+1
bp in utr:458+1
bp in utr:459+1
bp in utr:532+1
bp in utr:533+1
bp in utr:534+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=37+1
number of sites=332+1
paired columns=38
number of columns=654+1
paired rate over all columns=0.0580152671755725
paired rate in utr sites=0.114114114114114
loop/buldge rate in utr sites=0.672672672672673
unstructured rate in utr sites=0.213213213213213
paired rate in binding sites=0.625
loop/buldge rate in binding sites=0.375
unstructured rate in binding sites=0

average(all_columns)=0.0152305702595432
average(p_utr)=0.198849940526317
average(l_utr)=0.00810432200892957
average(n_utr)=0.00776890352112776
bp prob. at p_bs 16 is 0.122332760000001
bp prob. at p_bs 17 is 0.172199910000001
bp prob. at p_bs 18 is 0.134393670000001
bp prob. at p_bs 19 is 0.081045940000001
bp prob. at p_bs 20 is 0.024917500000001
average(p_bs)=0.106977956000001
bp prob. at l_bs 21 is 0.028342020000001
bp prob. at l_bs 22 is 0.032694180000001
bp prob. at l_bs 23 is 0.066903000000001
average(l_bs)=0.042646400000001
average(n_bs)=NA


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0071068.bp /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0071068.consensus Pumilio
7332
bp in utr:5133+1
bp in utr:5134+1
bp in utr:5135+1
bp in utr:5140+1
bp in utr:5141+1
bp in utr:5142+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
paired sites=5+1
number of sites=3641+1
paired columns=6
number of columns=7331+1
paired rate over all columns=0.000818330605564648
paired rate in utr sites=0.00164744645799012
loop/buldge rate in utr sites=0.00109829763866008
unstructured rate in utr sites=0.99725425590335
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1

average(all_columns)=0.000914474528096937
average(p_utr)=0.477308175000001                                                                                                               
average(l_utr)=0.000748622500001
average(n_utr)=0.00105674110682913
average(p_bs)=NA                                                                                                                               
average(l_bs)=NA
bp prob. at n_bs 1077 is 0.000171680000001                                                                                                     
bp prob. at n_bs 1078 is 7.840000001e-06                                                                                                       
bp prob. at n_bs 1079 is 2.2490000001e-05                                                                                                      
bp prob. at n_bs 1080 is 7.290000001e-06
bp prob. at n_bs 1081 is 1e-15
bp prob. at n_bs 1082 is 0.000163840000001
bp prob. at n_bs 1083 is 0.000162290000001
bp prob. at n_bs 1084 is 1e-15
bp prob. at n_bs 1168 is 1e-15
bp prob. at n_bs 1169 is 1.810000001e-06
bp prob. at n_bs 1170 is 1.620000001e-06
bp prob. at n_bs 1171 is 1e-15
bp prob. at n_bs 1172 is 8.10000001e-07
bp prob. at n_bs 1173 is 1e-15
bp prob. at n_bs 1174 is 1e-15
bp prob. at n_bs 1177 is 1e-15
bp prob. at n_bs 5629 is 1e-15
bp prob. at n_bs 5630 is 1e-15
bp prob. at n_bs 5631 is 1e-15
bp prob. at n_bs 5632 is 1e-15
bp prob. at n_bs 5633 is 1e-15
bp prob. at n_bs 5634 is 1e-15
bp prob. at n_bs 5635 is 1e-15
bp prob. at n_bs 5636 is 1e-15
bp prob. at n_bs 6294 is 1e-15
bp prob. at n_bs 6295 is 1e-15
bp prob. at n_bs 6296 is 1e-15
bp prob. at n_bs 6297 is 1e-15
bp prob. at n_bs 6298 is 1e-15
bp prob. at n_bs 6299 is 1e-15
bp prob. at n_bs 6300 is 1e-15
bp prob. at n_bs 6303 is 1e-15
average(n_bs)=1.6864687501e-05





c.4. Motif-wise NPL
-----------------------------------------------
c.4.1. visualize NPL distribution
-----------------------------------------
c.4.1.1. fold mode
-----------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


perl alifold_NPL_motifWise_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio_NPL_motifWise_fd


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio_NPL_motifWise_fd
      

NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L).
The script is based on alifold_NPL_batch.pl:
  0. calculate binding motif-wise (folding i.e. consensus structure) statistics instead of site-wise
  1. output the results as consensus annotation for each motif (eg, for 8mer motif, outpout something like NPPPPNNL); so the final output looks like some motif structure alignment
It calls the script alifold_NPL_motifWise_fd_batch.pl (see below) to deal with each single transcript. For the details, see the description for single transcript version: alifold_NPL_motifWise_fd_batch.pl


############################
successfully manually checked 
############################

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/alifold/npl/out_motifWise 





single transcript version: alifold_NPL_motifWise_fd.pl
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching



perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0100666.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus Pumilio 


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio/FBtr0100666.pos
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif


output:
      screen
      
      
NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L).       
#0. calculate binding motif-wise (folding i.e. consensus structure) statistics instead of site-wise like alifold_NPL.pl does
#1. output: the folding results as consensus annotation for each motif (eg, for 8mer motif, outpout something like NPPPPNNL)
      

usage:
alifold_NPL_motifWise_fd.pl requires three arguments (input binding sites .pos file, input fd .consensus file, protein, optional output statistics file).




############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0100666.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus Pumilio                   
PPPPPLLL 


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0077815.pos  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0077815.consensus Pumilio
NNNNNNNN


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004.consensus Pumilio 
NNNNNNNN


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0300689.consensus Pumilio
NA


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_NPL_motifWise_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0071068.consensus Pumilio
NNNNNNNN                                                                                                                             
NNNNNNNN                                                                                                                             
NNNNNNNN
NNNNNNNN  

__________________________








d. decoder
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

update: 20121023 decoder_NPL_batch.pl, calculate base paring probabilities and consensus structures together, the base paring probabilities are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge). see below

update: 20121003 when using the sliding window, there are many sites with overlapped annotations (eg. chunk =300, step=100, then minimum annotation: once, maximum annotation=3 times), use the annotaion in the middle (i.e. the most centered one), instead of averaging all the overlapped values (for bp) or using the one with highest appreances (for fd). related programs: decoder_midbp_batch.sh decoder_midbp_batch.pl decoder_midbp.pl decoder_midfd_batch.sh decoder_midfd_batch.pl decoder_midfd.pl

update:20120928 correct the index calculating, and change the base pairing prob. from Reciprocal of Prob(unpaired) to 1-Prob(unpaired)


NOTE:


decoder_NPL_batch.pl:
Calculation for base paring probabilities and consensus structures together:
d.3 is the most up-to-date one (calculate base paring probabilities and consensus structures together), the base paring probabilities are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge); 

when calculating base paring probabilities, the raw base paring probabilities .col file from "scanning" mode output are used as input. Then for position i, the paired probability of it is 1 minus the sum of the two cells in the corresponding line in .col file. i.e.:
paired prob{i}=1-sum(prob{i,1}, prob{i,2}) 
where prob{i,1} stands for the prob. of position i for being loop/bulge, where prob{i,2} stands for the prob. of position i for being non-structured

when calculating consensus structures, the raw consensus structures .col file from the "folding" mode output are used as input. Then for position i, the structural frequency of it is the "posterior Probabilities" (COL 20 in folding output .col file), instead of simply counting the number (plus 1) of appreances as decoder_midfd_batch.pl (older version: decoder_fd_batch.pl) did.



highlight:
#based on ppfold_bp.pl and ppfold_fd.pl: 
#0. a combination of previous _bp.pl and _fd.pl functions, output both results.
#1. in "scanning" mode, the paired probability for each position in the alignment, is calculated by 1 minus the sum of the two cells in the corresponding line.
#2. in "folding" mode, the NPL frequencies of the consensus structure for the sequence is calculated by summing the "posterior Probabilities" (COL 20 in folding output .col file) instead of simply counting the number of appreances
#3. Besides, the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 


old versions d.1, d.1.1 and d.1.2 are calculated based on simple classification of background sites and binding sites, no further dividing into N, P, L.

Besides, for old versions, the NPL frequencies of the consensus structure for the sequence is calculated by simply counting the number of appreances (N,P,L respectively), then divided by the number of total positions (either # of 3'UTR sites or # of binding sites)

for old versions d.1, d.1.1 and d.1.2, decoder_midbp_batch.pl (older version: decoder_bp_batch.pl) calculates the base pairing probabilities and decoder_midfd_batch.pl (older version: decoder_fd_batch.pl) calculates the structural compositions 
  
decoder_midbp_batch.pl (older version: decoder_bp_batch.pl) and decoder_midfd_batch.pl (older version: decoder_fd_batch.pl) are similar to the two _batch scripts for the above two programs (alifold and ppfold). 





d.1 base pairing probabilities
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl decoder_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out 




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out




NOTE:
It calls the single file version decoder_bp.pl which is similar to the corresponding script _bp.pl for ppfold. decoder_bp.pl requires two arguments (input binding sites .pos file, input bp .col file, protein, optional output statistics .bp file). For decoder_bp.pl and decoder_fd.pl, since decoder runs with parameters: chunk size=300 and step size=100, there are some regions of the sequence have computed for more than once. To deal with that, in decoder_bp.pl, average all the base pairing probabilities for every such position to get the final probability.


usage:
decoder_bp_batch.pl requires three arguments (input .pos file folder, input bp .col file folder, input motif file, output statistics files folder, optional:output position file).







d.1.1 base pairing probabilities, specifically for Pumilio protein
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/


perl decoder_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_Pumilio


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_Pumilio


NOTE:
correct the index calculatin; specifically for Pumilio protein; calculate the base pairing prob. from Reciprocal of Prob(unpaired) to 1-Prob(unpaired)




d.1.2 use the most middle (centered) one for overlapped base pairing probabilities annotaions, instead of taking the average
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

perl decoder_midbp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_Pumilio


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_Pumilio


NOTE:
when using the sliding window, there are many sites with overlapped annotations (eg. chunk =300, step=100, then minimum annotation: once, maximum annotation=3 times), use the annotaion in the middle (i.e. the most centered one), instead of averaging all the overlapped values (for bp) or using the one with highest appreances (for fd).


double check:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midbp.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0078004.col Pumilio
all_columns=0.139556405988308
all=0.153070328588039
un-bp prob. at bs 48 is 0.99547
un-bp prob. at bs 49 is 0.979455
un-bp prob. at bs 50 is 0.830489
un-bp prob. at bs 52 is 0.984388
un-bp prob. at bs 53 is 0.4696463
un-bp prob. at bs 54 is 0.4020817
un-bp prob. at bs 55 is 0.39322053
un-bp prob. at bs 56 is 0.39072431
bs=0.319315645

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midbp.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0100666.col Pumilio
all_columns=0.20842723477876
all=0.230594822267903
un-bp prob. at bs 16 is 0.37677182
un-bp prob. at bs 17 is 0.16099023
un-bp prob. at bs 18 is 0.19497049
un-bp prob. at bs 19 is 0.9140328
un-bp prob. at bs 20 is 0.945581
un-bp prob. at bs 21 is 0.9768388
un-bp prob. at bs 22 is 0.6650348
un-bp prob. at bs 23 is 0.4885969
bs=0.409647895


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midbp.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0071068.col Pumilio
position1077:offset277:line2731:unpairedProb0.3349972
position1077:offset177:line2937:unpairedProb0.254368849644
position1077:offset77:line3143:unpairedProb0.310715000000208
all_columns=0.411385154015293
all=0.383064052949698
un-bp prob. at bs 1077 is 0.254368849644
un-bp prob. at bs 1078 is 0.9752705688
un-bp prob. at bs 1079 is 0.95974755
un-bp prob. at bs 1080 is 0.95227197215
un-bp prob. at bs 1081 is 0.82817860883
un-bp prob. at bs 1082 is 0.10144074059
un-bp prob. at bs 1083 is 0.0966593505
un-bp prob. at bs 1084 is 0.7894373148
un-bp prob. at bs 1168 is 0.163838000008007
un-bp prob. at bs 1169 is 0.21915500000657
un-bp prob. at bs 1170 is 0.397612000006343
un-bp prob. at bs 1171 is 0.460272000006219
un-bp prob. at bs 1172 is 0.678830000002707
un-bp prob. at bs 1173 is 0.777932000000944
un-bp prob. at bs 1174 is 0.804264000000334
un-bp prob. at bs 1177 is 0.942475000000242
un-bp prob. at bs 5629 is 0.392596397035
un-bp prob. at bs 5630 is 0.377041431959
un-bp prob. at bs 5631 is 0.297015198167
un-bp prob. at bs 5632 is 0.48560850323
un-bp prob. at bs 5633 is 0.56921080909
un-bp prob. at bs 5634 is 0.53147394853
un-bp prob. at bs 5635 is 0.35626323628
un-bp prob. at bs 5636 is 0.37891224396
un-bp prob. at bs 6294 is 0.808968
un-bp prob. at bs 6295 is 0.819341
un-bp prob. at bs 6296 is 0.808199
un-bp prob. at bs 6297 is 0.846669
un-bp prob. at bs 6298 is 0.452422
un-bp prob. at bs 6299 is 0.372566
un-bp prob. at bs 6300 is 0.353247
un-bp prob. at bs 6303 is 0.932009
bs=0.431772008637614







d.2 structural compositions
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl decoder_fd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold all.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_fd




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/all.motif  
     
output:
      /ubc/cs/home/s/sywhen using the sliding window, there are many sites with overlapped annotations (eg. chunk =300, step=100, then minimum annotation: once, maximum annotation=3 times), use the annotaion in the middle (i.e. the most centered one), instead of using the structure annotaion that appears the most of time (if there are more than one structure symbols, randomly select one)ang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_fd




NOTE:
It calls the single file version decoder_fd.pl which is similar to the corresponding script _fd.pl for ppfold. decoder_fd.pl requires two arguments (input binding sites .pos file, input folding .col file, protein, optional output statistics file). For decoder_bp.pl and decoder_fd.pl, since decoder runs with parameters: chunk size=300 and step size=100, there are some regions of the sequence have computed for more than once. To deal with that, in decoder_fd.pl, calculate the occuring counts for all the possible structure annotation (base paired, loop/bulge, or unstructured) for every such position. So for each of these positions the one structure annotation occures for the most of times would be representing the structure of this position; if there is a tie between two structures for this position, randomly select one.


usage:
decoder_fd_batch.pl requires three arguments (input .pos file folder, input fd .col file folder, input motif file, output statistics files folder, optional:output position file).




d.2.1 use the most middle (centered) one for overlapped structural annotaions, instead of using the structure annotaion that appears the most of time
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/




perl decoder_midfd_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_fd_Pumilio




input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif  
     
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/decoder/out_fd_Pumilio 
      
      
NOTE:
when using the sliding window, there are many sites with overlapped annotations (eg. chunk =300, step=100, then minimum annotation: once, maximum annotation=3 times), use the annotaion in the middle (i.e. the most centered one), instead of using the structure annotaion that appears the most of time (if there are more than one structure symbols, randomly select one)




double check:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midfd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0078004.col Pumilio
position:36 structure:36,(
position:36 choose:(
paired sites=11
number of sites=50+1
paired columns=12
number of columns=64+1
paired rate over all columns=0.184615384615385
paired rate overall=0.215686274509804
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midfd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
position:296 structure:296,NS;196,(;96,(
position:296 choose:(
paired sites=87
number of sites=332+1
paired columns=179                                                                                                                             
number of columns=654+1                                                                                                                        
paired rate over all columns=0.273282442748092
paired rate overall=0.261261261261261                                                                                                          
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5                                                                                                          
unstructured rate in binding sites=0


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_midfd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0071068.col Pumilio
position:1077 structure:277,);177,.;77,(
position:1077 choose:.
paired sites=1623
number of sites=3641+1
paired columns=3468
number of columns=7331+1
paired rate over all columns=0.472995090016367
paired rate overall=0.445634266886326
paired rate in binding sites=0.625
loop/buldge rate in binding sites=0.375
unstructured rate in binding sites=0





d.3 both probabilities and structrural annotation with NPL
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching






NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script is based on decoder_midbp_batch.pl and decoder_midfd_batch.pl: 
  #0. a combination of previous _midbp_batch.pl and _midfd_batch.pl functions, output both results.
  #1. the probabilities and structures are calculated according to different regions for both (3'UTR) background sites and binding sites: N (un-structured region), P (paired), L (loop/bulge) 
It calls the script decoder_NPL.pl (see below) to deal with each single transcript. For the details, see the description for single transcript version: decoder_NPL.pl




############################
successfully manually checked 
############################
syang11@albani:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_NPL_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/ppfold/npl/pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/test/decoder/npl/out 







single transcript version: decoder_NPL.pl
-----------------------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching

perl decoder_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0100666.col  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio


input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio/FBtr0100666.pos
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0100666.col
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif

output:
      screen
      
      
NOTE:
NPL stands for non-structured (N), paired (P) and loop/bulge (L). 
The script calculate base paring probabilities and consensus structures together. And they are calculated according to different regions for both (3'UTR) background sites and binding sites: N (non-structured region), P (paired), L (loop/bulge);

when calculating base paring probabilities, the raw base paring probabilities .col file from "scanning" mode output are used as input. Then for position i, the paired probability of it is 1 minus the sum of the two cells in the corresponding line in .col file. i.e.:
paired prob{i}=1-sum(prob{i,1}, prob{i,2})  (*)
where prob{i,1} stands for the prob. of position i for being loop/bulge, where prob{i,2} stands for the prob. of position i for being non-structured

when calculating consensus structures, the raw consensus structures .col file from the "folding" mode output are used as input. Then for position i, the structural frequency of it is the "posterior Probabilities" (COL 20 in folding output .col file; or call it likelihood) (**), instead of simply counting the number (plus 1) of appreances as decoder_midfd_batch.pl (older version: decoder_fd_batch.pl) did.

given a transcript, for each of the script's modes: scan (base pairing prob.) and fold (frequency/prior prob.), the major output of the script are the 6 statistics below, respectively 
P_utr	L_utr	N_utr	P_bs	L_bs	N_bs

for scan (base pairing prob.) mode, the base pairing prob. for one of the 6 categories for the transcript is calculated as the average base-wise pairing prob., namely (prob(base1)+prob(base2)+..prob(baseN))/N, where prob(baseI) is calculated as the (*). eg: for P_bs category, the average is (prob(base1)+prob(base2)+..prob(baseN))/N, where baseI is a paired binding site; and N is the number of paired binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the denominator N==0, the output is "NA". 
  
for fold (frequency/prior prob.) mode, the frequency/prior prob./rate for one of the 6 categories for the transcript is calculated as the fraction of "posterior Probabilities"/likelihood, eg: for P_bs category, the fraction is (prob(base1)+prob(base2)+..prob(baseN))/N, where prob(baseI) is the likelihood of baseI being annotated as paired, as described in (**); and N is the number of binding sites in this transcipt. So if there is one category that is abscent, say, P_bs (means there is no paired site in binding sites region), then since the numerator ==0, the output is 0. 

usage:
decoder_NPL.pl requires two arguments (input binding sites .pos file, input bp .col file, input fd .col file, protein, optional output statistics .bp file).






double check:
############################
successfully manually checked
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_NPL.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0078004.col  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0078004.col Pumilio
position:36 structure:36,0.916627,(

position:36 choose:(
its likelihood is 0.916627

bp in utr:29+1
bp in utr:30+1
bp in utr:33+1
bp in utr:34+1
bp in utr:35+1
bp in utr:52+1
bp in bs:52+1
bp in utr:53+1
bp in bs:53+1
bp in utr:54+1
bp in bs:54+1
bp in utr:55+1
bp in bs:55+1
bp in utr:60+1
bp in utr:61+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
Check: number of column positions == number of column likelihoods
paired sites=10+1
number of sites=50+1
paired columns=12
number of columns=64+1
average likelihood over all columns=0.830997953846154
paired likelihood rate in utr sites=0.187105588235294
loop/buldge likelihood rate in utr sites=0.305942392156863
unstructured likelihood rate in utr sites=0.363522254901961
fd likelihood at p_bs 53 is 0.777959
fd likelihood at p_bs 54 is 0.916627
fd likelihood at p_bs 55 is 0.933919
fd likelihood at p_bs 56 is 0.933232
paired likelihood rate in binding sites=0.445217125
fd likelihood at l_bs 48 is 0.915297
fd likelihood at l_bs 49 is 0.855699
fd likelihood at l_bs 50 is 0.623391
fd likelihood at l_bs 52 is 0.894343
loop/buldge likelihood rate in binding sites=0.41109125
nonstructured likelihood rate in binding sites=0

average(all_columns)=0.139556405988308
average(p_utr)=0.490815214181818
average(l_utr)=0.124445799473684
average(n_utr)=0.00205472438047616
un-bp prob. at p_bs 53 is 0.4696463
un-bp prob. at p_bs 54 is 0.4020817
un-bp prob. at p_bs 55 is 0.39322053
un-bp prob. at p_bs 56 is 0.39072431
average(p_bs)=0.58608179
un-bp prob. at l_bs 48 is 0.99547
un-bp prob. at l_bs 49 is 0.979455
un-bp prob. at l_bs 50 is 0.830489
un-bp prob. at l_bs 52 is 0.984388
average(l_bs)=0.0525495
average(n_bs)=NA


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_NPL.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0100666.col  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
position:296 structure:296,0.777237,NS;196,0.562412,(;96,0.562545,(

position:296 choose:(
its likelihood is 0.562412

bp in bs:16+1
bp in bs:17+1
bp in bs:21+1
bp in bs:22+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
Check: number of column positions == number of column likelihoods
paired sites=86+1
number of sites=332+1
paired columns=179
number of columns=654+1
average likelihood over all columns=0.614943902442747
paired likelihood rate in utr sites=0.0742074036036036
loop/buldge likelihood rate in utr sites=0.228545447447447
unstructured likelihood rate in utr sites=0.355412600900901
fd likelihood at p_bs 17 is 0.068146
fd likelihood at p_bs 18 is 0.0681767
fd likelihood at p_bs 22 is 0.0759179
fd likelihood at p_bs 23 is 0.0760108
paired likelihood rate in binding sites=0.036031425
fd likelihood at l_bs 16 is 0.142238
fd likelihood at l_bs 19 is 0.833621
fd likelihood at l_bs 20 is 0.846157
fd likelihood at l_bs 21 is 0.914528
loop/buldge likelihood rate in binding sites=0.342068
nonstructured likelihood rate in binding sites=0

average(all_columns)=0.20842723477876
average(p_utr)=0.635851139122029
average(l_utr)=0.190959852549828
average(n_utr)=0.0125885447479921
un-bp prob. at p_bs 17 is 0.16099023
un-bp prob. at p_bs 18 is 0.19497049
un-bp prob. at p_bs 22 is 0.6650348
un-bp prob. at p_bs 23 is 0.4885969
average(p_bs)=0.622601895
un-bp prob. at l_bs 16 is 0.37677182
un-bp prob. at l_bs 19 is 0.9140328
un-bp prob. at l_bs 20 is 0.945581
un-bp prob. at l_bs 21 is 0.9768388
average(l_bs)=0.196693895
average(n_bs)=NA


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_NPL.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0071068.col  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0071068.col Pumilio
position:1077 structure:277,0.0109471,);177,0.555466,.;77,0.378017,(

position:1077 choose:.
its likelihood is 0.555466

bp in bs:1077+1
bp in bs:1078+1
bp in bs:1079+1
bp in bs:1080+1
bp in bs:1081+1
bp in bs:1082+1
bp in bs:1083+1
bp in bs:1167+1
bp in bs:1168+1
bp in bs:1169+1
bp in bs:1170+1
bp in bs:5628+1
bp in bs:5629+1
bp in bs:5630+1
bp in bs:5631+1
bp in bs:5632+1
bp in bs:5633+1
bp in bs:5634+1
bp in bs:5635+1
bp in bs:6293+1
Check: number of utr sites == sum of three utr classes (NPL)
Check: number of bs sites == to sum of three bs classes (NPL)
Check: number of column positions == number of column likelihoods
paired sites=1622+1
number of sites=3641+1
paired columns=3468
number of columns=7331+1
average likelihood over all columns=0.515721085504636
paired likelihood rate in utr sites=0.173555135807249
loop/buldge likelihood rate in utr sites=0.266158186820428
unstructured likelihood rate in utr sites=0.128572801592532
fd likelihood at p_bs 1078 is 0.235246
fd likelihood at p_bs 1079 is 0.221901
fd likelihood at p_bs 1080 is 0.254805
fd likelihood at p_bs 1081 is 0.329274
fd likelihood at p_bs 1082 is 0.329984
fd likelihood at p_bs 1083 is 0.278627
fd likelihood at p_bs 1084 is 0.374985
fd likelihood at p_bs 1168 is 0.311452
fd likelihood at p_bs 1169 is 0.327053
fd likelihood at p_bs 1170 is 0.317924
fd likelihood at p_bs 1171 is 0.278633
fd likelihood at p_bs 5629 is 0.161616
fd likelihood at p_bs 5630 is 0.199421
fd likelihood at p_bs 5631 is 0.245986
fd likelihood at p_bs 5632 is 0.248425
fd likelihood at p_bs 5633 is 0.204597
fd likelihood at p_bs 5634 is 0.424908
fd likelihood at p_bs 5635 is 0.551296
fd likelihood at p_bs 5636 is 0.582558
fd likelihood at p_bs 6294 is 0.774887
paired likelihood rate in binding sites=0.2079243125
fd likelihood at l_bs 1077 is 0.555466
fd likelihood at l_bs 1172 is 0.769921
fd likelihood at l_bs 1173 is 0.786998
fd likelihood at l_bs 1174 is 0.776612
fd likelihood at l_bs 1177 is 0.77871
fd likelihood at l_bs 6295 is 0.968711
fd likelihood at l_bs 6296 is 0.965789
fd likelihood at l_bs 6297 is 0.966904
fd likelihood at l_bs 6298 is 0.893994
fd likelihood at l_bs 6299 is 0.893883
fd likelihood at l_bs 6300 is 0.747254
fd likelihood at l_bs 6303 is 0.838236
loop/buldge likelihood rate in binding sites=0.3107024375
nonstructured likelihood rate in binding sites=0

position1077:offset277:line2731:unpairedProb0.3349972
position1077:offset177:line2937:unpairedProb0.254368849644
position1077:offset77:line3143:unpairedProb0.310715000000208
average(all_columns)=0.411385154015293
average(p_utr)=0.596081208448668
average(l_utr)=0.268662460378676
average(n_utr)=0.0942703206006801
un-bp prob. at p_bs 1078 is 0.9752705688
un-bp prob. at p_bs 1079 is 0.95974755
un-bp prob. at p_bs 1080 is 0.95227197215
un-bp prob. at p_bs 1081 is 0.82817860883
un-bp prob. at p_bs 1082 is 0.10144074059
un-bp prob. at p_bs 1083 is 0.0966593505
un-bp prob. at p_bs 1084 is 0.7894373148
un-bp prob. at p_bs 1168 is 0.163838000008007
un-bp prob. at p_bs 1169 is 0.21915500000657
un-bp prob. at p_bs 1170 is 0.397612000006343
un-bp prob. at p_bs 1171 is 0.460272000006219
un-bp prob. at p_bs 5629 is 0.392596397035
un-bp prob. at p_bs 5630 is 0.377041431959
un-bp prob. at p_bs 5631 is 0.297015198167
un-bp prob. at p_bs 5632 is 0.48560850323
un-bp prob. at p_bs 5633 is 0.56921080909
un-bp prob. at p_bs 5634 is 0.53147394853
un-bp prob. at p_bs 5635 is 0.35626323628
un-bp prob. at p_bs 5636 is 0.37891224396
un-bp prob. at p_bs 6294 is 0.808968
average(p_bs)=0.492951356302593
un-bp prob. at l_bs 1077 is 0.254368849644
un-bp prob. at l_bs 1172 is 0.678830000002707
un-bp prob. at l_bs 1173 is 0.777932000000944
un-bp prob. at l_bs 1174 is 0.804264000000334
un-bp prob. at l_bs 1177 is 0.942475000000242
un-bp prob. at l_bs 6295 is 0.819341
un-bp prob. at l_bs 6296 is 0.808199
un-bp prob. at l_bs 6297 is 0.846669
un-bp prob. at l_bs 6298 is 0.452422
un-bp prob. at l_bs 6299 is 0.372566
un-bp prob. at l_bs 6300 is 0.353247
un-bp prob. at l_bs 6303 is 0.932009
average(l_bs)=0.329806429195981
average(n_bs)=NA
__________________________














e. transat
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


NOTE:
transat_bp_batch.pl calculates the base pairing probabilities
for transat, since the program looks for local helices, there are many overlapped helices in the result .transat files. For now, only the base pairing probabilities could be retrived from the results; the consensus structure is not able to be extracted at current stage.



  
e.1 base pairing probabilities for Pumilio
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching


perl transat_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/transat/out_Pumilio

input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/transat_results_7000
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/Pumilio.motif 
      
output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/transat/out_Pumilio

      
NOTE: 
call transat_bp.pl inside the program to process each single .transat file:
transat_bp.pl requires three arguments (input binding sites .pos file, input bp .transat file, protein, optional output statistics .bp file).

in transat_bp.pl:
from the .transat files, 
  1). map the helices onto binding sites, remove helices p-value > 10e-3
  2). for every sequence position in binding sites, get lowest p-value of any helix overlapping this position; assign a p-value=1 to any unpaired position
  3). average p-value across binding site, use log(1-p-value) to indicate the base pairing probability

Since only Pumilio protein is in fly species (all the others are in yeast or human), look specifically into Pumilio




double check:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl transat_bp.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000/FBtr0078004.transat Pumilio
average(all_columns)=0.122954275421539
average(all)=0.156706429458825
bp prob. at bs 48 is 1e-15 : 1(raw)
bp prob. at bs 49 is 1e-15 : 1(raw)
bp prob. at bs 50 is 1e-15 : 1(raw)
bp prob. at bs 52 is 1e-15 : 1(raw)
bp prob. at bs 53 is 0.999003487800001 : 0.000996512199999967(raw)
bp prob. at bs 54 is 0.999003487800001 : 0.000996512199999967(raw)
bp prob. at bs 55 is 0.999003487800001 : 0.000996512199999967(raw)
bp prob. at bs 56 is 0.999003487800001 : 0.000996512199999967(raw)
average(bs)=0.499501743900001


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl transat_bp.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000/FBtr0100666.transat Pumilio
average(all_columns)=0.0808826554751147
average(all)=0.15909351152012
bp prob. at bs 16 is 0.999784977100001 : 0.000215022899999973(raw)
bp prob. at bs 17 is 0.999784977100001 : 0.000215022899999973(raw)
bp prob. at bs 18 is 0.999784977100001 : 0.000215022899999973(raw)
bp prob. at bs 19 is 0.999784977100001 : 0.000215022899999973(raw)
bp prob. at bs 20 is 1e-15 : 1(raw)
bp prob. at bs 21 is 1e-15 : 1(raw)
bp prob. at bs 22 is 0.999784977100001 : 0.000215022899999973(raw)
bp prob. at bs 23 is 0.999784977100001 : 0.000215022899999973(raw)
average(bs)=0.749838732825001


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl transat_bp.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/research/irmtraud/people/syang11/work/20120626/transat_results_7000/FBtr0071068.transat Pumilio
average(all_columns)=0.230691107976397
average(all)=0.0554486245980798
bp prob. at bs 1077 is 1e-15 : 1(raw)
bp prob. at bs 1078 is 1e-15 : 1(raw)
bp prob. at bs 1079 is 1e-15 : 1(raw)
bp prob. at bs 1080 is 1e-15 : 1(raw)
bp prob. at bs 1081 is 1e-15 : 1(raw)
bp prob. at bs 1082 is 1e-15 : 1(raw)
bp prob. at bs 1083 is 1e-15 : 1(raw)
bp prob. at bs 1084 is 1e-15 : 1(raw)
bp prob. at bs 1168 is 1e-15 : 1(raw)
bp prob. at bs 1169 is 1e-15 : 1(raw)
bp prob. at bs 1170 is 1e-15 : 1(raw)
bp prob. at bs 1171 is 1e-15 : 1(raw)
bp prob. at bs 1172 is 1e-15 : 1(raw)
bp prob. at bs 1173 is 1e-15 : 1(raw)
bp prob. at bs 1174 is 1e-15 : 1(raw)
bp prob. at bs 1177 is 1e-15 : 1(raw)
bp prob. at bs 5629 is 1e-15 : 1(raw)
bp prob. at bs 5630 is 1e-15 : 1(raw)
bp prob. at bs 5631 is 1e-15 : 1(raw)
bp prob. at bs 5632 is 1e-15 : 1(raw)
bp prob. at bs 5633 is 1e-15 : 1(raw)
bp prob. at bs 5634 is 1e-15 : 1(raw)
bp prob. at bs 5635 is 0.999604154700001 : 0.000395845300000031(raw)
bp prob. at bs 5636 is 0.999604154700001 : 0.000395845300000031(raw)
bp prob. at bs 6294 is 1e-15 : 1(raw)
bp prob. at bs 6295 is 1e-15 : 1(raw)
bp prob. at bs 6296 is 1e-15 : 1(raw)
bp prob. at bs 6297 is 1e-15 : 1(raw)
bp prob. at bs 6298 is 1e-15 : 1(raw)
bp prob. at bs 6299 is 1e-15 : 1(raw)
bp prob. at bs 6300 is 1e-15 : 1(raw)
bp prob. at bs 6303 is 1e-15 : 1(raw)
average(bs)=0.062475259668751





statistics about fly genome (gene #, transcripts #)
-------------------------
http://flybase.org/static_pages/docs/release_notes.html

Protein coding transcripts
27538
2828
3' untranslated regions
19317
472







######
# task 4: cross check the previous procedure
######

update: 20120929

questions
1. rnaalifold_dp2pairing_probs
line 48, why use the squared base-pairing probability of the paire to calculate the individual position base-pairing probability




ppfold crashes for FBtr0072016.fasta 
-------------------------------------------
directory: ~/Desktop/syang11/work/20120626/scripts


syang11@fire:~/Desktop/syang11/work/20120626/scripts> java -jar PPfold-v3-0.jar /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0072016.fasta -e                                                                                                 
**************                                                                                                                                 
Running PPfold version 3.0
Checking input arguments...                                                                                                                    
Attempting to read and parse files...
/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0072016.fasta                                     
All files read.
Results will be written to /ubc/cs/research/irmtraud/people/syang11/work/20120626/scripts                                                      
Starting algorithm...                                                                                                                          
Total number of columns predicting structure on: 0                                                                                             
Number of sequences: 12                                                                                                                        
Generating tree by neighbour-joining...                                                                                                        
TOTAL TIME ELAPSED IN NEIGHBOUR-JOINING: 0 seconds                                                                                             
Checking data...                                                                                                                               
Fatal error                                                                                                                                    
An error occured! Information is given below. If the problem persists or you                                                                   
have a question, please email the following text to zs@mb.au.dk and describe 
what you did.                                                                                                                                  
PPfold version 3.0                                                                                                                             
Platform: Linux, version 3.1.10-1.16-default                                                                                                   
JVM: Oracle Corporation, JRE version 1.7.0_07                                                                                                  
                                                                                                                                               
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0:                                                                                        
java.util.ArrayList.rangeCheck(ArrayList.java:604)
java.util.ArrayList.get(ArrayList.java:382)
com.ppfold.algo.FoldingProject.checkInput(FoldingProject.java:32)                                                                              
com.ppfold.main.PPfoldMain.fold(PPfoldMain.java:392)                                                                                           
com.ppfold.main.PPfoldMain.run(PPfoldMain.java:215)
java.lang.Thread.run(Thread.java:722) 


NOTE:
not sure why, email




cross check:

randomly choose 6 transcripts as testing cases
FBtr0100666 
FBtr0077815 
FBtr0078004 
FBtr0079188
FBtr0300689
FBtr0071068



a. String matching
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

check sequence derived from UCSC MSA, and binding sites mapping using string_scan.pl

Pumilio motif:	UGUAHAUA


FBtr0100666:

FBtr0100666	protein_coding	exon	19811280	19811766	.	+	.	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"1";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";
FBtr0100666	protein_coding	CDS	19811635	19811766	.	+	0	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"1";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";	protein_id	"FBpp0100128";
FBtr0100666	protein_coding	start_codon	19811635	19811637	.	+	0	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"1";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";
FBtr0100666	protein_coding	exon	19812312	19813101	.	+	.	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"2";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";
FBtr0100666	protein_coding	CDS	19812312	19813101	.	+	0	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"2";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";	protein_id	"FBpp0100128";
FBtr0100666	protein_coding	exon	19821417	19822045	.	+	.	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"3";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";
FBtr0100666	protein_coding	CDS	19821417	19822045	.	+	2	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"3";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";	protein_id	"FBpp0100128";
FBtr0100666	protein_coding	exon	19822120	19822623	.	+	.	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"4";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";
FBtr0100666	protein_coding	CDS	19822120	19822287	.	+	0	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"4";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";	protein_id	"FBpp0100128";
FBtr0100666	protein_coding	stop_codon	19822288	19822290	.	+	0	gene_id	"FBgn0013799";	transcript_id	"FBtr0100666";	exon_number	"4";	gene_name	"Deaf1";	gene_biotype	"protein_coding";	transcript_name	"Deaf1-RB";

chr3L	19822290	19822623	FBtr0100666	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0100666.fasta Pumilio.motif FBtr0100666_red.pos
GCAACGTAACGAAATGTACATACAAATTTTACTACTAATTAATACGATTATAGGAAGTCGACCCCCCCTCCCCCAAGTCGCTAAAGTCCTTGCAGTTCGGTTCAGGTCAAACACCTGTAGTCCACTCCCACTCCCTTCCCCCTCGACCCCTCTCTTCCCCCAAAGTTCCCATTAGAAGGCCTGCATCCTCTTAGACGTATGTCCTACATTAATGTAATTCTTAACGTACATATAACTATATAAATATATATACATTTTACTATTGAACGTAGGGCAAGCCAGCAAAGAAAAAAAAAATAACAAAAAACAAGCGAAACGAAAGTAAAATTAATT

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################





FBtr0077815:

FBtr0077815	protein_coding	exon	1982220	1982498	.	+	.	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"1";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";
FBtr0077815	protein_coding	CDS	1982312	1982498	.	+	0	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"1";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";	protein_id	"FBpp0077491";
FBtr0077815	protein_coding	start_codon	1982312	1982314	.	+	2	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"1";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";
FBtr0077815	protein_coding	exon	1982547	1983960	.	+	.	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"2";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";
FBtr0077815	protein_coding	CDS	1982547	1983960	.	+	2	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"2";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";	protein_id	"FBpp0077491";
FBtr0077815	protein_coding	exon	1984019	1984143	.	+	.	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"3";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";
FBtr0077815	protein_coding	CDS	1984019	1984143	.	+	1	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"3";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";	protein_id	"FBpp0077491";
FBtr0077815	protein_coding	exon	1984206	1984514	.	+	.	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"4";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";
FBtr0077815	protein_coding	CDS	1984206	1984390	.	+	2	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"4";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";	protein_id	"FBpp0077491";
FBtr0077815	protein_coding	stop_codon	1984391	1984393	.	+	0	gene_id	"FBgn0031379";	transcript_id	"FBtr0077815";	exon_number	"4";	gene_name	"CG7289";	gene_biotype	"protein_coding";	transcript_name	"CG7289-RA";

chr2L	1984393	1984514	FBtr0077815	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0077815.fasta Pumilio.motif FBtr0077815_red.pos
TCCTAGTTGTATATAAAAATTGGATGCTAGTAATATATGATTATCTAAATGCGAACACAAAGTTCTTCTGCTTTCTGTTACATCTGTTCATTTTTCATAAAAAATACGAATCGTATTTACT

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0077815.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.seq Pumilio
paired sites=0
number of sites=120+1
paired columns=0
number of columns=270+1
paired rate over all columns=0
paired rate overall=0
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1





FBtr0078004:

FBtr0078004	protein_coding	exon	776536	776892	.	+	.	gene_id	"FBgn0040725";	transcript_id	"FBtr0078004";	exon_number	"1";	gene_name	"CG13946";	gene_biotype	"protein_coding";	transcript_name	"CG13946-RA";
FBtr0078004	protein_coding	CDS	776542	776838	.	+	0	gene_id	"FBgn0040725";	transcript_id	"FBtr0078004";	exon_number	"1";	gene_name	"CG13946";	gene_biotype	"protein_coding";	transcript_name	"CG13946-RA";	protein_id	"FBpp0077669";
FBtr0078004	protein_coding	start_codon	776542	776544	.	+	0	gene_id	"FBgn0040725";	transcript_id	0.367598	0.00917382"FBtr0078004";	exon_number	"1";	gene_name	"CG13946";	gene_biotype	"protein_coding";	transcript_name	"CG13946-RA";
FBtr0078004	protein_coding	stop_codon	776839	776841	.	+	0	gene_id	"FBgn0040725";	transcript_id	"FBtr0078004";	exon_number	"1";	gene_name	"CG13946";	gene_biotype	"protein_coding";	transcript_name	"CG13946-RA";

chr2L	776841	776892	FBtr0078004	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0078004.fasta Pumilio.motif FBtr0078004_red.pos
GAAGCTAATCAAAAACTCTTGTATTAATCGATCCTGTATATAACTAAAGAG

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.seq Pumilio
bp in all:30+1
bp in all:60+1
paired sites=2
number of sites=50+1
paired columns=2
number of columns=64+1
paired rate over all columns=0.0307692307692308
paired rate overall=0.0392156862745098
paired rate in binding sites=0
loop/buldge rate in binding sites=1
unstructured rate in binding sites=0




FBtr0079188:

FBtr0079188	protein_coding	exon	6063018	6063230	.	+	.	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"1";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";
FBtr0079188	protein_coding	CDS	6063023	6063230	.	+	0	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"1";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";	protein_id	"FBpp0078819";
FBtr0079188	protein_coding	start_codon	6063023	6063025	.	+	2	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"1";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";
FBtr0079188	protein_coding	exon	6063283	6063676	.	+	.	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"2";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";
FBtr0079188	protein_coding	CDS	6063283	6063563	.	+	2	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"2";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";	protein_id	"FBpp0078819";
FBtr0079188	protein_coding	stop_codon	6063564	6063566	.	+	0	gene_id	"FBgn0031772";	transcript_id	"FBtr0079188";	exon_number	"2";	gene_name	"CG13994";	gene_biotype	"protein_coding";	transcript_name	"CG13994-RA";

chr2L	6063566	6063676	FBtr0079188	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0079188.fasta Pumilio.motif FBtr0079188_red.pos
AATGTATATATATAATTATAAACGTTAACAACATGGAACCAACTAGCAAGCACTCAGATCTACAAAGACGGTGTTTTTAGGCAGTAAGAACCACTTGGGGATTTGAAATC0.367598	0.00917382

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0079188.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0079188.seq Pumilio
bp in all:154+1
bp in all:155+1
bp in all:197+1
bp in all:198+1
paired sites=4
number of sites=109+1
paired columns=4
number of columns=259+1
paired rate over all columns=0.0153846153846154
paired rate overall=0.0363636363636364
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1







FBtr0300689:

FBtr0300689	protein_coding	exon	7529	8116	.	+	.	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	0.367598	0.00917382exon_number	"1";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";
FBtr0300689	protein_coding	CDS	7680	8116	.	+	0	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	exon_number	"1";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";	protein_id	"FBpp0289913";
FBtr0300689	protein_coding	start_codon	7680	7682	.	+	1	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	exon_number	"1";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";
FBtr0300689	protein_coding	exon	8193	9484	.	+	.	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	exon_number	"2";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";
FBtr0300689	protein_coding	CDS	8193	8607	.	+	1	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	exon_number	"2";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";	protein_id	"FBpp0289913";
FBtr0300689	protein_coding	stop_codon	8608	8610	.	+	0	gene_id	"FBgn0031208";	transcript_id	"FBtr0300689";	exon_number	"2";	gene_name	"CG11023";	gene_biotype	"protein_coding";	transcript_name	"CG11023-RB";

chr2L	8610	9484	FBtr0300689	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0300689.fasta Pumilio.motif FBtr0300689_red.pos
TGTCTTTCGTACCCATTGAAAACGTTGTGGTGCTTGCGCTTTAAAATCTTATATTAGGAAATTATTTTTAAATTTAACCTACACATAACTACCGAAGACATATGCACGTTTATTAATGGGAAATGGCTTAACGACGAGGTCATTAACTTTTACATGTCCTTGCTGACAGAACGGTCGGAGAAGAGATCTGGCGTACTTCCCGCCACTTACGCCATAAACACATTCTTCGTGCCCCGCCTCCTGCAAGCTGGGCATGCAGGCATTAAGCGCTGGACTCGCAAAGTGGACTTGTTCAGCAAGGACATAATCCCGGTACCAGTGCACTGCAACGGCGTCCACTGGTGCATGGCCATCATACACTTGCGGAACAAGACAATCCGGTATTATGACTCAAAGGGAAAGCCAAACCGACCAGTGCTGGACGCTCTAGAGAAATATCTACGCGAAGAGTCAATATTCAAGCCCAAAAAGCAGTTTGATACCAGCGATTTTGTTATTGAGAGCGTGCAGAATATACCACGACAGTTAGATGGCAGCGATTGCGGTATCTTCAGCTGCATGTTCGCCGAGTATATAACGTGTGATGTGCCAATTACCTTTACCCAGTCGGAAATGTTGTACTTCCGCAAGAAGATGGCTCTAGAAATCGTCGACGGAGAGTTGTGACAGTAGAATCACACAGCTACGCAAGAATGTGGAGAATCCAGTTTAGTTATTTTTACAAATCTTACGTAAACACTCCAAGCATGAATTCGCAACAAGTGCTTAGCTATTTAATTGAATTGAGCTGGCCGAGAGATGTGCTGGTGCAATAACTTGTTCTCATATCTGATTGTAACAGAGAATCTAGTTTTTCAATAAAATTTCCCCAAGT

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.seq Pumilio
NA




FBtr0071068:

FBtr0071068	protein_coding	exon	7503181	7503571	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"1";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7503449	7503571	.	+	0	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"1";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	start_codon	7503449	7503451	.	+	0	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"1";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	exon	7539813	7541012	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"2";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7539813	7541012	.	+	0	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"2";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	exon	7554439	7554923	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"3";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7554439	7554923	.	+	0	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"3";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	exon	7554993	7555171	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"4";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7554993	7555171	.	+	1	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"4";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	exon	7556679	7557587	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"5";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7556679	7557587	.	+	2	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"5";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	exon	7564924	7565341	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"6";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7564924	7565341	.	+	2	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"6";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	exon	7565437	7572292	.	+	.	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"7";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";
FBtr0071068	protein_coding	CDS	7565437	7568647	.	+	1	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"7";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";	protein_id	"FBpp0071026";
FBtr0071068	protein_coding	stop_codon	7568648	7568650	.	+	0	gene_id	"FBgn0004198";	transcript_id	"FBtr0071068";	exon_number	"7";	gene_name	"ct";	gene_biotype	"protein_coding";	transcript_name	"ct-RA";

chrX	7568650	7572292	FBtr0071068	0	+

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl string_scan.pl  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/3UTR_singlePos_aln_UCSC1_7000/FBtr0071068.fasta Pumilio.motif FBtr0071068_red.pos
AGTAAAAAAATTAACAGAACTAAATATAAATTCAGTGCAATGTGTAGAGAAGCGGAGATGGTTAACGCGTTTACTTGTGATTAAGTTTGAATGTTTAGACGATGTGAGGAGCCAGGAGACATACATACATATATATATTAATAGCACTTAGGCTCTAGAAAACTATATTTTTTTGTTTTTTTTTTATTAAACATTAACTACTAAATATAGGCGTTAGTTGTAGCCGTTAAGGTAGCCTTAGGTTGAGGAGTTGTAATAGTTGTAGCTAAAAGTTTAGAGACGCTATGCGATGATGATAATTATGATGAGAGAGCAGCGCAAAAGTATTAATGAGAAAATAAACCCCATTTAAGAACCCCGACTTGCCGAAGAACTTTAACCAAAATGTCGAGATCCAATTGATAGTGAAAGATTTGATCTTGCAAAGATTTTCGATTTCGATTTTTCGATTTGTTTCTACTTGAAGACTGTAAGCAAAGGCGGTAGGATTGATAACTACAAACGTAATTCTATTCTACATACATTTTTTTTTTAAGAAACTATTATATGATTATTAGCAGTTTAGCTGGTTAAGTGTAAATAAATAATTAAATGAATGATGATGACGATTGATAGTGTACATAGATTTCTCGCGAGGCATGATCTTGCTATCGTTCTTCCTAAAAAAAAATCCTACCTTCTACCACCCTCAGCAACCGACTTGTTTAACTATCTTTTGATCTCAAGCAAAAAAACAAAAAAAAACTAATACGAAACGAAACAAAACAATGCAGAAATTGAAAGGGAAATGTGGAAGGCATGGAGTGAAAATCCAAAGTAAAAGATAGTTAAAAGCAAAGCTGAATTGCAGCGAGCAGAAAAGTTTTCCCCTATTTTGTTGCCCAAATAAAATAAAAATATGTCGATGAGAAAAGGAAAGGCAAATTGAGAAAAAAAATATATAACAATAATCTTTGTAAATTCTGAATTTACATAAAAAATCACACACATAAAATACACCTACACAACAAAAACACACACACAAATTGAGTAATTCATAATTATAGCAAAAATAAACATGCAAAATGCACTAAATTATTTATAATCTAATTATTCTATACATAATTATATATAATTATACATATGCATATAAAGCGAAAAATGAAAAGTTTATCAACTTAGCCTAACGGTAATTTAAATTTGCATTAAACCGTAGCATAAATAACAAAAATTTTTTTCTGTGAATCTAAAATATTTAAAGGTAAAAATAGAAAACACAAACCGCATATCGTACTAAAGAAATTACACAAAAGAAAAAATATAAAAAAATAAGAAAACAGTAATCTAAGACAGCCAATTTTTTTTTTGCCTAGATCTTAAGTTTACAACGTAATCGTAATATTAAATAAATTACAAAATAAACAAACAAAAAAAATAAAAAAAAGAATCTGTTTTCCTATATGAACAAGAGACAACATAGAAAACCAAGAAGAGCAAAAAACAAATTTTAAGAAATATTTAAACCTTTTTTTTCCTAGGCTAAATGTTTAAGCTAAACAAAAAACAGATTTCTCAAACCAAAAAAGCTAAATAAATTAAAATTACACGAAACCATTTTTGCATAGGCCCAAAATTCGCCGCGTTATTATTATTATTATTACATACATATATATGAGACGAGTAATAAAGAGAAACAAATTACCAACATATACCAAACACATTTCAAAAACCTTAAAAAAATACAATTTGCGAAATTTATACAAGAAACAAAACACGAAACAACTAAAAATATTTTTAAAAAATATGCAAACAACTTTTGCCCGCTGTCAGCGAAATTTGTTACGATCTTCTTAAAATTATTATTATTTTTATCTTTTCCTCCTGTTTGCGTTTAAGTTATCGAGTTAAATACTTTGCATTTTCATACGCTTTAGCTAATGAATAAATTACATCTATATGGATATGAGATAAACAAGTAATAAATAAATATATATAAAATATATACAAAATATGGATAAAGAAAGTTGAGCTGAGACAAAAACCAACACGACACGTTGACATGGTTCGCAACTTTTAGTTTTAATTATTTCTTAAATACAATTTTTTTGTCTTCGTATTTTTATTATTATTATTATTATTGTAATTATAATATAAATATTATATATATATATATATATATATATATACATTAAAAGAAGGAAAAAGCGAATACACAAGCGACAACATACCAATAATACATGAACATGATCGAAACTTTATCAAATAAAAATGTTTTCTTAAACGAAAAAAAACCCATCGATATCCTTTTTTATTTTCCTACAACAAAAAACCACCAAAATCGCAGAAAATGCCGCTGAGGAACGAAAGTACTCGCAATCTCTTGTAATCCCGCAATCTCGTGACCCCGAATCCCCAAAAAACCCAAAAAAAAACGTCCGCCGGAAGCTCCAACCCTTTCCCCCAAAACAAGAAAAAATAAACATCAGACACAGAAACACTCTGAAATTGTATAGCATACTTTTGGGAGTTCCGAGATGTCGAAATGCTCCCTCGCCACCCAGCCGATATAAGCCTATATAGGACCTAGTTATATATATGCATGATCAGCATTTTTATACATACCATTAATAGTTATATTTATTAACAATATGCGGTGCTAGCCAAGTAAAGTAAAACGTACAGATATTAATGAAGAAAATGCGCTGACCCACATTATATGTATACATAACAACATACATACATATATATGTTAGTAAAGTGGGCAGTGGAAATTTTTTGCATAGATCCGTACTGCTCCAATAAAAACATACGTAATTAATTTTAAACAAAGCAATTAAAACGGAAACGTTTGTTGATTCAAATCAAAAGAGTTGAGCTGTAAATACGATATATATGAAATTATCCTTCCAATTCGAAACACACACACATACATTTTTTATACCGACTAAGAAATGATCTGTTTTTTTAGACCTTTAGACACAGATATCTGAATATACATGAATATAAATGAATTTAAGCCCATGGTGATATGCGCACACACTCCACTCACTTTGCCAATTGTCCTACCTTTTCTTCTTTTCCACCCACTACATATTAGCTGTACATAAGAAAATGAAAGACCGAAATATAGAGGAATCCCAAATTTATGGATCAGAAAGTAATAAAATGAGAAAACAAAAACCAGACCATATCAATATTATGTTTAAAGCATAAAGAGTAAGAAGTCGAAAGGATATACAAGCATGTTATTTTAGCAGATCCGAAAACAAGTAAATAAAAACAGACTTGAAATAACCATATAGTGTTAACCAGCAGATATACATATATACAAAAGTCTCTATATAAAATAACGACATATATTAAAAAAATGCATTCAGTACTGTTGAATGATGATGAGATCCAGAACAAGAACAAGAAAAAGAACCGTAGTTAACACATAGAACAGATCTATTGAACCGATACCAAACCGATTCCTTTAGTTTTCAACCGACAAAGATCTTGATGAGGACAGCCAGCTCCGTTTTTCAGTTTGAAATCCGCCCAAAAATGCAATGAACATAAAAAAATGAAAACCAGAACAAAATAAATGCAAAACGAAGCGAGGAGAGTAACAAAAATTAAGGAGATTCTTAAGCAAATTAGCAAAATGTGCCCAAAACAAAC

############################
correctly map back to UCSC genome browser
correctly match the .pos by manually search for motif
############################





b. ppfold
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

ppfold


b.1 base pairing

check ppfold_bp.pl

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.bp Pumilio
average(all_columns)=0.000136697223441292                                                                                                      
average(all)=0.000268878922985123                                                                                                              
bp prob. at 16 is 0.000824193161135421                                                                                                         
bp prob. at 17 is 0.00124742580547011
bp prob. at 18 is 0.00108447949412214                                                                                                          
bp prob. at 19 is 0.000277482125741986
bp prob. at 20 is 7.49233961395435e-05
bp prob. at 21 is 0.000133776653719086
bp prob. at 22 is 0.000226293963293437
bp prob. at 23 is 0.000758461936528246
average(bs)=0.000578379567018746

############################
correctly checked ppfold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers (take values for binding sites as example)
############################




syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0077815.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.bp Pumilio                                                       
average(all_columns)=0.000116099313011143
average(all)=0.00026002408120677                                                                                                               
bp prob. at 8 is 0.000234040743228454                                                                                                          
bp prob. at 9 is 0.000488317767720852                                                                                                          
bp prob. at 10 is 0.000565511117467383                                                                                                         
bp prob. at 11 is 0.000196723582495686                                                                                                         
bp prob. at 12 is 0.000998394351813731                                                                                                         
bp prob. at 13 is 0.00209104616741329                                                                                                          
bp prob. at 14 is 0.0012510896102862                                                                                                           
bp prob. at 15 is 0.000703427480132845                                                                                                         
average(bs)=0.000816068852569805

############################
correctly checked ppfold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers (take values for binding sites as example)
############################





syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.bp Pumilio
average(all_columns)=0.00113373845339552
average(all)=0.00144496077393547
bp prob. at 48 is 0.000427626747485769
bp prob. at 49 is 0.00998559246637324
bp prob. at 50 is 0.00177054983257232
bp prob. at 52 is 8.09948794584769e-05
bp prob. at 53 is 0.0002324736892748
bp prob. at 54 is 0.00260578490898463
bp prob. at 55 is 0.000513588552280692
bp prob. at 56 is 0.00437653729776925
average(bs)=0.0024991435467749

############################
correctly checked ppfold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers (take values for binding sites as example)
############################





syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0079188.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0079188.bp Pumilio
average(all_columns)=0.00019580628330109
average(all)=0.000434402176659548
bp prob. at 3 is 0.000807282026335196
bp prob. at 4 is 3.79728529803269e-05
bp prob. at 5 is 0.000147401444941273
bp prob. at 39 is 1.67187155307731e-05
bp prob. at 40 is 0.000473821854328465
bp prob. at 41 is 6.570030118385e-05
bp prob. at 42 is 0.000765148424114619
bp prob. at 43 is 0.000595367579829308
average(bs)=0.000363676649905476

############################
correctly checked ppfold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers (take values for binding sites as example)
############################





syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.bp Pumilio
NA

############################
correctly checked ppfold_bp.pl for the no string_matching cases (does not contain motif)
############################





syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0071068.bp Pumilio
average(all_columns)=6.16909954425876e-06
average(all)=1.2417859943574e-05
bp prob. at 1077 is 1.36388434260775e-19
bp prob. at 1078 is 6.74035819247991e-06
bp prob. at 1079 is 1.06667893720332e-05
bp prob. at 1080 is 2.70561565604553e-06
bp prob. at 1081 is 1.1191773689492e-06
bp prob. at 1082 is 2.21970266292233e-05
bp prob. at 1083 is 1.62593219909064e-05
bp prob. at 1084 is 2.95173409038313e-06
bp prob. at 1168 is 6.37564403306311e-06
bp prob. at 1169 is 1.1454517183536e-05
bp prob. at 1170 is 9.9587296709663e-07
bp prob. at 1171 is 8.22441411726743e-06
bp prob. at 1172 is 4.6715205511812e-06
bp prob. at 1173 is 3.37813657900925e-06
bp prob. at 1174 is 4.80394530596021e-07
bp prob. at 1177 is 9.27881400628814e-06
bp prob. at 5629 is 1.36388434260775e-19
bp prob. at 5630 is 1.36388434260775e-19
bp prob. at 5631 is 1.36388434260775e-19
bp prob. at 5632 is 1.36388434260775e-19
bp prob. at 5633 is 1.36388434260775e-19
bp prob. at 5634 is 1.36388434260775e-19
bp prob. at 5635 is 1.36388434260775e-19
bp prob. at 5636 is 1.36388434260775e-19
bp prob. at 6294 is 1.36388434260775e-19
bp prob. at 6295 is 1.36388434260775e-19
bp prob. at 6296 is 1.36388434260775e-19
bp prob. at 6297 is 1.36388434260775e-19
bp prob. at 6298 is 1.36388434260775e-19
bp prob. at 6299 is 1.36388434260775e-19
bp prob. at 6300 is 1.36388434260775e-19
bp prob. at 6303 is 1.36388434260775e-19
average(bs)=3.3593542896269e-06

############################
correctly checked ppfold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers (take values for binding sites as example)
############################




############################
correctly (and manually) checked for the number
############################




b.2 structure composition

FBtr0100666:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0100666.seq Pumilio
bp in bs:16+1
bp in all:23+1
bp in all:148+1
bp in all:149+1
bp in all:173+1
bp in all:174+1
bp in all:430+1
bp in all:431+1
bp in all:456+1
bp in all:457+1
bp in all:458+1
bp in all:512+1
bp in all:513+1
bp in all:514+1
bp in all:516+1
bp in all:517+1
paired sites=16
number of sites=332+1
paired columns=16
number of columns=654+1
paired rate over all columns=0.0244274809160305
paired rate overall=0.048048048048048
paired rate in binding sites=0.125
loop/buldge rate in binding sites=0.75
unstructured rate in binding sites=0.125

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_bp.pl pos_7000_Pumilio/FBtr0079188.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0079188.bp Pumilio
average(all_columns)=0.00019580628330109
average(all)=0.000434402176659548
bp prob. at 3 is 0.000807282026335196
bp prob. at 4 is 3.79728529803269e-05
bp prob. at 5 is 0.000147401444941273
bp prob. at 39 is 1.67187155307731e-05
bp prob. at 40 is 0.000473821854328465
bp prob. at 41 is 6.570030118385e-05
bp prob. at 42 is 0.000765148424114619
bp prob. at 43 is 0.000595367579829308
average(bs)=0.000363676649905476


############################
manually checked the structural annotation for those binding sites, the base pairing positions, and the numbers for base pairing rate. Correct
############################





FBtr0077815:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0077815.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0077815.seq Pumilio
paired sites=0
number of sites=120+1
paired columns=0
number of columns=270+1
paired rate over all columns=0
paired rate overall=0
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1


############################
manually checked the structural annotation for those binding sites, the base pairing positions, and the numbers for base pairing rate. Correct
############################





FBtr0078004:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0078004.seq Pumilio
bp in all:30+1
bp in all:60+1
paired sites=2
number of sites=50+1
paired columns=2
number of columns=64+1
paired rate over all columns=0.0307692307692308
paired rate overall=0.0392156862745098
paired rate in binding sites=0
loop/buldge rate in binding sites=1
unstructured rate in binding sites=0


############################
manually checked the structural annotation for those binding sites, the base pairing positions, and the numbers for base pairing rate. Correct
############################





FBtr0079188:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0079188.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0079188.seq Pumilio
bp in all:154+1
bp in all:155+1
bp in all:197+1
bp in all:198+1
paired sites=4
number of sites=109+1
paired columns=4
number of columns=259+1
paired rate over all columns=0.0153846153846154
paired rate overall=0.0363636363636364
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1


############################
manually checked the structural annotation for those binding sites, the base pairing positions, and the numbers for base pairing rate. Correct
############################







FBtr0300689:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0300689.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0300689.seq Pumilio
NA

############################
cross checked the structural annotation for those non-binding transcripts (those do not have binding motif matched). Correct
############################



FBtr0071068:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl ppfold_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/ppfold_results_7000/FBtr0071068.seq Pumilio
bp in all:120+1
bp in all:816+1
bp in all:840+1
bp in all:859+1
bp in all:860+1
bp in all:861+1
bp in all:862+1
bp in all:863+1
bp in all:864+1
bp in all:865+1
bp in all:1020+1
bp in all:1021+1
bp in all:1051+1
bp in all:1052+1
bp in all:1055+1
bp in all:1177+1
bp in all:1190+1
bp in all:1192+1
bp in all:1193+1
bp in all:1272+1
bp in all:1273+1
bp in all:1332+1
bp in all:1338+1
bp in all:1339+1
bp in all:1344+1
bp in all:1345+1
bp in all:1379+1
bp in all:1380+1
bp in all:1381+1
bp in all:1382+1
bp in all:1383+1
bp in all:1384+1
bp in all:1385+1
bp in all:1386+1
bp in all:1387+1
bp in all:1388+1
bp in all:1389+1
bp in all:1399+1
bp in all:1471+1
bp in all:1565+1
bp in all:1569+1
bp in all:1570+1
bp in all:1571+1
bp in all:1572+1
bp in all:1573+1
bp in all:1574+1
bp in all:1575+1
bp in all:1576+1
bp in all:1577+1
bp in all:1584+1
bp in all:2368+1
bp in all:2369+1
bp in all:2370+1
bp in all:2371+1
bp in all:2429+1
bp in all:2430+1
bp in all:2451+1
bp in all:2452+1
bp in all:2646+1
bp in all:2674+1
bp in all:2769+1
bp in all:2791+1
bp in all:2798+1
bp in all:2799+1
bp in all:2800+1
bp in all:2944+1
bp in all:2945+1
bp in all:2946+1
bp in all:2947+1
bp in all:2993+1
bp in all:2994+1
bp in all:2995+1
bp in all:2996+1
bp in all:3026+1
bp in all:3027+1
bp in all:3028+1
bp in all:3115+1
bp in all:3116+1
bp in all:3117+1
bp in all:3164+1
bp in all:3165+1
bp in all:3166+1
bp in all:3195+1
bp in all:3196+1
bp in all:3197+1
bp in all:3205+1
bp in all:3206+1
bp in all:3207+1
bp in all:3208+1
bp in all:3231+1
bp in all:3275+1
bp in all:3276+1
bp in all:3280+1
bp in all:3281+1
bp in all:3452+1
bp in all:3454+1
bp in all:3455+1
bp in all:3527+1
bp in all:3528+1
bp in all:3529+1
bp in all:3786+1
bp in all:3788+1
bp in all:3789+1
bp in all:3790+1
bp in all:3792+1
bp in all:3793+1
bp in all:3798+1
bp in all:3799+1
bp in all:3874+1
bp in all:3875+1
bp in all:3876+1
bp in all:3880+1
bp in all:3883+1
bp in all:3884+1
bp in all:3885+1
bp in all:3932+1
bp in all:3936+1
bp in all:3943+1
bp in all:3945+1
bp in all:3946+1
bp in all:3947+1
bp in all:3948+1
bp in all:3949+1
bp in all:3950+1
bp in all:3959+1
bp in all:3960+1
bp in all:3979+1
bp in all:3982+1
bp in all:3983+1
bp in all:3984+1
bp in all:4044+1
bp in all:4045+1
bp in all:4046+1
bp in all:4116+1
bp in all:4117+1
bp in all:4118+1
bp in all:4124+1
bp in all:4125+1
bp in all:4126+1
bp in all:4127+1
bp in all:4227+1
bp in all:4228+1
bp in all:4230+1
bp in all:4231+1
bp in all:4386+1
bp in all:4389+1
bp in all:4390+1
bp in all:4391+1
bp in all:4417+1
bp in all:4418+1
bp in all:4427+1
bp in all:4428+1
bp in all:4439+1
bp in all:4446+1
bp in all:4449+1
bp in all:4450+1
bp in all:4451+1
bp in all:4452+1
bp in all:4453+1
bp in all:4454+1
bp in all:4467+1
bp in all:4468+1
bp in all:4828+1
bp in all:4829+1
bp in all:4838+1
bp in all:4839+1
bp in all:5097+1
bp in all:5131+1
bp in all:5132+1
bp in all:5133+1
bp in all:5134+1
bp in all:5137+1
bp in all:5145+1
bp in all:7107+1
bp in all:7108+1
bp in all:7109+1
bp in all:7110+1
bp in all:7188+1
paired sites=178
number of sites=3641+1
paired columns=178
number of columns=7331+1
paired rate over all columns=0.0242771412984179
paired rate overall=0.0488742449203734
paired rate in binding sites=0
loop/buldge rate in binding sites=1
unstructured rate in binding sites=0


############################
manually checked the structural annotation for those binding sites, the base pairing positions, and the numbers for base pairing rate. Correct
############################





c. decoder
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

decoder


c.1 base pairing

check decoder_bp.pl

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_bp.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0078004.col Pumilio
all_columns=0.860443594011692                                                                                                                  
all=0.846929671411961
bp prob. at bs 48 is 0.99547                                                                                                                   
bp prob. at bs 49 is 0.979455                                                                                                                  
bp prob. at bs 50 is 0.830489                                                                                                                  
bp prob. at bs 52 is 0.984388                                                                                                                  
bp prob. at bs 53 is 0.4696463
bp prob. at bs 54 is 0.4020817                                                                                                                 
bp prob. at bs 55 is 0.39322053                                                                                                                
bp prob. at bs 56 is 0.39072431
bs=0.680684355

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_bp.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0100666.col Pumilio
all_columns=0.795421401533396
all=0.771446788990261
bp prob. at bs 16 is 0.37677182
bp prob. at bs 17 is 0.16099023
bp prob. at bs 18 is 0.19497049
bp prob. at bs 19 is 0.9140328
bp prob. at bs 20 is 0.945581
bp prob. at bs 21 is 0.9768388
bp prob. at bs 22 is 0.6650348
bp prob. at bs 23 is 0.4885969
bs=0.590352105

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_bp.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results/FBtr0071068.col Pumilio
position1076:offset277:line2731:unpairedProb0.3349972
position1076:offset177:line2937:unpairedProb0.254368849644
position1076:offset77:line3143:unpairedProb0.310715000000208
all_columns=0.6231488181186
all=0.643377172362336
bp prob. at bs 1077 is 0.300027016548069
bp prob. at bs 1078 is 0.96595278960007
bp prob. at bs 1079 is 0.933798516666707
bp prob. at bs 1080 is 0.901673590716703
bp prob. at bs 1081 is 0.764263136276707
bp prob. at bs 1082 is 0.112555813530052
bp prob. at bs 1083 is 0.14136131683368
bp prob. at bs 1084 is 0.762809638267093
bp prob. at bs 1168 is 0.297023605669336
bp prob. at bs 1169 is 0.416435931668857
bp prob. at bs 1170 is 0.55397126466878
bp prob. at bs 1171 is 0.665936631002073
bp prob. at bs 1172 is 0.64962866066757
bp prob. at bs 1173 is 0.64440655066698
bp prob. at bs 1174 is 0.631746005666777
bp prob. at bs 1177 is 0.778304708433413
bp prob. at bs 5629 is 0.383029578411667
bp prob. at bs 5630 is 0.385660800186333
bp prob. at bs 5631 is 0.330544916922333
bp prob. at bs 5632 is 0.54116883541
bp prob. at bs 5633 is 0.59700188003
bp prob. at bs 5634 is 0.544757793843333
bp prob. at bs 5635 is 0.32390169646
bp prob. at bs 5636 is 0.333287104686667
bp prob. at bs 6294 is 0.852185628666667
bp prob. at bs 6295 is 0.8584901663
bp prob. at bs 6296 is 0.851115051966667
bp prob. at bs 6297 is 0.8820235645
bp prob. at bs 6298 is 0.59272671
bp prob. at bs 6299 is 0.53398767
bp prob. at bs 6300 is 0.520512576666667
bp prob. at bs 6303 is 0.953053666666667
bs=0.593854463049996


############################
correctly checked decoder_bp.pl for the base un-pairing prob. from .col file to the output average (especially the index transformation since chunk=300, step=100; aln_array_index=offset+step*(chunk_num-1)-1); manually checked the numbers (take values for binding sites as example)
############################





c.2 structure composition

FBtr0100666:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
654		#test the total number
paired sites=87
number of sites=332+1
paired columns=160
number of columns=654+1
paired rate over all columns=0.244274809160305
paired rate overall=0.261261261261261
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
paired sites=87		#test for those overlapped positions which have unique structural annotation 
number of sites=332+1
paired columns=166
number of columns=654+1
paired rate over all columns=0.253435114503817
paired rate overall=0.261261261261261
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
position:1 structure:NS chooseNS		#test for those non-overlapped positions
paired sites=83
number of sites=332+1
paired columns=156
number of columns=654+1
paired rate over all columns=0.238167938931298
paired rate overall=0.249249249249249
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0100666.col Pumilio
position:296 structure:(NS		#test for those overlapped positions which have different structural annotation
position:296 structure:NS,(,( choose(		#test for those overlapped positions which have different structural annotation
paired sites=87
number of sites=332+1
paired columns=183
number of columns=654+1
paired rate over all columns=0.279389312977099
paired rate overall=0.261261261261261
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0


FBtr0078004:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0078004.col Pumilio
position:36 structure:( choose(
bp in all:29+1
bp in all:30+1
bp in all:33+1
bp in all:34+1
bp in all:35+1
bp in bs:52+1
bp in bs:53+1
bp in bs:54+1
bp in bs:55+1
bp in all:60+1
bp in all:61+1
(
paired sites=11
number of sites=50+1
paired columns=12
number of columns=64+1
paired rate over all columns=0.184615384615385
paired rate overall=0.215686274509804
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.5
unstructured rate in binding sites=0


FBtr0071068:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0071068.col Pumilio
position:1076 structure:),.,( choose.
paired sites=1522
number of sites=3641+1
paired columns=3196
number of columns=7331+1
paired rate over all columns=0.435897435897436
paired rate overall=0.417902251510159
paired rate in binding sites=0.53125
loop/buldge rate in binding sites=0.1875
unstructured rate in binding sites=0.28125

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0071068.col Pumilio
position:1077 structure:),.,( choose.
paired sites=1479
number of sites=3641+1
paired columns=3138
number of columns=7331+1
paired rate over all columns=0.427986906710311
paired rate overall=0.406095551894563
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.1875
unstructured rate in binding sites=0.3125

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl decoder_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/scripts/rnadecoder/results_fold/FBtr0071068.col Pumilio
position:1078 structure:.,),. choose.
paired sites=1465
number of sites=3641+1
paired columns=3111
number of columns=7331+1
paired rate over all columns=0.42430441898527
paired rate overall=0.402251510159253
paired rate in binding sites=0.5
loop/buldge rate in binding sites=0.375
unstructured rate in binding sites=0.125



############################
correctly (and manually) checked for the structural composition (especially the overlapped positions since chunk=300, step=100: pick the structural annotation ("().NS") that appears most of the time; if there is a tie, randomly select one, which means the results of the program could be different from time to time, so I generate 10 results to get an idea of the general case)
############################










d. alifold 
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

alifold


d.1 base pairing

perl alifold_bp_batch.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/string_matching/pos_7000_Pumilio /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000 Pumilio.motif /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/alifold/out_Pumilio




check rnaalifold_dp2pairing_probs_shu.pl:

rnaalifold_dp2pairing_probs_shu.pl
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching/

perl rnaalifold_dp2pairing_probs_shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666-alidot.ps FBtr0100666-alidot.bp


input: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666-alidot.ps

output:
FBtr0100666-alidot.bp


NOTE:
the debugged version of Irmi's rnaalifold_dp2pairing_probs.pl. the previous program has a bug when reading /sequence{...} from alidot.ps file: the sequence may stands in multiple lines instead of only one line, the previous program only read one line which is length 255 in alidot.ps's default output. check while(<IN>) chunk for details



syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl rnaalifold_dp2pairing_probs.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666-alidot.ps FBtr0100666-alidot.bp
G_CAACGUAACGAAUUGUACAUACAA_______________________________________________________________________________________AUUUUACUACUAAUU___A__AUACGAUUAUACAAAGU_________UCCCC________CUAA_____________________AGUCCUUGCAG__CG__________CCC______ACCUGUAG_______________
255

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl rnaalifold_dp2pairing_probs_shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666-alidot.ps FBtr0100666-alidot.bp
G_CAACGUAACGAAUUGUACAUACAA_______________________________________________________________________________________AUUUUACUACUAAUU___A__AUACGAUUAUACAAAGU_________UCCCC________CUAA_____________________AGUCCUUGCAG__CG__________CCC______ACCUGUAG__________________UCCCACUCCCUUCCCC_CUCGAC_________________________________________________C_C_____CCCC_CCCCC______________AAAUCCCAU_________UAGCAAGCCUGCA_________UCCUCUUAGACUUAUGUCCUACAUUAAUGUAAUUCUU_AACGUACAUAUAAC__________________________________________________________________UUUACUAUUGAACGUAGGGCAAGCCAGCA____________________________________________________________________________________A____AA_______________
655




syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl rnaalifold_dp2pairing_probs_shu.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004-alidot.ps FBtr0078004-alidot.bp
0.48 0.60 hsb 23 30 0.0011 ubox
0.32 0.60 hsb 48 56 0.0034 ubox
0.16 0.60 hsb 42 49 0.0021 ubox
0.16 0.60 hsb 50 54 0.0021 ubox
0.16 0.20 hsb 49 55 0.0040 ubox
0.32 0.00 hsb 54 61 0.0027 ubox
0.16 0.20 hsb 53 62 0.0023 ubox
0.16 0.20 hsb 55 60 0.0021 ubox
0.16 0.20 hsb 53 60 0.0008 ubox
0.00 0.60 hsb 27 49 0.0010 ubox
GA_G__CUAA__UA_______AAAAACUCUAG_UAU_UAAUCGAUCCUGU_AUAUAACUAUAAAA
65



############################
correctly checked rnaalifold_dp2pairing_probs_shu.pl for the base pairing probability transformation from .ps file to .bp file; manually checked the numbers
############################






check alifold_bp.pl:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_bp.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004.bp Pumilio
average(all_columns)=2.66130177668639e-08
average(all)=3.39185520515837e-08
bp prob. at bs 48 is 1.77846153861538e-07
bp prob. at bs 49 is 3.293846154e-07
bp prob. at bs 50 is 6.78461538615385e-08
bp prob. at bs 52 is 1.53846153846154e-17
bp prob. at bs 53 is 9.12307692461538e-08
bp prob. at bs 54 is 1.80000000015385e-07
bp prob. at bs 55 is 3.14000000015385e-07
bp prob. at bs 56 is 1.77846153861538e-07
average(bs)=1.67269230784615e-07


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_bp.pl pos_7000_Pumilio/FBtr0100666.pos FBtr0100666-alidot.bp Pumilio
average(all_columns)=2.32527790222031e-05                                                                                                      
average(all)=4.54955322650911e-05                                                                                                              
bp prob. at bs 16 is 0.000186767572519085
bp prob. at bs 17 is 0.0002629006259542
bp prob. at bs 18 is 0.000205181175572521
bp prob. at bs 19 is 0.000123734259541986
bp prob. at bs 20 is 3.8041984732826e-05
bp prob. at bs 21 is 4.32702595419863e-05
bp prob. at bs 22 is 4.99147786259557e-05
bp prob. at bs 23 is 0.000102141984732826
average(bs)=0.000126494080152673


syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matchinalifold_bp.pl pos_7000_Pumilio/FBtr0071068.pos FBtr0071068-alidot.bp Pumilio
average(all_columns)=1.24723749058514e-07                                                                                                      
average(all)=2.51091303705797e-07                                                                                                              
bp prob. at bs 1077 is 2.34151663940262e-08
bp prob. at bs 1078 is 1.06928532474086e-09
bp prob. at bs 1079 is 3.06737588666121e-09
bp prob. at bs 1080 is 9.94271685897436e-10                                                                                                    
bp prob. at bs 1081 is 1.36388434260775e-19
bp prob. at bs 1082 is 2.23458810694217e-08
bp prob. at bs 1083 is 2.21344789963175e-08
bp prob. at bs 1084 is 1.36388434260775e-19
bp prob. at bs 1168 is 1.36388434260775e-19
bp prob. at bs 1169 is 2.46863066148391e-10
bp prob. at bs 1170 is 2.20949263638843e-10
bp prob. at bs 1171 is 1.36388434260775e-19
bp prob. at bs 1172 is 1.10474631887616e-10
bp prob. at bs 1173 is 1.36388434260775e-19
bp prob. at bs 1174 is 1.36388434260775e-19
bp prob. at bs 1177 is 1.36388434260775e-19
bp prob. at bs 5629 is 1.36388434260775e-19
bp prob. at bs 5630 is 1.36388434260775e-19
bp prob. at bs 5631 is 1.36388434260775e-19
bp prob. at bs 5632 is 1.36388434260775e-19
bp prob. at bs 5633 is 1.36388434260775e-19
bp prob. at bs 5634 is 1.36388434260775e-19
bp prob. at bs 5635 is 1.36388434260775e-19
bp prob. at bs 5636 is 1.36388434260775e-19
bp prob. at bs 6294 is 1.36388434260775e-19
bp prob. at bs 6295 is 1.36388434260775e-19
bp prob. at bs 6296 is 1.36388434260775e-19
bp prob. at bs 6297 is 1.36388434260775e-19
bp prob. at bs 6298 is 1.36388434260775e-19
bp prob. at bs 6299 is 1.36388434260775e-19
bp prob. at bs 6300 is 1.36388434260775e-19
bp prob. at bs 6303 is 1.36388434260775e-19
average(bs)=2.30014832255865e-09


############################
correctly checked alifold_bp.pl for the base pairing probability from .bp file to the output average; manually checked the numbers
############################




d.2 structure composition

check alifold_fd.pl

FBtr0100666:
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_fd.pl pos_7000_Pumilio/FBtr0100666.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0100666.consensus Pumilio
655
bp in all:9+1
bp in all:10+1
bp in all:11+1
bp in bs:15+1
bp in bs:16+1
bp in bs:17+1
bp in bs:18+1
bp in bs:19+1
bp in all:410+1
bp in all:411+1
bp in all:412+1
bp in all:417+1
bp in all:418+1
bp in all:419+1
bp in all:421+1
bp in all:422+1
bp in all:423+1
bp in all:424+1
bp in all:429+1
bp in all:430+1
bp in all:431+1
bp in all:432+1
bp in all:443+1
bp in all:444+1
bp in all:445+1
bp in all:446+1
bp in all:447+1
bp in all:448+1
bp in all:449+1
bp in all:450+1
bp in all:451+1
bp in all:456+1
bp in all:457+1
bp in all:458+1
bp in all:459+1
bp in all:532+1
bp in all:533+1
bp in all:534+1
paired sites=38
number of sites=332+1
paired columns=38
number of columns=654+1
paired rate over all columns=0.0580152671755725
paired rate overall=0.114114114114114
paired rate in binding sites=0.625
loop/buldge rate in binding sites=0.375
unstructured rate in binding sites=0

############################
manually checked the structural annotation for those binding sites and also the numbers for base pairing rate. Correct
############################





FBtr0077815:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_fd.pl pos_7000_Pumilio/FBtr0077815.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0077815.consensus Pumilio
271
paired sites=0
number of sites=120+1
paired columns=0
number of columns=270+1
paired rate over all columns=0
paired rate overall=0
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1

############################
no structure folding at all
############################



FBtr0078004:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_fd.pl pos_7000_Pumilio/FBtr0078004.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0078004.consensus Pumilio
65
paired sites=0
number of sites=50+1
paired columns=0
number of columns=64+1
paired rate over all columns=0
paired rate overall=0
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1

############################
no structure folding at all
############################



FBtr0071068:

syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120726/string_matching> perl alifold_fd.pl pos_7000_Pumilio/FBtr0071068.pos /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/alifold_results_7000/FBtr0071068.consensus Pumilio
7332
bp in all:5133+1
bp in all:5134+1
bp in all:5135+1
bp in all:5140+1
bp in all:5141+1
bp in all:5142+1
paired sites=6
number of sites=3641+1
paired columns=6
number of columns=7331+1
paired rate over all columns=0.000818330605564648
paired rate overall=0.00164744645799012
paired rate in binding sites=0
loop/buldge rate in binding sites=0
unstructured rate in binding sites=1

############################
manually checked the structural annotation for those binding sites and also the numbers for base pairing rate. Correct
############################















######
# task 5: plot the results for the three programs
######

update: 20121108



--------------------------------
task 5.1 boxplot and scatter
--------------------------------


directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results


a. alifold 
-----------------------------------------------
a.1 structureComposition
-----------------------------------------------

m <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio_alifold_fd.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/alifold/structureComposition/alifoldfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (m, xlab="", ylab="frequencies", xaxt="n", col="brown", main="alifold", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("paired_rate_overall","paired_rate_in_binding_sites","loop/buldge_rate_in_binding_sites","unstructured_rate_in_binding_sites")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

a1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-fd.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/alifoldfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (a1, xlab="", ylab="frequencies", xaxt="n", col="brown", main="RNAalifold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("paired_overall","paired_bs","loop/buldge_bs","unstructured_bs")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 6, cex=1.7)
dev.off()

a.2 basePairingProb
-----------------------------------------------
m2 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/alifold/basePairingProb/alifoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (m2, xlab="", ylab="base pairing probability", xaxt="n", col="brown", main="alifold", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("base_pairing_probability_overall","base_pairing_probability_binding_sites")
text(1:2, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

m2 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp1.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/alifold/basePairingProb/alifoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (m2, xlab="sites", ylab="base pairing probability", xaxt="n", col="brown", main="alifold", varwidth = TRUE, notch = FALSE, cex.axis=0.6)
axis(1, labels = FALSE)
labels <- c("base_pairing_probability_overall","base_pairing_probability_binding_sites")
text(1:2, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp1.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/alifoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (a, xlab="sites", ylab="accessibility", col="brown", main="RNAalifold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
dev.off()


#truncate version
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/alifoldbp_truncate.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (a, xlab="sites", ylab="accessibility", col="brown", main="RNAalifold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, ylim=c(0, 0.001))
dev.off()


#filter out FBtr0072016, in order to compare with Pfold
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))



b decoder
-----------------------------------------------
b.1 structureComposition
-----------------------------------------------
b.1.1 original
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-fd-10in1.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/decoder/structureComposition/decoderfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d, xlab="", ylab="frequencies", xaxt="n", col="red", main="decoder", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("paired_rate_overall","paired_rate_in_binding_sites","loop/buldge_rate_in_binding_sites","unstructured_rate_in_binding_sites")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

b.1.2 large font
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-fd-10in1.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/decoderfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d, xlab="", ylab="frequencies", xaxt="n", col="red", main="RNAdecoder", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("paired_overall","paired_bs","loop/buldge_bs","unstructured_bs")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 6, cex=1.7)
dev.off()

b.1.3 midde fd
#use the most middle (centered) one for overlapped base pairing probabilities annotaions, instead of taking the average
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-midfd.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d, xlab="", ylab="frequencies", xaxt="n", col="red", main="RNAdecoder", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("paired_overall","paired_bs","loop/buldge_bs","unstructured_bs")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 6, cex=1.7)
dev.off()




b.2 basePairingProb
-----------------------------------------------
b.2.1 original
d1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/decoder/basePairingProb/decoderbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d1, xlab="", ylab="base pairing probability", xaxt="n", col="red", main="decoder", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("base_pairing_probability_overall","base_pairing_probability_binding_sites")
text(1:2, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

b.2.1.1 delete the line which pfold crashed (so that can draw scatter plot with pfold)
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-bp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))


b.2.2 large font
d1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/decoderbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d1, xlab="", ylab="accessibility", xaxt="n", col="red", main="RNAdecoder", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("prob_overall","prob_binding")
text(1:2, par("usr")[3] - 0.07, labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 3, cex=1.7)
dev.off()



b.2.3 midde bp
#use the most middle (centered) one for overlapped base pairing probabilities annotaions, instead of taking the average 
d1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-midbp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (d1, xlab="", ylab="accessibility", xaxt="n", col="red", main="RNAdecoder", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("prob_overall","prob_binding")
text(1:2, par("usr")[3] - 0.07, labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 3, cex=1.7)
dev.off()






c. pfold
-----------------------------------------------
c.1 structureComposition
-----------------------------------------------
p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-fd.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/pfold/structureComposition/pfoldfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p, xlab="", ylab="frequencies", xaxt="n", col="yellow", main="pfold", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("paired_rate_overall","paired_rate_in_binding_sites","loop/buldge_rate_in_binding_sites","unstructured_rate_in_binding_sites")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()

p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-fd.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/pfoldfd.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p, xlab="", ylab="frequencies", xaxt="n", col="yellow", main="Pfold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("paired_overall","paired_bs","loop/buldge_bs","unstructured_bs")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 6, cex=1.7)
dev.off()

c.2 basePairingProb
-----------------------------------------------
p2 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/results/pfold/basePairingProb/pfoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p2, xlab="", ylab="base pairing probability", xaxt="n", col="yellow", main="pfold", varwidth = TRUE, notch = FALSE)
axis(1, labels = FALSE)
labels <- c("base_pairing_probability_overall","base_pairing_probability_binding_sites")
text(1:2, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)
dev.off()


p1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/pfoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p1, xlab="", ylab="accessibility", xaxt="n", col="yellow", main="Pfold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("prob_overall","prob_binding")
text(1:2, par("usr")[3] - 0.07, labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 5, cex=1.7)
dev.off()

p1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp1.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/pfoldbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p1, xlab="sites", ylab="accessibility", col="yellow", main="Pfold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
dev.off()


#truncate version 
p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/RPE_present/pfoldbp_truncate.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (p, xlab="sites", ylab="accessibility", col="yellow", main="Pfold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, ylim=c(0, 0.001))
dev.off()


d. Transat
-----------------------------------------------
t <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/transat/Pumilio-transat-bp.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatbp.pdf")
par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (t, xlab="", ylab="accessibility", xaxt="n", col="blue", main="Transat", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5)
axis(1, labels = FALSE)
labels <- c("prob_overall","prob_binding")
text(1:2, par("usr")[3] - 0.07, labels = labels, xpd = TRUE, cex=1.3)
mtext(1, text = "sites", line = 3, cex=1.7)
dev.off()









-----------------------------------------------
draw paralleled boxplot plots
-----------------------------------------------
0. to see the example commands 
-------------------------------------------
example(boxplot)

NOTE:
  say have two series of plots, basically draw the first one normally, then use the "add" feature to add the second series of plots and use "at" feature to set the positions of the first one and the second one 



1. ppfold_NPL
-------------------------------
1.1 base_pairing_probability
------------------
1.1.1 adjacent one-on-one
------------------
1.1.1.1 validated
------------------
p<-read.table("Pumilio-pfold-nlp.bp", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
p1<-p[1:3]
p2<-p[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfoldnpl.pdf")
boxplot(p1, xlab="sites", ylab="paried prob.", col="yellow", main="PPfold", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=1:3-0.2, boxwex=0.2, xlim=c(.6, 3.5))
boxplot(p2, add=TRUE, col="brown", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=1:3+0.2, boxwex=0.2)
dev.off()

1.1.1.2 adjust font
------------------
p<-read.table("Pumilio-pfold-nlp.bp", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
p1<-p[1:3]
p2<-p[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfoldnpl_individual.pdf")
boxplot(p1, xlab="sites", ylab="paried prob.", col="yellow", main="PPfold", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=1:3-0.2, boxwex=0.2, xlim=c(.5, 3.5), xaxt="n")
boxplot(p2, add=TRUE, col="brown", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=1:3+0.2, boxwex=0.2, xaxt="n")
labels0 <- c("P_utr","P_bs","L_utr","L_bs","N_utr","N_bs")
axis(1, at=c(1,1.4,2,2.4,3,3.4)-0.2, labels=labels0)
dev.off()





1.1.2 adjacent group-on-group
------------------
p<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-nlp.bp", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
p1<-p[1:3]
p2<-p[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_bp_npl_group.pdf")
boxplot(p1, xlab="", ylab="paried prob.", col="yellow", main="PPfold: scan", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n")
boxplot(p2, add=TRUE, col="brown", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n")
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()

reference:
boxplot:
http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/boxplot.html

text:
http://stat.ethz.ch/R-manual/R-devel/library/graphics/html/text.html

mtext:
http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/mtext.html

clear workspace:
https://stat.ethz.ch/pipermail/r-help/2007-August/137694.html





1.2 structure_Composition
------------------
1.2.1 adjacent group-on-group
------------------
pp<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-nlp.fd", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
pp1<-pp[1:3]
pp2<-pp[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_fd_npl_group.pdf")
boxplot(pp1, xlab="", ylab="prior prob.", col="skyblue", main="PPfold: fold", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n")
boxplot(pp2, add=TRUE, col="royalblue", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n")
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()













2. alifold_NPL
-------------------------------
2.1 base_pairing_probability
------------------
2.1.1 adjacent group-on-group
------------------
a<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-nlp.bp", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
a1<-a[1:3]
a2<-a[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/alifold_bp_npl_group.pdf")
boxplot(a1, xlab="", ylab="paried prob.", col="yellow", main="RNAalifold: scan", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n")
boxplot(a2, add=TRUE, col="brown", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n")
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()



2.2 structure_Composition
------------------
2.2.1 adjacent group-on-group
------------------
aa<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-nlp.fd", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
aa1<-aa[1:3]
aa2<-aa[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/alifold_fd_npl_group.pdf")
boxplot(aa1, xlab="", ylab="prior prob.", col="skyblue", main="RNAalifold: fold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n")
boxplot(aa2, add=TRUE, col="royalblue", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n")
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()








3. decoder_NPL
-------------------------------
3.1 base_pairing_probability
------------------
3.1.1 adjacent group-on-group
------------------
d<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-nlp.bp", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
d1<-d[1:3]
d2<-d[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/decoder_bp_npl_group.pdf")
boxplot(d1, xlab="", ylab="paried prob.", col="yellow", main="RNAdecoder: scan", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n", ylim=c(0,1))
boxplot(d2, add=TRUE, col="brown", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n", ylim=c(0,1))
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()




3.2 structure_Composition
------------------
3.2.1 adjacent group-on-group
------------------
dd<-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-nlp.fd", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
dd1<-dd[1:3]
dd2<-dd[4:6]
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/decoder_fd_npl_group.pdf")
boxplot(dd1, xlab="", ylab="prior prob.", col="skyblue", main="RNAdecoder: fold", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(1,1.5,2)-0.2, boxwex=0.2, xlim=c(.6, 3.5), xaxt="n", ylim=c(0,1))
boxplot(dd2, add=TRUE, col="royalblue", varwidth = TRUE, notch = TRUE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, at=c(2.5,3,3.5)-0.2, boxwex=0.2, xaxt="n", ylim=c(0,1))
labels1 <- c("P","L","N","P","L","N")
labels2<-c("3' UTR", "binding sites")
axis(1, at=c(1,1.5,2,2.5,3,3.5)-0.2, labels=labels1)
mtext(side=1, text = labels2, line = 3, cex=1.6, at=c(1.5, 3)-0.2)
dev.off()







----------------------------------
details
----------------------------------
1. R color names
-----------------------------
Eg: get the color names related to "yellow"
> colors()[grep("yellow",colors())]
 [1] "greenyellow"          "lightgoldenrodyellow" "lightyellow"         
 [4] "lightyellow1"         "lightyellow2"         "lightyellow3"        
 [7] "lightyellow4"         "yellow"               "yellow1"             
[10] "yellow2"              "yellow3"              "yellow4"             
[13] "yellowgreen"

Reference:
http://www.statmethods.net/advgraphs/parameters.html
http://research.stowers-institute.org/efg/R/Color/Chart/index.htm
http://wiki.stdout.org/rcookbook/Graphs/Colors%20%28ggplot2%29/










-----------------------------------------------
draw scatter plot for different classifications
-----------------------------------------------
1. base_pairing_probability 
-------------------------------------------
1.1 Pfold
-------------------------------------------

2. structure_Composition 
-------------------------------------------
2.1 Pfold
-------------------------------------------
pp4 <- unlist(pp[4])
pp5 <- unlist(pp[5])
pp6 <- unlist(pp[6])

2.1.1 P vs L
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_fd_pVSl.pdf")
plot(pp4, pp5, main="Pfold: UTRs (P vs. L)", xlab="paired", ylab="loop/bulge")
lines(lowess(pp4, pp5), col = "blue")
dev.off()

2.1.2 P vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_fd_pVSn.pdf")
plot(pp4, pp6, main="Pfold: UTRs (P vs. N)", xlab="paired", ylab="nonstructured")
lines(lowess(pp4, pp6), col = "blue")
dev.off()

2.1.3 L vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_fd_lVSn.pdf")
plot(pp5, pp6, main="Pfold: UTRs (L vs. N)", xlab="loop/bulge", ylab="nonstructured")
lines(lowess(pp5, pp6), col = "blue")
dev.off()



2.1.0 trial version
-----------------------
pp4 <- unlist(pp[4])
pp5 <- unlist(pp[5])
pp6 <- unlist(pp[6])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/pfold_fd_pVSl.pdf")
plot(pp4, pp5, main="all UTR sites", xlab="paired", ylab="loop/bulge")
lines(lowess(pp4, pp5), col = "blue")
dev.off()
plot(pp4, pp6, main="all UTR sites", xlab="paired", ylab="nonstructured")
lines(lowess(pp4, pp6), col = "blue")
plot(pp5, pp6, main="all UTR sites", xlab="loop/bulge", ylab="nonstructured")
lines(lowess(pp5, pp6), col = "blue")



2.2 alifold
-------------------------------------------
aa4 <- unlist(aa[4])
aa5 <- unlist(aa[5])
aa6 <- unlist(aa[6])

2.2.1 P vs L
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/alifold_fd_pVSl.pdf")
plot(aa4, aa5, main="RNAalifold: UTRs (P vs. L)", xlab="paired", ylab="loop/bulge")
lines(lowess(aa4, aa5), col = "blue")
dev.off()

2.2.2 P vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/alifold_fd_pVSn.pdf")
plot(aa4, aa6, main="RNAalifold: UTRs (P vs. N)", xlab="paired", ylab="nonstructured")
lines(lowess(aa4, aa6), col = "blue")
dev.off()

2.2.3 L vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/alifold_fd_lVSn.pdf")
plot(aa5, aa6, main="RNAalifold: UTRs (L vs. N)", xlab="loop/bulge", ylab="nonstructured")
lines(lowess(aa5, aa6), col = "blue")
dev.off()




2.3 decoder
-------------------------------------------
dd4 <- unlist(dd[4])
dd5 <- unlist(dd[5])
dd6 <- unlist(dd[6])

2.3.1 P vs L
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/decoder_fd_pVSl.pdf")
plot(dd4, dd5, main="RNAdecoder: UTRs (P vs. L)", xlab="paired", ylab="loop/bulge")
lines(lowess(dd4, dd5), col = "blue")
dev.off()

2.3.2 P vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/decoder_fd_pVSn.pdf")
plot(dd4, dd6, main="RNAdecoder: UTRs (P vs. N)", xlab="paired", ylab="nonstructured")
lines(lowess(dd4, dd6), col = "blue")
dev.off()

2.3.3 L vs N
-----------------------
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/decoder_fd_lVSn.pdf")
plot(dd5, dd6, main="RNAdecoder: UTRs (L vs. N)", xlab="loop/bulge", ylab="nonstructured")
lines(lowess(dd5, dd6), col = "blue")
dev.off()










-----------------------------------------------
draw scatter plot for different programs
-----------------------------------------------
1. base_pairing_probability 
-------------------------------------------
1.1 alifold VS. Pfold
-------------------------------------------
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))

see mean and median of the data
-------------------------
summary(a)
  prob_overall        prob_binding      
 Min.   :0.000e+00   Min.   :0.000e+00  
 1st Qu.:1.270e-08   1st Qu.:0.000e+00  
 Median :1.816e-06   Median :1.210e-08  
 Mean   :1.786e-05   Mean   :2.177e-05  
 3rd Qu.:1.209e-05   3rd Qu.:1.083e-06  
 Max.   :5.827e-04   Max.   :2.377e-03
 

1.1.1 all sites
-------------------------
a1 <- unlist(a[1])
p1 <- unlist(p[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/alifoldVSpfold_bp_all.pdf")
plot(a1, p1, main="all sites", xlab="RNAalifold", ylab="Pfold")
lines(lowess(a1, p1), col = "blue")
dev.off()

#correlation:
cor(a1, p1, method="pearson")
>0.3705512

#zoom in
plot (a1, p1, main="overall", xlab="RNAalifold", ylab="Pfold", log = "y", ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))
lines(lowess(a1, p1), col="blue",ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))
abline(lm(p1~a1), col="red",ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))

1.1.2 binding sites
-------------------------
a2 <- unlist(a[2])
p2 <- unlist(p[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/alifoldVSpfold_bp_binding.pdf")
plot(a2, p2, main="binding sites", xlab="RNAalifold", ylab="Pfold")
lines(lowess(a2, p2), col = "blue")
dev.off()

#correlation:
cor(a2, p2, method="pearson")
>0.3391523


useful history
-------------------------
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
p1 <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))
plot (unlist(a[1]), unlist(p1[1]), main="overall", xlab="RNAalifold", ylab="Pfold", log = "y")
plot (unlist(a[1]), unlist(p1[1]), main="overall", xlab="RNAalifold", ylab="Pfold", log = "y", pch=19)

plot (unlist(a[1]), unlist(p1[1]), main="overall", xlab="RNAalifold", ylab="Pfold", log = "y", ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))
lines(lowess(unlist(a[1]), unlist(p1[1])), col="blue",ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))
abline(lm(unlist(p1[1])~unlist(a[1])), col="red",ylim=c(1e-10,1e-02), xlim=c(0, 1e-04))

#correlation:
cor(unlist(p1[1]),unlist(a[1]))
cor(unlist(p1[1]),unlist(a[1]), method="pearson")
cor(unlist(p1[1]),unlist(a[1]), method="spearman")

a <- unlist(a[1])
b <- unlist(p1[1])
plot(a, b)
lines(lowess(a, b), col = "blue")





1.2 decoder VS. Pfold
-------------------------------------------
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-midbp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))

see mean and median of the data
-------------------------
summary(d)
       V2                  V3           
 Min.   :0.0002427   Min.   :0.0000036  
 1st Qu.:0.3065508   1st Qu.:0.3709553  
 Median :0.3765888   Median :0.4930573  
 Mean   :0.3645062   Mean   :0.4805187  
 3rd Qu.:0.4360276   3rd Qu.:0.6097342  
 Max.   :0.6179028   Max.   :0.9723265

1.2.1 all sites
-------------------------
d1 <- unlist(d[1])
p1 <- unlist(p[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderVSpfold_bp_all.pdf")
plot(d1, p1, main="all sites", xlab="RNAdecoder", ylab="Pfold")
lines(lowess(d1, p1), col = "blue")
dev.off()

#correlation:
cor(d1, p1, method="pearson")
>-0.1161094



1.2.2 binding sites
-------------------------
d2 <- unlist(d[2])
p2 <- unlist(p[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderVSpfold_bp_binding.pdf")
plot(d2, p2, main="binding sites", xlab="RNAdecoder", ylab="Pfold")
lines(lowess(d2, p2), col = "blue")
dev.off()

#correlation:
cor(d2, p2, method="pearson")
>-0.03932984







1.3 transat VS. Pfold
-------------------------------------------
t <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/transat/Pumilio-transat-bp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
p <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/Pumilio-pfold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))

see mean and median of the data
-------------------------
summary(t)
       V2                  V3           
 Min.   :0.00000   Min.   :0.0000  
 1st Qu.:0.00000   1st Qu.:0.0000  
 Median :0.05891   Median :0.0000  
 Mean   :0.06577   Mean   :0.1291  
 3rd Qu.:0.10381   3rd Qu.:0.0859  
 Max.   :0.33321   Max.   :1.0000

1.3.1 all sites
-------------------------
t1 <- unlist(t[1])
p1 <- unlist(p[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatVSpfold_bp_all.pdf")
plot(t1, p1, main="all sites", xlab="Transat", ylab="Pfold")
lines(lowess(t1, p1), col = "blue")
dev.off()

#correlation:
cor(t1, p1, method="pearson")
>-0.2303577



1.3.2 binding sites
-------------------------
t2 <- unlist(t[2])
p2 <- unlist(p[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/TransatVSpfold_bp_binding.pdf")
plot(t2, p2, main="binding sites", xlab="Transat", ylab="Pfold")
lines(lowess(t2, p2), col = "blue")
dev.off()

#correlation:
cor(t2, p2, method="pearson")
>0.03920539







1.4 decoder VS. alifold
-------------------------------------------
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-midbp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))


1.4.1 all sites
-------------------------
d1 <- unlist(d[1])
a1 <- unlist(a[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderVSalifold_bp_all.pdf")
plot(d1, a1, main="all sites", xlab="RNAdecoder", ylab="RNAalifold")
lines(lowess(d1, a1), col = "blue")
dev.off()

#correlation:
cor(d1, a1, method="pearson")
>-0.07163883



1.4.2 binding sites
-------------------------
d2 <- unlist(d[2])
a2 <- unlist(a[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/decoderVSalifold_bp_binding.pdf")
plot(d2, a2, main="binding sites", xlab="RNAdecoder", ylab="RNAalifold")
lines(lowess(d2, a2), col = "blue")
dev.off()

#correlation:
cor(d2, a2, method="pearson")
>0.09662328













1.5 transat VS. alifold
-------------------------------------------
t <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/transat/Pumilio-transat-bp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
a <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio-alifold-bp2.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))


1.5.1 all sites
-------------------------
t1 <- unlist(t[1])
a1 <- unlist(a[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatVSalifold_bp_all.pdf")
plot(t1, a1, main="all sites", xlab="Transat", ylab="RNAalifold")
lines(lowess(t1, a1), col = "blue")
dev.off()

#correlation:
cor(t1, a1, method="pearson")
>0.08960018



1.5.2 binding sites
-------------------------
t2 <- unlist(t[2])
a2 <- unlist(a[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatVSalifold_bp_binding.pdf")
plot(t2, a2, main="binding sites", xlab="Transat", ylab="RNAalifold")
lines(lowess(t2, a2), col = "blue")
dev.off()

#correlation:
cor(t2, a2, method="pearson")
>0.2147181












1.6 transat VS. decoder
-------------------------------------------
t <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/transat/Pumilio-transat-bp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))
d <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/decoder/Pumilio-decoder-midbp2.stat",as.is=FALSE, header=FALSE, colClasses=c("NULL", "numeric", "numeric"))


1.6.1 all sites
-------------------------
t1 <- unlist(t[1])
d1 <- unlist(d[1])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatVSdecoder_bp_all.pdf")
plot(t1, d1, main="all sites", xlab="Transat", ylab="RNAdecoder")
lines(lowess(t1, d1), col = "blue")
dev.off()

#correlation:
cor(t1, d1, method="pearson")
>-0.1022068



1.6.2 binding sites
-------------------------
t2 <- unlist(t[2])
d2 <- unlist(d[2])
pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pdf/transatVSdecoder_bp_binding.pdf")
plot(t2, d2, main="binding sites", xlab="Transat", ylab="RNAdecoder")
lines(lowess(t2, d2), col = "blue")
dev.off()

#correlation:
cor(t2, d2, method="pearson")
>0.1234226

































-----------------------------------------------
Details: visulize the results from task 3
-----------------------------------------------
R plots
-------------------------
input: C:\\Users\\syang\\Desktop\\RPE\\presentation\\results\\deco.txt


m <-read.table("C:\\Users\\syang\\Desktop\\RPE\\presentation\\results\\deco.txt", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric"))


boxplot (m, xlab="sites", ylab="base pairing probability", col="yellow", main="Pold", varwidth = TRUE, notch = FALSE, boxwex=.5)


> d <-read.table("C:\\Users\\syang\\Desktop\\RPE\\presentation\\results\\plots\\decofd.txt", as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
> boxplot (d, xlab="sites", ylab="frequencies", col="red", main="RNA-Decode", varwidth = TRUE, notch = FALSE)
>






create rotated axis labels
--------------------------------
ref:
http://cran.r-project.org/doc/FAQ/R-FAQ.html#How-can-I-create-rotated-axis-labels_003f
http://rhints.wordpress.com/2008/06/26/figures-and-their-axes/
http://stats.stackexchange.com/questions/3853/how-to-increase-size-of-label-fonts-in-barplot

par(mar = c(7, 4, 4, 2) + 0.1)
boxplot (m, xlab="", ylab="frequencies", xaxt="n", col="brown", main="alifold", varwidth = TRUE, notch = FALSE, las=1)
axis(1, labels = FALSE)
labels <- c("paired_rate_overall","paired_rate_in_binding_sites","loop/buldge_rate_in_binding_sites","unstructured_rate_in_binding_sites")
text(1:4, par("usr")[3] - 0.05, srt = 20, adj = 1,labels = labels, xpd = TRUE, cex=0.7)
mtext(1, text = "sites", line = 5)

NOTE:
srt control the angle, cex control the font size (also cex.label cex.axis), las control the orientation)



#use log transformation and scale y axis
------------------------------------------
boxplot (a, xlab="sites", ylab="accessibility", col="brown", main="RNAalifold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5, log = "y")
boxplot (p1, xlab="sites", ylab="accessibility", col="yellow", main="Pfold", varwidth = TRUE, notch = FALSE, cex.axis=1.3, cex.lab=1.6, cex.main=2.5,ylim=c(0,0.002))


see mean and median of the data
------------------------------------------
summary(a)
  prob_overall        prob_binding      
 Min.   :0.000e+00   Min.   :0.000e+00  
 1st Qu.:1.270e-08   1st Qu.:0.000e+00  
 Median :1.816e-06   Median :1.210e-08  
 Mean   :1.786e-05   Mean   :2.177e-05  
 3rd Qu.:1.209e-05   3rd Qu.:1.083e-06  
 Max.   :5.827e-04   Max.   :2.377e-03



save plots from R in linux
-------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/


> R
> m <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio_alifold_fd.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
> pdf(file="/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifoldfd.pdf")
> boxplot (m, xlab="sites", ylab="frequencies", col="brown", main="alifold", varwidth = TRUE, notch = FALSE)
> dev.off()
null device 
          1

          
NOTE:
1. The default graphics device when using R under Linux is something called "X11": basically, it creates the window in which you see your plot.

It's a very basic window without many features so the answer is: you can't copy/paste from it. Instead, you need to create a different graphics device and write the plot to it. Most people would choose something like a PNG file, like this:

png(file = "myplot.png")  # create PNG device
plot(x)                   # do the plot
dev.off()                 # return to default device (X11)

And you now have a PNG file named "myplot.png" in the current directory.

2. Above provides part of the answer. Basically, the stock Ubuntu build gives you

    pdf() for what may be the best format for publication graphics
    png() for what may be useful on the web
    jpeg()

as well as the abilty to write the current plot via dev.copy().

But then there is CRAN and a whole slew of add-on packages, including some as binaries for Ubuntu:

    cairoDevice via r-cran-cairoDevice in Ubuntu

plus at least one other Cairo package or rforge.net, and at least abother SVG package can all write scalable vector graphics (SVG).

In the end it all depends on what you want to do with the graph file. Which you didn't say so it is hard to be specific.

3. also see 
http://stackoverflow.com/questions/6838851/how-to-copy-plots-in-r-when-working-in-ubuntu
http://www.r-bloggers.com/automatically-save-your-plots-to-a-folder/




save plots from R in linux-print_screen
-------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/


> R
> m <-read.table("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/alifold/Pumilio_alifold_fd.stat",as.is=FALSE, header=TRUE, colClasses=c("NULL", "numeric", "numeric", "numeric", "numeric"))
> boxplot (m, xlab="sites", ylab="frequencies", col="brown", main="alifold", varwidth = TRUE, notch = FALSE)


NOTE:
Use GIMP can directly get the snapshot of a screen and then save as png format





install R packages using non-root account
--------------------------------
package: gridBase

NOTE: 
whenever use the package, include the local path it stores at, like:
> library("gridBase", lib.loc="/ubc/cs/home/s/syang11/Desktop/syang11/bin/R")
Loading required package: grid

or save the path to ur profile:
a). add the following line to bash file
export R_LIBS=/ubc/cs/research/irmtraud/people/syang11/bin/R

b). It’s a bit of a pain having to type /data/Rpackages/ all the time. To avoid this burden,  we create a file .Renviron in our home area, and add the line R_LIBS=/data/Rpackages/ to it. This means that whenever you start R, the directory /data/Rpackages/ is added to the list of places to look for R packages and so:

> install.packages("ggplot2")
> library(ggplot2)

just works!



ref:
http://www.r-bloggers.com/installing-r-packages/


example: /ubc/cs/home/s/syang11/Desktop/syang11/bin/R/gridBase

a. manually download then install
--------------------------------
download gridBase_0.4-6.tar.gz from http://cran.r-project.org/web/packages/gridBase/index.html

> install.packages("gridBase", lib="/ubc/cs/home/s/syang11/Desktop/syang11/bin/R/gridBase", repo=NULL)
* installing *source* package ‘gridBase’ ...
** package ‘gridBase’ successfully unpacked and MD5 sums checked
** R
** demo
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
   ‘gridBase.Rnw’ 
** testing if installed package can be loaded

* DONE (gridBase)


b.connect internet then install
--------------------------------
> install.packages("gridBase", lib="/ubc/cs/home/s/syang11/Desktop/syang11/bin/R")
--- Please select a CRAN mirror for use in this session ---
trying URL 'http://cran.stat.sfu.ca/src/contrib/gridBase_0.4-6.tar.gz'
Content type 'application/x-gzip' length 144839 bytes (141 Kb)
opened URL
==================================================
downloaded 141 Kb

* installing *source* package ‘gridBase’ ...
** package ‘gridBase’ successfully unpacked and MD5 sums checked
** R
** demo
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
   ‘gridBase.Rnw’ 
** testing if installed package can be loaded

* DONE (gridBase)

The downloaded source packages are in
        ‘/tmp/RtmpxO0GE2/downloaded_packages’

____________________________________





--------------------------------
task 5.2 R-chie
--------------------------------
directory: 
	R-chie: /ubc/cs/research/irmtraud/people/syang11/work/R4RNA


get the R-chie package from Daniel
---------------------------------------
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work> git clone ../../jujubix/share/.repo/R4RNA
Cloning into R4RNA...
done.

NOTE:
	manu and unpulished functions are available.



1. load the R-chie library
---------------------------------------

#check R lib path inside R enviroment
.libPaths()
[1] "/usr/lib64/R/library" 

#add new lib path
.libPaths("/ubc/cs/research/irmtraud/people/syang11/work/R4RNA/R4RNA") 


#install R4RNA. so the exacutable application automatically installed in directory "/usr/lib64/R/library"
> install.packages("/ubc/cs/research/irmtraud/people/syang11/work/R4RNA/R4RNA", repo = NULL)
Installing package(s) into ‘/ubc/cs/research/irmtraud/people/syang11/work/R4RNA/R4RNA’
(as ‘lib’ is unspecified)
* installing *source* package ‘R4RNA’ ...
** R
** data
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices ...
** testing if installed package can be loaded

* DONE (R4RNA)


#load R-chie lib
library(R4RNA)

#source the private.R (unpulished functions)
source("../../../../R4RNA/private.R")

#read transat
readTransat("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120626/transat_results_7000/FBtr0100666.transat")




2. draw accessibility using R4RNA
---------------------------------------

2.0 draw accessibility
---------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo_shu/R

perl ccPBS.pl YAL001C  decoder Khd1 yeast

input (all parameters not actual files): 
  YAL001C (transcript ID)
  decoder (program)
  Khd1 (protein)
  yeast (species)

output: 
  pdf opened from terminal and deleted after close the acroread window


NOTE:
ccPBS.pl calls R functions from R4RNA and berrylogo (ggplot2) as inline scripts. For details of R related operations, see below 2.1 and thereafter.

Inside the script, hardcoded the paths for fasta files, position files, and rnadecoder results files for different species, respectively.


usage:
ccPBS.pl requires three arguments (transcript ID, program, protein, species). Currently works for fly and decoder only.
__________







tips to run R4RNA
---------------------------------------
fasta<-readFasta("FBtr0078004.fa")
plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE) 
con <- unlist(lapply(1:nchar(fasta[1]), baseConservation, msa = fasta)) 
abline(v = 0) 
abline(h = 0) 
length(fasta) 
lines(1:nchar(fasta[1]), con + length(fasta) * 1.25) 
lines(1:nchar(fasta[1]), con * 10 + 8.75) 
text(-3, 12, "asdf") 

png("asdf.png", nchar(fasta[1]) * factor, (18.75 + 2) * factor) 
blankPlot(nchar(fasta[1]), 8.75 + 10, 0) 
plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, add = TRUE) 
lines(1:nchar(fasta[1]), con * 10 + 8.75) 
dev.off()

lsty
______________




2.1 combining multiple figures from R4RNA
---------------------------------------
#when combining multiple figures generated from R4RNA, need to set par(mfrow=c(2,2), and turn off the internal par setting within each function by no.par=TRUE)
plotHelix(no.par=TRUE)

#or
par(mfrow=c(2,1))
plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, no.par=TRUE)
plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, no.par=TRUE)

NOTE:
a. However, the above approaches do not work for R4RNA::plotCovariance since there is an additional AUGC bar. When turn on no.par=TRUE, the bar's position is messed up and bar jumps into the aln. 
SOLUTION: draw blankPlot first, then add plotCovariance onto it. Make the second blankPlot as no.par=TRUE, like:
> layout(matrix(c(1,1,2,2),2,2,byrow=TRUE))
> blankPlot(nchar(fasta[1]), 8.75 + 10, 0)
> plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, add=TRUE)
> blankPlot(nchar(fasta[1]), 8.75 + 10, 0, no.par=TRUE)
> plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, add=TRUE)

references:
[1] http://www.statmethods.net/advgraphs/layout.html
[2] http://research.stowers-institute.org/efg/R/Graphics/Basics/mar-oma/index.htm


b. For berrylogo.r, the script uses ggplot2 which is using lattice and based on 'grid' graphics subsystem, while the original R programs including R4RNA use 'base' graphics system. It is fairly difficult to combine figures from different systems.



references:
[1] http://blog.revolutionanalytics.com/2009/07/lattice-and-ggplot-graphics-side-by-side.html
[2] http://docs.ggplot2.org/current





2.2 combining multiple figures from Base+Grid Graphics 
---------------------------------------
Highlight:
as described in 2.1 b., it is difficult to combine figures from different systems, I worked according to the methods described in [1] to combine Base+Grid Graphics.

[1] http://casoilresource.lawr.ucdavis.edu/drupal/node/1007

R: 
library(grid)
library(gridBase)
library(lattice)
library(R4RNA)
library(ggplot2)
source('berrylogo.r')
par(mar=c(0,0,0,0), no.readonly=TRUE)
plot.new()
fasta<-readFasta("test/FBtr0078004.fa")
b<-matrix(data=c(0.25,0.65,0.87,0.92,0.16,0.16,0.04,0.98,0.98), byrow=TRUE,nrow=3,dimnames=list(c('N','L','P')))
p<-berrylogo_shu(b)
gl <- grid.layout(nrow=2, ncol=1)
vp.1 <- viewport(layout.pos.col=1, layout.pos.row=1)
vp.2 <- viewport(layout.pos.col=1, layout.pos.row=2)
pushViewport(viewport(layout=gl))                                                                              
pushViewport(vp.1)                                                                                             
par(new=TRUE, fig=gridFIG()) 
plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, no.par=TRUE)
con <- unlist(lapply(1:nchar(fasta[1]), baseConservation, msa = fasta))
lines(1:nchar(fasta[1]), con*15 + length(fasta) * 1.25, col="red") 
popViewport()
pushViewport(vp.2)
print(p, newpage=FALSE)
popViewport(1)
dev.off()

for details:
# libraries
> library(grid)
> library(gridBase)
> library(lattice)
> library(R4RNA)
> source('berrylogo.r')

# start new page 
> par(mar=c(0,0,0,0), no.readonly=TRUE)
> plot.new() 

# setup layout
> gl <- grid.layout(nrow=2, ncol=2, widths=unit(c(2,1), 'null'), heights=unit(c(1,3), 'null'))

# setup viewports
> vp.1 <- viewport(layout.pos.col=1, layout.pos.row=c(1,2))
> vp.2 <- viewport(layout.pos.col=2, layout.pos.row=2)

# init layout
> pushViewport(viewport(layout=gl))
# access the first position
> pushViewport(vp.1)

# start new base graphics in first viewport 
> par(new=TRUE, fig=gridFIG()) 

# load fasta data
> fasta<-readFasta("../FBtr0078004.fa")
> plotCovariance(fasta, R4RNA:::emptyHelix(0), base.col = TRUE, grid = TRUE, no.par=TRUE)
                                                                                                    
# done with the first viewport
> popViewport()                                                                              

# move to the next viewport                                                                                
> pushViewport(vp.2)

# load PWM data
> b<-matrix(data=c(0.25,0.65,0.87,0.92,0.16,0.16,0.04,0.98,0.98), byrow=TRUE,nrow=3,dimnames=list(c('N','L','P')))
> p<-berrylogo_shu(b)

# print ggplot2 graphics here
> print(p, newpage=FALSE)                                                                                        
 
# done with this viewport
> popViewport(1)


ref:  http://casoilresource.lawr.ucdavis.edu/drupal/node/1007




2.3 adjust combined multiple figures from Base+Grid Graphics 
---------------------------------------


for Grid:
#remove y ticks
theme(axis.ticks = element_blank(), axis.text.y = element_blank())

#remove the margines on the left and right of the plot (use expand (v1, v2) (it means expand the range by mutiply v1 then plus v2) instead of limits)
scale_x_continuous(name="Position",breaks=1:ncol(bval), expand=c(0,0))

#draw segmented lines
geom_segment(data=d, mapping=aes(x=x, y=y, xend=x+vx, yend=y+vy), arrow=arrow(), size=2, color="blue")

ref:  
ggplot2:  http://ggplot2.org/
axes for ggplot2: http://wiki.stdout.org/rcookbook/Graphs/Axes%20%28ggplot2%29/
base::xaxs counter part expand in grid: http://stackoverflow.com/questions/10861773/remove-grid-background-color-and-top-and-right-borders-from-ggplot2
geom_segment: http://sape.inf.usi.ch/quick-reference/ggplot2/geom_segment



2.4 use segments() instead of lines() for Base Graphics 
---------------------------------------
when highlighting the binding sites region on the base_pairing_probability line, use a different color to mark those motifs. Have the below three options to do this:

#a. use segments
segments(motif-0.5, basepair[motif]*15 + length(fasta) * 1.25, motif+.5, basepair[motif]*15 + length(fasta) * 1.25, col="orange", lwd=1)

#b. an alternative to segments, could generate points to highlight the segments
points(motif, basepair[motif]*15 + length(fasta) * 1.25, col="orange", lwd=1, type='p')

#c. use lines, this function joins all the points in (motif,basepair[motif]*15 + length(fasta) * 1.25), so it could not draw those segments (coz they are joint to a line, the interval regions are joint as lines)
lines(motif, basepair[motif]*15 + length(fasta) * 1.25, col="orange", lwd=1)


ref:
R for beginners
points: http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/points.html
_____________________





















######
# task 6: structurally realign MSA from UCSC and re-compute accessibility based on that
######


1. sequence-based realign
-----------------------------------
Daniel use MAFFT (einsi) to do sequence-based (conservation) realign. There are two main reasons to do this: 
  1). MAFFT is by far the best and fastest MSA software, even better than MUSCLE; 
  2). The author of mlocarna also use MAFFT in one of their papers (they were modeling sRNA-mRNA, and used mlocarna to fold sRNA while using MAFFT to fold mRNA since they assumed that the mRNA regions they were looking into have no significant structures)


mafft-einsi --ep 0.123 input > output


NOTE:
einsi is one of the three options in MAFFT, the other two are ginsi (for global aln) and linsi (for local aln). einsi is like the 	compromise between local and global.
--ep: the closer the number to 0, the longer indels allowed. There are only two values 0.0 or 0.123. So use 0.123 when not want to generate long indels. 


ref:
http://mafft.cbrc.jp/alignment/software/epvalue.html

_____________________
















#######################
# project:RNA-Protein interaction (for yeast and human): accessibility (compare to Li et al 2010)
#######################


#the previous project:RNA-Protein interaction (for fly) serves as a pilot study. Since there is only one fly RBP Pumilio available in Li2010 paper, we extend to work on yeast and human, both are also collected in Li2010 paper.


###########
# Yeast
###########


####
#task 1. get the local fasta format MSA for 3'UTR region;
####

NOTE: Unlike fly and human, which both have 3'UTR region annotation available on Ensembl (one can get it by either directly downloading from BioMart as details in "4.1.0. 3'UTR", or downloading the gtf file and calculate himself (stop_codon->exon end)), Yeast does not have such annotation availble. As described in Li2010 paper, they adopted an approach as Hogan2008 did previously, that defining "the yeast cDNA as the longest ORF corresponding to each gene plus 200 nucleotides (nt) upstream and 200 nt downstream of the start and stop codons, respectively, removing any ORF sequence from the upstream or downstream genes." That is also what we did in here.

1. Get the data for Yeast
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/


1.1 Download UCSC Yeast MSA maf files
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf

Version: sacCer2/SGD1.01/SGD1.01(Ensembl release 58)


wget -r -e robots=off -np http://hgdownload.cse.ucsc.edu/goldenPath/sacCer2/multiz7way/maf/


download files:

chrIII.maf  
chrI.maf   
chrIX.maf  
chrVIII.maf  
chrVI.maf  
chrXIII.maf  
chrXI.maf   
chrX.maf    
chrXV.maf
chrII.maf  
chrIV.maf  
chrM.maf   
chrVII.maf   
chrV.maf   
chrXII.maf   
chrXIV.maf  
chrXVI.maf


NOTE: 
In Li 2010 paper, the Yeast sequences were downloaded from Enseml using SGD1.01 (http://www.yeastgenome.org/), which is corresponding to UCSC sacCer2 (the latest version is sacCer3/EF4). So here I also use sacCer2 version.

Daniel has also downloaded sacCer3 maf at: /ubc/cs/research/irmtraud/people/jujubix/data/sacCer3/genome/maf/









1.2 UCSC Yeast chromsome fasta files
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta

Version: sacCer2/SGD1.01/SGD1.01(Ensembl release 58)


wget -r -e robots=off -np http://hgdownload.cse.ucsc.edu/goldenPath/sacCer2/chromosomes/


download files:

chrI.fa     
chrII.fa   
chrIII.fa  
chrIV.fa   
chrIX.fa    
chrM.fa  
chrV.fa  
chrVI.fa  
chrVII.fa  
chrVIII.fa  
chrX.fa     
chrXI.fa  
chrXII.fa  
chrXIII.fa  
chrXIV.fa  
chrXV.fa   
chrXVI.fa


NOTE: 
Since the program mafToFastaMSA.pl may require sacCer fasta files as well in case to repaire non-continguous MAS alignment blocks (see the script for details), I download fasta files for sacCer2/SGD1.01 from UCSC. 

In Li 2010 paper, the Yeast sequences were downloaded from Enseml using SGD1.01 (http://www.yeastgenome.org/), which is corresponding to UCSC sacCer2 (the latest version is sacCer3/EF4). So here I also use sacCer2 version.

Daniel has also downloaded sacCer3 fasta at: /ubc/cs/research/irmtraud/people/jujubix/data/sacCer3/genome/fasta/







1.3 Ensembl Yeast gtf annotation files
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/gtf

Version: sacCer2/SGD1.01/SGD1.01(Ensembl release 58)


wget -r -e robots=off -np ftp://ftp.ensembl.org/pub/release-58/gtf/saccharomyces_cerevisiae/


download files: Saccharomyces_cerevisiae.EF4.69.gtf.gz



NOTE:
For different versions of Ensembl vs. SGD, see http://www.ensembl.org/Saccharomyces_cerevisiae/Info/Index

In Li 2010 paper, the Yeast sequences were downloaded from Enseml using SGD1.01 (http://www.yeastgenome.org/), which is corresponding to UCSC sacCer2 (the latest version is sacCer3/EF4). So here I also use sacCer2 version.

I have also downloaded sacCer3 gtf at: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/gtf






1.4 Download UCSC Yeast tree files 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/tree/sacCer2

version: sacCer2

url: ftp://hgdownload.cse.ucsc.edu/goldenPath/sacCer2/phastCons7way/


download files:
ave.cons.mod  
ave.noncons.mod


Get the newick tree info from ave.cons.mod, save as constree.newick.
______________________











2. Get the 3' UTR MSA for Yeast
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/



2.1 get each chromsome length for Yeast 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts


perl chrLen.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/chrLen/chrLen_sacCer2.txt


input: 
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta

output:
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/chrLen/chrLen_sacCer2.txt


NOTE:
get the length of each chromsomes, then output them into one file. The file will be used as input for get3UTRbed.pl in 2.2






2.2 get 3' UTR coordinates for Yeast 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts



perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts/get3UTRbed.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/gtf/Saccharomyces_cerevisiae.SGD1.01.58.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/chrLen/chrLen_sacCer2.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/bed/3UTR_200ntORless_yeast_sacCer2.bed6 



input: 
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/gtf/Saccharomyces_cerevisiae.SGD1.01.58.gtf 
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/chrLen/chrLen_sacCer2.txt

output:
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/bed/3UTR_200ntORless_yeast_sacCer2.bed6


NOTE:    
#based on csv2bed6.pl, take input as gtf file from ensembl, and chromsome length file, then output 3' UTR region as bed file.
#	-since for yeast, there is no  3'UTR region annotation available, take 200 nt downstream of the stop codon as Li2010 did.
#	-also check if the 200 nt downstream region overlaps with other transcripts or not; if it happens, take the interval region instead of 200 nt

coordinates in .maf and .bed files are 0 based (start from 0), while coordinates in .gtf are 1 based (start from 1); and regions in .bed file are [start, end+1) based, while regions in .gtf file is [start, end] based. This means the region [1, 10] in .gtf file is equal to region [0,10) in .bed file.




############################
successfully manually checked: 
also compare the sacCer3 result file 3UTR_200ntORless_yeast_sacCer3.bed6 with 3UTR_200nt_yeast_sacCer3.bed6 and the csv file downloaded from Ensembl 3UTR_protein_coding_yeast_csv.txt, they have the same entries (6664 3'UTRs), except that .bed6 file excludes those Mito transcripts
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Yeast/scripts> perl get3UTRbed.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/gtf/Saccharomyces_cerevisiae.EF4.69.gtf chrLen.txt 3UTR_200ntORless_yeast_sacCer3.bed6

 ind:-1 stop3:228953 chrLen{chrI}:230208 end:229153

 ind:-1 stop3:229317 chrLen{chrI}:230208 end:229517

 ind:-1 stop3:809419 chrLen{chrII}:813178 end:809619

 ind:-1 stop3:314981 chrLen{chrIII}:316617 end:315181

 ind:-1 stop3:1531711 chrLen{chrIV}:1531919 end:1531911

 ind:-1 stop3:571523 chrLen{chrV}:576869 end:571723

 ind:-1 stop3:576525 chrLen{chrV}:576869 end:576725

 ind:-1 stop3:269516 chrLen{chrVI}:270148 end:269716

 ind:-1 stop3:1090591 chrLen{chrVII}:1090947 end:1090791

 ind:-1 stop3:560249 chrLen{chrVIII}:562643 end:560449

 ind:-1 stop3:562047 chrLen{chrVIII}:562643 end:562247

 ind:-1 stop3:434303 chrLen{chrIX}:439885 end:434503

 ind:-1 stop3:737117 chrLen{chrX}:745742 end:737317

 ind:-1 stop3:663289 chrLen{chrXI}:666454 end:663489

 ind:-1 stop3:1077898 chrLen{chrXII}:1078175 end:1078098

 ind:-1 stop3:923015 chrLen{chrXIII}:924429 end:923215

 ind:-1 stop3:782280 chrLen{chrXIV}:784333 end:782480

 ind:-1 stop3:1090863 chrLen{chrXV}:1091289 end:1091063

 ind:-1 stop3:947701 chrLen{chrXVI}:948062 end:947901



        

        
        
2.3 get 3' UTR MSA from UCSC maf 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts



perl mafToFastaMSA.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/bed/3UTR_200nt_yeast.bed6 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/maf --maf "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/*.maf" --species sacCer2,sacPar,sacMik,sacKud,sacBay,sacCas,sacKlu  --fasta "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta/*.fa" --exon 


input: 
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/bed/3UTR_200nt_yeast.bed6 
    --maf "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/*.maf" (quotation "" needed!)
    --species sacCer2,sacPar,sacMik,sacKud,sacBay,sacCas,sacKlu
    --fasta "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta/*.fa"	(quotation "" needed!)
    --exon     
    

output:
    /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/maf


NOTE:         
    For --maf and --fasta flags, since the input requires batch of files (*.), the quotation must be there to be called successfully.   
    
    As a result of running the above program, I get 6666 maf files: it seems still problematic (empty files) with Daniel's codes. Pick those "safe" fasta files (those have exactly 200nts) first to do my experiment.
    

    
    
############################
successfully manually checked: 
############################
syang11@fire:~/Desktop/syang11/work/20120525/Yeast/test> perl ../scripts/get3UTRbed.pl test.gtf test.bed6syang11@fire:~/Desktop/syang11/work/20120525/Yeast/test> perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/mafToFastaMSA.pl ./test.bed6 /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout --maf "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/*.maf" --species sacCer2,sacPar,sacMik,sacKud,sacBay,sacCas,sacKlu  --fasta "/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta/*.fa" --exon
Replacement list is longer than search list at /ubc/cs/research/irmtraud/people/jujubix/tilde/perl5/lib/perl5/Bio/Perl.pm line 627.
Obtaining MAF alignments from: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/*.maf

*** Extracting exons from MAF file ***

New transcript detected: YAL069W
        Creating new transcript BED file
        Same transcript, appending exon to BED file
New transcript detected: YAL068C
        Processing previous transcript: YAL069W
        Executing command: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/maf_related/mafsInRegion /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/tempmZIzd /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL069W.maf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/chrXV.maf
Extracting from 1 files to /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL069W.maf
extracting from /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/chrXV.maf
        Creating new transcript BED file
        Same transcript, appending exon to BED file
        Processing last transcript: YAL068C
Extracting from 1 files to /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL068C.maf
extracting from /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/maf/chrXVI.maf

***Converting MAF to FASTA***

Processing /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL068C.maf
        Alignment species: sacCas,sacBay,sacKud,sacCer2,sacPar,sacMik,sacKlu
        Processing alignment block #1
        Processing alignment block #2

        ********************* WARNING *********************
        MSG: Bases missing between 281374 and 281374 in sacCer2.chrXVI
        ***************************************************
                Attempting to repair with sequence from FASTA file...
                Retrieving bases 281375 to 281374 from /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/fasta/chrXVI.fa
        Processing alignment block #3
                Adding missing species: sacBay
                Adding missing species: sacKlu
        Processing alignment block #4
                Adding missing species: sacKlu
        Processing alignment block #5
        Processing alignment block #6
        Removing gap-only columns
        Reverse complementing
        Writing to: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL068C.fa
Processing /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL069W.maf
        Alignment species: sacCas,sacBay,sacKud,sacCer2,sacPar,sacMik,sacKlu
        Processing alignment block #1
                Adding missing species: sacCas
                Adding missing species: sacBay
                Adding missing species: sacPar
                Adding missing species: sacMik
                Adding missing species: sacKlu
        Processing alignment block #2
                Skipping intron between 387 and 780277 in sacCer2.chrXV

--------------------- WARNING ---------------------
MSG: Got a sequence with no letters in it cannot guess alphabet
---------------------------------------------------

--------------------- WARNING ---------------------
MSG: Got a sequence with no letters in it cannot guess alphabet
---------------------------------------------------

--------------------- WARNING ---------------------
MSG: Got a sequence with no letters in it cannot guess alphabet
---------------------------------------------------

--------------------- WARNING ---------------------
MSG: Got a sequence with no letters in it cannot guess alphabet
---------------------------------------------------

--------------------- WARNING ---------------------
MSG: Got a sequence with no letters in it cannot guess alphabet
---------------------------------------------------
        Removing gap-only columns
        Reverse complementing not required
        Writing to: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/test/testout/YAL069W.fa    
    


As a result of running the above program, I get 6666 maf files: it seems still problematic (empty files) with Daniel's codes. Pick those "safe" fasta files (those have exactly 200nts) first to do my experiment.

    
convert_mafToFastaMSA_output_batch.sh 
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts

convert the above 6666 maf files

    
pick "safe" fasta files (those have exactly 200nts)
-----------------------------------------
Directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/scripts


perl pick_exact_200nt_fa.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt sacCer2
   

input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta 
      sacCer2 (reference species)


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt
   
   
   
NOTE:
based on chrLen.pl, pick those "safe" fasta files (those have exactly 200nts) first to do my experiment.


############################
successfully manually checked: 
############################
perl pick_exact_200nt_fa.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/test/test_exact_200nt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/test/test_out_exact_200nt sacCer2








ppfold
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/ppfold





############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120626yeast/ppfold/scripts> perl ppfold_bpANDfd.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/ppfold/test/fa /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/ppfold/test/results
Finish YAL001C
Finish YAL002W
Finish YAL003W
Finish YAL004W







RNAalifold
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/alifold


perl alifold_bpANDfd.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/alifold/results sacCer2



input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt
      sacCer2 (reference species)


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/alifold/results

      
      
NOTE:
#based on alifold_batch.pl which is for fly, make it more general for different species

usage:
alifold_bpANDfd.pl requires three arguments (input fasta file folder, output alifold results files folder, reference species).





############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120626yeast/alifold/scripts> perl alifold_bpANDfd.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/alifold/test/fa /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/alifold/test/results sacCer2
7 sequences; length of alignment 257.
7 sequences; length of alignment 257.
7 sequences; length of alignment 249.
7 sequences; length of alignment 209.







    
RNA-decoder
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/


NOTE:
For RNA-decoder, use rnadecoder_scanV2.sh to scan the MSA to get base pairing probabilities (scan mode); use rnadecoder_foldV2.sh to fold the MSA to get the secondary structure information (fold mode)

RNA-decoder requires phylogenetic tree information, so I use the sacCer2 yeast 7 species tree information from conserved tree /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/tree/sacCer2/constree.newick



1. scan mode
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/scripts


perl rnadecoder_scanV2.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_scanning_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/results_scan sacCer2



input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_scanning_template.xml
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt
      sacCer2 (reference species)


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/results_scan

      
      
NOTE:
#based on rnadecoder_input.pl which is for fly, make it more general for different species

usage:
rnadecoder_scanV2.pl requires four arguments (template .xml file, input fasta file folder, output results col file folder, reference species).
    
      
      
  

############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120626yeast/decoder/scripts> perl rnadecoder_scanV2.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_scanning_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/test_fa /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/test_results  sacCer2
finished!                                                                                                                            
finished!
finished!                                                                                                                            
finished! 





2. scan mode
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/scripts


perl rnadecoder_foldV2.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_folding_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/results_fold sacCer2



input:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_folding_template.xml
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Yeast/3UTR/fasta_exact_200nt
      sacCer2 (reference species)


output:
      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/results_fold

      
      
NOTE:
#based on rnadecoder_input1.pl which is for fly, make it more general for different species

usage:
rnadecoder_foldV2.pl requires four arguments (template .xml file, input fasta file folder, output results col file folder, reference species).
    
      
      
  

############################
successfully manually checked: 
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120626yeast/decoder/scripts> perl rnadecoder_foldV2.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/xml/yeast_folding_template.xml /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/test_fa /ubc/cs/home/s/syang11/Desktop/syang11/work/20120626yeast/decoder/test_results/fold sacCer2
finished!
finished!
finished!
finished!





_____________________



















###########
# Human
###########


####
#task 1. get the local fasta format MSA for 3'UTR region;
####

1.1 Download UCSC human MSA maf files 
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/maf


updated on 20121025

version: hg18/NCBI36/Ensembl release 54

Daniel has previously downloaded hg18 data on disk irmtraud-raid:
/ubc/cs/research/irmtraud-raid/people/jujubix/hg18/maf


download files:

chr10.maf  
chr12.maf  
chr14.maf  
chr16.maf  
chr18.maf  
chr1.maf   
chr21.maf  
chr2.maf  
chr4.maf  
chr6.maf  
chr8.maf  
chrM.maf  
chrY.maf
chr11.maf  
chr13.maf  
chr15.maf  
chr17.maf  
chr19.maf  
chr20.maf  
chr22.maf  
chr3.maf  
chr5.maf  
chr7.maf  
chr9.maf  
chrX.maf



NOTE:
In Li 2010 paper, the human sequences were downloaded from Enseml using NCBI36/Ensembl release 54, which is corresponding to UCSC hg18 (the latest version is hg19/GRCh37).  So here I also use hg18 version.






1.2 Download UCSC human chromsome fasta files
-----------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/fasta


version: hg18/NCBI36/Ensembl release 54


wget -r -e robots=off -np ftp://hgdownload.cse.ucsc.edu/goldenPath/hg18/chromosomes/


download files:



NOTE:
Since the program mafToFastaMSA.pl may require human fasta files as well in case to repaire non-continguous MAS alignment blocks (see the script for details), I download fasta files for hg18/NCBI36 from UCSC. 

In Li 2010 paper, the human sequences were downloaded from Enseml using NCBI36, which is corresponding to UCSC hg18 (the latest version is hg19/GRCh37).  So here I also use hg18 version.





1.3 Download Ensembl human gtf annotation files
-----------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/gtf

version: hg18/NCBI36/Ensembl release 54


wget -r -e robots=off -np ftp://ftp.ensembl.org/pub/release-54/gtf/homo_sapiens/


download files: Homo_sapiens.NCBI36.54.gtf



NOTE:
For different versions of Ensembl vs. NCBI, see 
http://www.ensembl.org/Homo_sapiens/Info/Index


1.4 Download UCSC Human tree files 
-----------------------------------------
Directory: 

version: hg18/NCBI36/Ensembl release 54

__________________________




 converts ensembl gtf to quality control gtf
---------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/gtf/


nohup perl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi/ensemblgtf_to_gtf_Shu.pl Homo_sapiens.NCBI36.54.gtf ConvertedHomo_sapiens.NCBI36.54.gtf


input: 
    /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/gtf/Homo_sapiens.NCBI36.54.gtf


output: 
    /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/gtf/ConvertedHomo_sapiens.NCBI36.54.gtf




NOTE:
run ensemblgtf_to_gtf_Shu.pl to convert the hg18 entire gtf file, Homo_sapiens.NCBI36.54.gtf, to the new file, ConvertedHomo_sapiens.NCBI36.54.gtf
1081810-944505=137305 entries are filtered out during this process, due to the incomplete gene structures. 
The resulting number of transcripts found : 63280.










make csv file which is similar to ensembl csv
-----------------------------------------------
directory: /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/csv


perl /ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/scripts/get3UTRcsv.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/gtf/Homo_sapiens.NCBI36.54.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/csv/3UTR_human_csv.txt

input: 

      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/gtf/ConvertedHomo_sapiens.NCBI36.54.gtf


output:

      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/csv/3UTR_human_csv.txt

NOTE:
It accept raw gtf file from ensembl, not the one we generated (different formats) from /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Fly/quality_checking_from_Irmi/ensemblgtf_to_gtf_Shu.pl
      
      
############################
successfully manually checked with fly:
compared the results from my script 3UTR_fly_csv.txt with the one downloaded from ensembl Biomart (/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl/3UTR_protein_coding_strand_csv.txt)
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Human/scripts> perl get3UTRcsv.pl /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/gtf_from_ensembl/Drosophila_melanogaster.BDGP5.67.gtf 3UTR_fly_csv.txt










ensembl csv format to bed6 format
-----------------------------------------------
directory: /ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl


perl csv2bed6.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/csv/3UTR_human_csv.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/gtf/ConvertedHomo_sapiens.NCBI36.54.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/bed/3UTR_human.bed6

input: 

      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/csv/3UTR_human_csv.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/gtf/ConvertedHomo_sapiens.NCBI36.54.gtf


output:

      /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/bed/3UTR_human.bed6




NOTE:
for details of the program, see Fly #4 extracting MAF multiple-sequence alignment for 3' UTRs for fly
Pipeline 1. a. ensembl csv format to bed6 format 



############################
statistics:
############################
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/work/20120525/Fly/3UTR_protein_coding_from_Ensembl> perl csv2bed6.pl /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/scripts/3UTR_human_csv.txt /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/gtf/ConvertedHomo_sapiens.NCBI36.54.gtf /ubc/cs/home/s/syang11/Desktop/syang11/work/20120525/Human/bed/3UTR_human.bed6
total num of annotated 3'UTR (including repeats): 44179
total length of the 3'UTR: 39894027
average length of the 3'UTR: 903.008827723579


_____________________


























#######################
# PWM Alignment project:
####################### 


# last: 20120430


#1. get Felsenstein implementation from Daniel 
Daniel helps to copy and compile a copy of my own; using make and cmake next time I want to recompile it), details for the operations, directories and files are listed below:








1.1 use git copy
syang11@fire:/ubc/cs/research/irmtraud/people/syang11> git clone ../jujubix/share/.repo/
HMMcopy/ R4RNA/   rchie/   Transat/
syang11@fire:/ubc/cs/research/irmtraud/people/syang11> git clone ../jujubix/share/.repo/Transat/
Cloning into Transat...
done.








1.2 make file:
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/Transat/bin> make
[100%] Built target Transat
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/Transat/bin> cmake ..
-- Configuring done
-- Generating done
-- Build files have been written to: /ubc/cs/research/irmtraud/people/syang11/Transat/bin








1.3 to run Transat:
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/Transat/bin> ./Transat






1.4 use git for version control between Daniel and Jeff for the Felsenstein implementation
see above






1.5 Felsenstein: the function takes one alignment and one position as input (what is the probablitiy of the ) (but still need a tree and a matrix to run?); the output is probabilities: it has two options for the output (paired columns probabilities, a squared matrix to the screen (after running ./Transat ) | unpaired column probabilities, a list to the screen)
function name: calcLogFelsUnpaired    (in AlignedHelix.cpp)






#2. paper collection
Several papers related to TFBS (especially, why build the PWM aln important?):
2.1. JASPAR FAM: Constrained binding site diversity within families of transcription factors enhances pattern discovery bioinformatics.
2.2. A survey of DNA motif finding algorithms. (2007)






2.3. Context specific transcription factor prediction. (2007)




2.4. An overview of the computational analyses and discovery of transcription factor binding sites. (2010)




2.5. Identification of co-occurring transcription factor binding sites from DNA sequence using clustered position weight matrices. (2012)
related to this paper (same authors) Prediction and Experimental Validation of Novel STAT3 Target Genes in Human Cancer Cells.
Another related paper: MatInspector and beyond: promoter analysis based on transcription factor binding sites




#3 Ideas and check:
1). RNA-PWM interaction
a. PWM species coverage, 


b. if there are any other PWMs by other group


c. how they get the PWMs (from the sequence or directly from the literature?)


d. PWMs VS PFMs






2). DNA-PWM interaction
prepare the project description and especially review for DNA PWMs: 
a. Data sources




b. quality




c. input for the project




d. application




e. benchmark




























________________




#######################
# RNA-Protein interaction: data collection
#######################




# last: 20121129




# For a detailed view, see the file dataset4RPI.pdf and the tarball at  /ubc/cs/home/s/syang11/Desktop/syang11/work/20120507






=====================================
#1. Datasets
All saved at /ubc/cs/home/s/syang11/Desktop/syang11/work/20120515/
1.1. RBPDB: four species, 272 RBPs with 71 that have motifs in PWM format
experimental observations, manually curated from literature
download the PWM package (72 PWMs)
from the matrix_list.txt file, one can find the corresponding protein # in the first half of second column -> then use this # to locate the protein in the file “All proteins - TDT format” (first column), the last column is the uniprot id of this protein








1.2. doRiNA
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/papers/generalRPI/CLIP/doRiNA/doRiNA


updated on 20121129


NOTE:
“both miRNA and RBP to RNA interaction data, a one-stop solution to transcriptome-wide mining of regulatory interactions in post-transcriptional gene regulation. “




1.2.1 download human data from doRiNA
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/papers/generalRPI/CLIP/doRiNA/doRiNA

version: hg18/NCBI36/Ensembl release 54



download files:

hg18_allRBPs.csv



NOTE:
select all RBPs for Human to query:
UCSC database: hg18, Mar. 2006 (NCBI36/hg18)

  Total number of matching records found: 777887
  Total number of (unique) gene symbols / NCBI RefSeqs found: 13847
  Total number of results for RBPs found: 777887

Note that, one can also fetch the .csv file for each RBP for each experiment individually 



1.2.2 download worm data from doRiNA
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/papers/generalRPI/CLIP/doRiNA/doRiNA

version: WS190/ce6



download files:

ce6_allRBPs.csv



NOTE:
select all RBPs for c.elegans to query:
UCSC database: ce6, May 2008 (WS190/ce6)
  Total number of matching records found: 17411
  Total number of (unique) gene symbols / NCBI RefSeqs found: 7280
  Total number of results for RBPs found: 17411

Note that, one can also fetch the .csv file for each RBP for each experiment individually 




1.2.3 download mouse data from doRiNA
-----------------------------------------
directory: 
/ubc/cs/home/s/syang11/Desktop/syang11/papers/generalRPI/CLIP/doRiNA/doRiNA

version: NCBI37/mm9



download files:

mm9_allRBPs.csv



NOTE:
select all RBPs for Mouse to query:
UCSC database: mm9, July 2007 (NCBI37/mm9)

  Total number of matching records found: 90299
  Total number of (unique) gene symbols / NCBI RefSeqs found: 10893
  Total number of results for RBPs found: 90299

Note that, one can also fetch the .csv file for each RBP for each experiment individually 







original detailes
-----------------------------------------
1.2.1 (original) note: 
there is nothing under the download link for c.elegans (but there are paper names, directly go to the paper?)
http://dorina.mdc-berlin.de/rbp_browser/ce6.html








above problem solved: 
select all RBPs for c.elegans to query:
UCSC database: ce6, May 2008 (WS190/ce6)
  Total number of matching records found: 17411
  Total number of (unique) gene symbols / NCBI RefSeqs found: 7280
  Total number of results for RBPs found: 17411
data  saved at:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120515/doRiNA


_______________________________






1.3 CLIPZ
“a software system that is developed to analyze data resulting from CLIP experiments.”




1.3.1 note: 
1.3.1.1 human download link is the only available one, try to download to see it contains other species




finishing downloading CLIPZ, only human data available, saved at:
/ubc/cs/home/s/syang11/Desktop/syang11/work/20120515/CLIPZ






1.3.1.2 get the info about how to download CLIPZ data from the authors on 20120529. 
But only human and mouse data are there. 
Download the mouse data.
also download mouse data from other databases, if available






1.3.1.3 since the disk is full, temporarily stop downloading data from CLIPZ (too huge) on 20120531






1.4 UCSC
download the yeast alignment data from 
http://hgdownload.cse.ucsc.edu/goldenPath/sacCer3/multiz7way/
syang11@fire:~/Desktop/syang11/work/20120525/Yeast> wget -r -e robots=off -np http://hgdownload.cse.ucsc.edu/goldenPath/sacCer3/multiz7way/maf/






1.4 NPInter database: 
1.4.1) another two links (besides of the broken one that google provides)
http://bioinfo.ibp.ac.cn/NPInter/
http://www.panrna.org/NPInter/






1.4.2). get data:
Browse DB > Browse by interClass > The ncRNA binds the protien class






1.5. collect data info for RPI project
Deciphering the role of RNA-binding proteins in the post-transcriptional control of gene expression
Global or local? Predicting secondary structure and accessibility in mRNAs
PARalyzer: definition of RNA binding sites from PAR-CLIP short-read sequence data.
Diverse RNA-Binding Proteins Interact with Functionally Related Sets of RNAs, Suggesting an Extensive Regulatory System
Rapid and systematic analysis of the RNA recognition specificities of RNA-binding proteins
Prediction of dinucleotide-specific RNA-binding sites in proteins.
Predicting RNA-binding residues from evolutionary information and sequence conservation
RNAcompete
Analysis of interactions between ribosomal proteins and RNA structural motifs
Sequence-specific binding of single-stranded RNA: is there a code for recognition?
Transcriptome-wide identification of RNA-binding protein and microRNA target sites by PAR-CLIP
In silico characterization and prediction of global protein–mRNA interactions in yeast
Prediction of protein–RNA binding sites by a random forest method with combined features
Dissecting protein–RNA recognition sites
Dissecting the protein–RNA interface: the role of protein surface shapes and RNA secondary structures in protein–RNA recognition




http://seqanswers.com/forums/showthread.php?t=19852








=====================================
#2. papers
2.1. papers for RPI from Quaid Morris’s lab
2.1. 1. Predicting in vivo binding sites of RNA-binding proteins using mRNA secondary structure.




2.1. 2. Post-transcriptional gene regulation: RNA-protein interactions, RNA processing, mRNA stability and localization.






2.1.3 RNAcontext: a new method for learning the sequence and structure binding preferences of RNA-binding proteins.






2.2. nature review genetics paper for RPI in 2012
Protein–RNA interactions: new genomic technologies and perspectives






2.2.1 useful info from this paper:
1) “The crosslinking efficiency with UVC (HITS-CLIP and iCLIP) or UVA (PAR-CLIP) varies for different proteins, and the optimal protocol needs to be experimentally determined individually for the protein of interest.”






2) three levels of data analysis
The first level of analysis is genomic mapping of the sequence reads, followed by a second level of clustering and normalization to identify highly occupied binding sites. At the third level, the binding sites are integrated with functional information in order to deduce general regulatory principles. We discuss these different layers of data analysis and interpretation below.






2.3. CLIP bioinformatics
A quantitative analysis of CLIP methods for identifying binding sites of RNA-binding proteins




2.4 latest paper for RPI and ML:
Protein-RNA interface residue prediction using machine learning: an assessment of the state of the art (RNABindR)




2.5. A good paper for RNA-protein interaction technique review from Alborz:
RNA–protein interactions in vivo: global gets specific










#3. Ideas
RNA base pair types 
non-Watson-Crick base pairs (like Hoogsteen, sugar link) are very important to 3D structure of RNA, and thus the interaction with proteins (a number of papers study this) 




apply the ideas in protein-protein interaction to PRI
wiki for PPI prediction












________________




#######################
# RNA-Protein interaction:Build Classifier
#######################
#1. Random Ferns
1). implementation: 
R package http://arxiv.org/abs/1202.1121
http://cran.r-project.org/web/packages/rFerns/index.html




original authors cpp http://cvlab.epfl.ch/software/ferns/index.php




2). original paper
a. Fast Keypoint Recognition in Ten Lines of Code
b. Fast Keypoint Recognition using Random Ferns
c. Image classification using Random forests and ferns
original authors  http://cvlab.epfl.ch/alumni/oezuysal/ferns.html






#2. SVM VS Random forest in microarray domain
A comprehensive comparison of random forests and support vector machines for microarray-based cancer classification




#3. semi-supervised SVM




#4. Machine Learning implementations for RPI:
1). SVM
Muppirala, 2011 uses weka package
Pancaldi, 2011 uses libsvm




2). Random Forest
Muppirala, 2011 uses weka package
Pancaldi, 2011 uses R package for RF




5. Random Forests
a good introduction for oob and variable importance
http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm




________________




















#######################
# Useful Data:
#######################
database for RNA base pair statistics
comparative rna web site:
http://www.rna.ccbb.utexas.edu/




























________________




#######################
# linux operations:
#######################
warn: communicate between members in a local network (but spam)








quota: to see disk quota








df, du
check your usage on any directory (go to the dir and do a "du -k ." which will give you your usage in that dir in kB)







space in Meyer’s lab:
/ubc/cs/research/irmtraud/people/syang11/








(switch to previous directory path): cd (TAB) 








run open office in command line:
soffice








creat empty file:
touch file.








commands to check folder size
syang11@fire:~/Desktop/syang11/work/20120515> du -h --max-depth=1 .








df -h . to display free space and the file system as well



disk backup
-------------------------
differences between netapp disks and -raid disks:
1. netapp disks has automatically backups until two weeks ago.
#in order to recover files/folders that have been mistakenly deleted, go to the hidden folder 
cd .snapshot
#and you can find deleted stuff for the past two weeks

syang11@fire:/ubc/cs/research> df -h irmtraud
Filesystem                                    Size  Used Avail Use% Mounted on
netapp4.cs.ubc.ca:/vol/CPSC_dept09/irmtraud/  1.5T  728G  773G  49% /ubc/cs/research/irmtraud

2. -raid disk is bigger, but no backups. So it could be used to put those big data set downloaded from internet, like human genome alignments.

syang11@fire:/ubc/cs/research> df -h irmtraud-raid
Filesystem                                  Size  Used Avail Use% Mounted on
riverrock.cs.ubc.ca:/export/irmtraud-raid/  2.0T  990G 1011G  50% /ubc/cs/research/irmtraud-raid





# output the line number in a file:
cat a.txt |wc -l




#upload to server
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/workspace/521_mat> scp hw2Mat.c syang@cyclops.cs.ubc.ca:521/a2/Matrix_mutiplication
syang@cyclops.cs.ubc.ca's password: 
hw2Mat.c                                                                                           100% 4605     4.5KB/s   00:00     

reference:
http://blog.51yip.com/server/332.html
http://www.vpser.net/manage/scp.html




bash/bashrc
--------------
add below line to ~/.bashrc file:
#make my directory accessable to other members
umask 027



close programs gracely
----------------
kill

1. Use ps command or pidof command to find out process ID (PID). Syntax:
ps aux | grep processname
pidof processname

2. kill process using PID (process id)
kill
or 
kill -9
or
killall -9 (The killall command kill processes by name (no need to find PID))


ref:
http://en.wikipedia.org/wiki/Kill_%28command%29
http://www.cyberciti.biz/faq/kill-process-in-linux-or-terminate-a-process-in-unix-or-linux-systems/




________________

=====================================
compara cluster








qsub: Daniel use a perl script to generate the submission bash scripts to the qsub 
/ubc/cs/research/irmtraud/people/jujubix/bin/qsub_bash.pl
also see the compara page for help
http://people.cs.ubc.ca/~irmtraud/compara.html








another good tutorial for qsub
http://zhanglab.ccmb.med.umich.edu/docs/node24.html




















________________




#################################
##Papers 
#######################
{/ubc/cs/home/s/syang11/Desktop/syang11/papers}
#20120913
get a presentation by Wahl on RNA and RNPs from Irmi
________________




#######################
# Latex:
#######################






#1. Presentation slides using Latex : 
1.1 Daniel’s slides
1) copy images folder, Makefile and thesis_slides.tex from Daniel’s directory (jujubix) to syang11








2) compile to pdf version (see detailed codes in Makefile file):
make








3) compile twice: first time is to generate the pdf, the second time is to generate the page bars on top of each slide (because one need to generate all the slides first, after then he can get the page bars)








4) open the resulting pdf file:
acroread thesis_slides.pdf








5). some Shortcuts:
under adobe pdf: alt+f+d to refresh ()








1.2 Daniel’s thesis proposal presentation slides
/ubc/cs/research/irmtraud/people/jujubix/text/talk_slides
















#2. Document Files using Latex:
command to make latex dataset4RPI
syang11@fire:~/Desktop/syang11/work/20120507> pdflatex dataset4RPI; bibtex dataset4RPI; pdflatex dataset4RPI; pdflatex dataset4RPI;









2.1 Daniel's thesis proposal doc (note how to make hyperref: \usepackage{hyperref}; make caption: \caption[]{}\label{}; make indexing to figures: \listoffigures)
/ubc/cs/research/irmtraud/people/jujubix/tex/thesis 


















________________





#######################
# Perl language
#######################
1. install package from CPAN
---------------------------------------
details:
http://www.thegeekstuff.com/2008/09/how-to-install-perl-modules-manually-and-using-cpan-command/



In summary, 2 ways:
1.1. Install Perl Modules Manually
-------------------------------
perl Makefile.PL
make
make test 
make install

NOTE:
"This is very simple for one module with no dependencies. Typically, Perl modules will be dependent on several other modules. Chasing all these dependencies one-by-one can be very painful and annoying task. I recommend the CPAN method of installation as shown below. Use the manual method only if the server is not connected to the Internet."



1.2. Install Perl Modules using CPAN automatically
-------------------------------
# /usr/bin/perl -MCPAN -e 'install Statistics::R'

or

>CPAN
cpan[1]> install "Statistics::R"


NOTE:
"Statistics::R is dependent on the several other modules. CPAN automatically resolves the dependencies and installs Statistics::R and all the dependent Perl modules." But this only works when one has the root permission.




1.3. Install Perl Modules from a non-root account
-------------------------------
details:
[1]http://alumni.soe.ucsc.edu/~you/notes/perl-module-install.html
[2]http://stackoverflow.com/questions/3735836/how-can-i-install-perl-modules-without-root-privileges
[3]http://perldoc.perl.org/ExtUtils/MakeMaker/FAQ.html
[4]http://stackoverflow.com/questions/2980297/how-can-i-use-cpan-as-a-non-root-user


I used [4] (the easiest; manually run Makefile.pl should also work, not checked though).


In summary:
[1]
"
(The conventional installation method is:

cd ~/src/Statistics-Descriptive-2.6
perl Makefile.PL
make
make test
make install
)

But specify the installation into ~/lib/perl5 instead:

cd ~/src/Statistics-Descriptive-2.6
perl Makefile.PL PREFIX=~/lib/perl5
make
make test
make install

Installing /home/you/lib/perl5/site_perl/5.8.2/Statistics/Descriptive.pm
Writing /home/you/lib/perl5/site_perl/5.8.2/cygwin-thread-multi-64int/auto/Statistics/Descriptive/.packlist
Appending installation info to /home/you/lib/perl5/5.8.2/cygwin-thread-multi-64int/perllocal.pod
"
______________


[2]
"
How do I keep my own module/library directory?

When you build modules, tell Perl where to install the modules.

If you want to install modules for your own use, the easiest way might be local::lib, which you can download from CPAN. It sets various installation settings for you, and uses those same settings within your programs.

If you want more flexibility, you need to configure your CPAN client for your particular situation.

For Makefile.PL-based distributions, use the INSTALL_BASE option when generating Makefiles:

perl Makefile.PL INSTALL_BASE=/mydir/perl

You can set this in your CPAN.pm configuration so modules automatically install in your private library directory when you use the CPAN.pm shell:

% cpan
cpan> o conf makepl_arg INSTALL_BASE=/mydir/perl
cpan> o conf commit

For Build.PL-based distributions, use the --install_base option:

perl Build.PL --install_base /mydir/perl

You can configure CPAN.pm to automatically use this option too:

% cpan
cpan> o conf mbuild_arg "--install_base /mydir/perl"
cpan> o conf commit

INSTALL_BASE tells these tools to put your modules into /mydir/perl/lib/perl5. See How do I add a directory to my include path (@INC) at runtime? for details on how to run your newly installed modules.

There is one caveat with INSTALL_BASE, though, since it acts differently than the PREFIX and LIB settings that older versions of ExtUtils::MakeMaker advocated. INSTALL_BASE does not support installing modules for multiple versions of Perl or different architectures under the same directory. You should consider if you really want that , and if you do, use the older PREFIX and LIB settings. See the ExtUtils::Makemaker documentation for more details.
"
______________



[3]
"
PREFIX vs INSTALL_BASE from Module::Build::Cookbook

The behavior of PREFIX is complicated and depends closely on how your Perl is configured. The resulting installation locations will vary from machine to machine and even different installations of Perl on the same machine. Because of this, its difficult to document where prefix will place your modules.

In contrast, INSTALL_BASE has predictable, easy to explain installation locations. Now that Module::Build and MakeMaker both have INSTALL_BASE there is little reason to use PREFIX other than to preserve your existing installation locations. If you are starting a fresh Perl installation we encourage you to use INSTALL_BASE. If you have an existing installation installed via PREFIX, consider moving it to an installation structure matching INSTALL_BASE and using that instead.
"
______________


[4]
#1. note to remove first any existing PERL5LIB environment variables already in your ~/.bashrc (or .bash_profile). Otherwise local::lib will fail to install when running the first command.
wget -O- http://cpanmin.us | perl - -l /ubc/cs/research/irmtraud/people/syang11/bin/perl5 App::cpanminus local::lib

#2. if not specify -Mlocal::lib=/ubc/cs/research/irmtraud/people/syang11/bin/perl5, the Statistics::R and its dependencies packages will be installed in ~/perl5
eval `perl -I /ubc/cs/research/irmtraud/people/syang11/bin/perl5/lib/perl5 -Mlocal::lib=/ubc/cs/research/irmtraud/people/syang11/bin/perl5`

#3. modify ~/.bashrc file (I did not do the following, but instead add /ubc/cs/research/irmtraud/people/syang11/bin/perl5/lib/perl5 to PERL5LIB variable. Both work.)
echo 'eval `perl -I /ubc/cs/research/irmtraud/people/syang11/bin/perl5/lib/perl5 -Mlocal::lib=/ubc/cs/research/irmtraud/people/syang11/bin/perl5`' >> ~/.bashrc
source ~/.bashrc

#4. download and install Statistics::R and its dependencies packages
syang11@fire:/ubc/cs/research/irmtraud/people/syang11/bin/perl5/bin> ./cpanm Statistics::R

#5. test if installed successfully
perl -e "use Statistics::R;"


## based on
"
The easiest method I have found so far is to say

wget -O- http://cpanmin.us | perl - -l ~/perl5 App::cpanminus local::lib
eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`
echo 'eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`' >> ~/.profile

This assumes your profile is named .profile, you may need to change that to be .bash_profile, .bashrc, etc. After that you can install modules by saying

cpanm Module::Name

and simply use them the same way you would if the were installed in the root directories.

What follows is a brief explanation of what the commands above do.

wget -O- http://cpanmin.us fetches the latest version of cpanm and prints it to STDOUT which is then piped to perl - -l ~/perl5 App::cpanminus local::lib. The first - tells perl to expect the program to come in on STDIN, this makes perl run the version of cpanm we just downloaded. perl passes the rest of the arguments to cpanm. The -l ~/perl5 argument tells cpanm where to install Perl modules, and the other two arguments are two modules to install. [App::cpanmins]1 is the package that installs cpanm. local::lib is a helper module that manages the environment variables needed to run modules in local directory.

After those modules are installed we run

eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`

to set the environment variables needed to use the local modules and then

echo 'eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`' >> ~/.profile

to ensure we will be able to use them the next time we log in.
"



2. Statistics::R
------------------------------------
directory:/ubc/cs/research/irmtraud/people/syang11/bin/perl5/lib/perl5

url: http://search.cpan.org/~fangly/Statistics-R-0.30/lib/Statistics/R.pm

NOTE:
use here-doc(here doc is equivalent to "" or '' or ``) to run R command inside of perl. 

According to the url, one can pass scalar or vector values from perl to R by using:
# Create an R scalar
$R->set( 'x', 'pear' );
# Create an R list
$R->set( 'y', [1, 2, 3] );  

But indeed, if one want to pass an array @a instead of [1, 2, 3] this way, $R->set( 'y', @a ), the 'y' in R would only get the first element 1, not the rest 2,3. Alternatively, one can use reference in perl like $a=[1, 2, 3], then pass the array by $R->set( 'y', $a ). It works in this way though not mentioned in the webpage (not stable yet?--checked source code R.pm in Statistics::R, it should be FINE to run it this way)
______________








#######################
# Bioperl
#######################
# 1. use bioperl from Daniel
can not install bioperl under usr/  :no permission
but can install locally on either ~ or research/syan11 using local::lib
right now, use the one Daniel has installed under his folder
/ubc/cs/research/irmtraud/people/jujubix/tilde/README
1). add the sources according to Daniel’s README file (add lines to ~/.bashrc)








2). source .bashrc and test
syang11@fire:~/Desktop/syang11/work/20120525/Li2010> source ~/.bashrc
syang11@fire:~/Desktop/syang11/work/20120525/Li2010> perl -e "use Bio::AlignIO;"




























________________


#######################
# IDE
#######################
1. set up perl ide (in Anjuta and Kdevelop)
in order to directly run perl scripts from the ide, just to configure the “execute” setting by putting the perl program path there (normally /usr/bin/perl; if not, use “which perl” command)




































________________




#######################
# Machine problem/ Trouble shooting
#######################
1. xfce problem: can not find top/title bar
solution: logout xfce (the graphic system) to the command line system. then remove all the things in cache folder?
syang11@fire:~> find .local/
syang11@fire:~> mv .local dot.local-problematic
syang11@fire:~> rm dot.local-problematic
syang11@fire:~> find .cache/
syang11@fire:~> mv .cache/ dot.cache-problematic
syang11@fire:~> rm -rf dot.cache-problematic/ dot.local-problematic/
syang11@fire:~> find .cache/




























________________




############################
# Software and tools
#######################
# tree drawing
List of phylogenetic tree visualization software:
http://en.wikipedia.org/wiki/List_of_phylogenetic_tree_visualization_software








# CERN
One excellent resource of numerical C++ libraries is the so-called Root library by CERN (the physics community of the big hadron collider in Switzerland). This is where Daniel got some fitting programs from, see 
http://root.cern.ch/drupal/







############################
# R language
############################
R repositaries
1). CRAN
2). Bioconductor



get help file 
-----------------------------------------------
?command
eg. ?sink


output history file
-----------------------------------------------
savehistory("/ubc/cs/home/s/syang11/Desktop/syang11/work/20120726/comparative_results/plots/pfold/his.txt")
history(100, FALSE)	#screen output

NOTE:
sink doesn't work



detailed explanation of the boxplot in R
-----------------------------------------------
http://msenux.redwoods.edu/math/R/boxplot.php




use Daniel's R (version 2.15) instead of the departmental R (version 2.13)
-----------------------------------------------
need to edit ~/.bashrc and ~/.bash_profile file to put Daniel's R directory to my path, put something like:
export PATH=/ubc/cs/research/irmtraud/people/jujubix/bin/src/R-2.15.0/bin:$PATH:/ubc/cs/research/irmtraud/people/jujubix/bin:/usr/sbin:/usr/lib/lp/postscript:/home/o/oracle/bin 

Note that the bin directory that contains R probably need to apear at the beginning since the path loading is doing in a search fashion, so once the first path is loaded the search may terminate.  

and for differences between bashrc vs bash_profile:
According to the bash man page, .bash_profile is executed for login shells, while .bashrc is executed for interactive non-login shells.
http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html

to check if the R path has been corretly set:
syang11@fire:~/Desktop/syang11/work/20120726/comparative_results/logo/berrylogo/berrylogo> which R
/ubc/cs/research/irmtraud/people/jujubix/bin/src/R-2.15.0/bin/R




call R from shell
-----------------------------------------------
R --no-save -q <berrylogo.r
or
R <test.R --vanilla



or
Rscript
--------------------------------------
http://stat.ethz.ch/R-manual/R-patched/library/utils/html/Rscript.html

"This is an alternative front end for use in #! scripts and other scripting applications. "


Rscript test.R arg1 arg2 >out.file


NOTE:
need codes in test.R to accept arguments:
#! /path/to/Rscript --vanilla --default-packages=utils
args <- commandArgs(TRUE)










#######################
# Tips:
#######################
1. Keep logs








2. papers put together into a directory








3. keep records of available data
